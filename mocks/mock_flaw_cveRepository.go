// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// VulnCveRepository is an autogenerated mock type for the cveRepository type
type VulnCveRepository struct {
	mock.Mock
}

type VulnCveRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *VulnCveRepository) EXPECT() *VulnCveRepository_Expecter {
	return &VulnCveRepository_Expecter{mock: &_m.Mock}
}

// FindCVE provides a mock function with given fields: tx, cveId
func (_m *VulnCveRepository) FindCVE(tx *gorm.DB, cveId string) (models.CVE, error) {
	ret := _m.Called(tx, cveId)

	if len(ret) == 0 {
		panic("no return value specified for FindCVE")
	}

	var r0 models.CVE
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (models.CVE, error)); ok {
		return rf(tx, cveId)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) models.CVE); ok {
		r0 = rf(tx, cveId)
	} else {
		r0 = ret.Get(0).(models.CVE)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, cveId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VulnCveRepository_FindCVE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCVE'
type VulnCveRepository_FindCVE_Call struct {
	*mock.Call
}

// FindCVE is a helper method to define mock.On call
//   - tx *gorm.DB
//   - cveId string
func (_e *VulnCveRepository_Expecter) FindCVE(tx interface{}, cveId interface{}) *VulnCveRepository_FindCVE_Call {
	return &VulnCveRepository_FindCVE_Call{Call: _e.mock.On("FindCVE", tx, cveId)}
}

func (_c *VulnCveRepository_FindCVE_Call) Run(run func(tx *gorm.DB, cveId string)) *VulnCveRepository_FindCVE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *VulnCveRepository_FindCVE_Call) Return(_a0 models.CVE, _a1 error) *VulnCveRepository_FindCVE_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VulnCveRepository_FindCVE_Call) RunAndReturn(run func(*gorm.DB, string) (models.CVE, error)) *VulnCveRepository_FindCVE_Call {
	_c.Call.Return(run)
	return _c
}

// NewVulnCveRepository creates a new instance of VulnCveRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVulnCveRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VulnCveRepository {
	mock := &VulnCveRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
