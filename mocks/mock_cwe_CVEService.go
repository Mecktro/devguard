// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cwe "github.com/l3montree-dev/flawfix/internal/core/cwe"
	mock "github.com/stretchr/testify/mock"
)

// CweCVEService is an autogenerated mock type for the CVEService type
type CweCVEService struct {
	mock.Mock
}

type CweCVEService_Expecter struct {
	mock *mock.Mock
}

func (_m *CweCVEService) EXPECT() *CweCVEService_Expecter {
	return &CweCVEService_Expecter{mock: &_m.Mock}
}

// GetCVE provides a mock function with given fields: ctx, ruleID
func (_m *CweCVEService) GetCVE(ctx context.Context, ruleID string) (cwe.CVEModel, error) {
	ret := _m.Called(ctx, ruleID)

	if len(ret) == 0 {
		panic("no return value specified for GetCVE")
	}

	var r0 cwe.CVEModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (cwe.CVEModel, error)); ok {
		return rf(ctx, ruleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) cwe.CVEModel); ok {
		r0 = rf(ctx, ruleID)
	} else {
		r0 = ret.Get(0).(cwe.CVEModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ruleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CweCVEService_GetCVE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCVE'
type CweCVEService_GetCVE_Call struct {
	*mock.Call
}

// GetCVE is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleID string
func (_e *CweCVEService_Expecter) GetCVE(ctx interface{}, ruleID interface{}) *CweCVEService_GetCVE_Call {
	return &CweCVEService_GetCVE_Call{Call: _e.mock.On("GetCVE", ctx, ruleID)}
}

func (_c *CweCVEService_GetCVE_Call) Run(run func(ctx context.Context, ruleID string)) *CweCVEService_GetCVE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CweCVEService_GetCVE_Call) Return(_a0 cwe.CVEModel, _a1 error) *CweCVEService_GetCVE_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CweCVEService_GetCVE_Call) RunAndReturn(run func(context.Context, string) (cwe.CVEModel, error)) *CweCVEService_GetCVE_Call {
	_c.Call.Return(run)
	return _c
}

// IsCVE provides a mock function with given fields: ruleID
func (_m *CweCVEService) IsCVE(ruleID string) bool {
	ret := _m.Called(ruleID)

	if len(ret) == 0 {
		panic("no return value specified for IsCVE")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(ruleID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CweCVEService_IsCVE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCVE'
type CweCVEService_IsCVE_Call struct {
	*mock.Call
}

// IsCVE is a helper method to define mock.On call
//   - ruleID string
func (_e *CweCVEService_Expecter) IsCVE(ruleID interface{}) *CweCVEService_IsCVE_Call {
	return &CweCVEService_IsCVE_Call{Call: _e.mock.On("IsCVE", ruleID)}
}

func (_c *CweCVEService_IsCVE_Call) Run(run func(ruleID string)) *CweCVEService_IsCVE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CweCVEService_IsCVE_Call) Return(_a0 bool) *CweCVEService_IsCVE_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CweCVEService_IsCVE_Call) RunAndReturn(run func(string) bool) *CweCVEService_IsCVE_Call {
	_c.Call.Return(run)
	return _c
}

// NewCweCVEService creates a new instance of CweCVEService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCweCVEService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CweCVEService {
	mock := &CweCVEService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
