// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// GithubAppInstallationRepository is an autogenerated mock type for the GithubAppInstallationRepository type
type GithubAppInstallationRepository struct {
	mock.Mock
}

type GithubAppInstallationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *GithubAppInstallationRepository) EXPECT() *GithubAppInstallationRepository_Expecter {
	return &GithubAppInstallationRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: tx, installationID
func (_m *GithubAppInstallationRepository) Delete(tx *gorm.DB, installationID int) error {
	ret := _m.Called(tx, installationID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) error); ok {
		r0 = rf(tx, installationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GithubAppInstallationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type GithubAppInstallationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - installationID int
func (_e *GithubAppInstallationRepository_Expecter) Delete(tx interface{}, installationID interface{}) *GithubAppInstallationRepository_Delete_Call {
	return &GithubAppInstallationRepository_Delete_Call{Call: _e.mock.On("Delete", tx, installationID)}
}

func (_c *GithubAppInstallationRepository_Delete_Call) Run(run func(tx *gorm.DB, installationID int)) *GithubAppInstallationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(int))
	})
	return _c
}

func (_c *GithubAppInstallationRepository_Delete_Call) Return(_a0 error) *GithubAppInstallationRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GithubAppInstallationRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, int) error) *GithubAppInstallationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByOrganizationId provides a mock function with given fields: orgID
func (_m *GithubAppInstallationRepository) FindByOrganizationId(orgID uuid.UUID) ([]models.GithubAppInstallation, error) {
	ret := _m.Called(orgID)

	if len(ret) == 0 {
		panic("no return value specified for FindByOrganizationId")
	}

	var r0 []models.GithubAppInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.GithubAppInstallation, error)); ok {
		return rf(orgID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.GithubAppInstallation); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GithubAppInstallation)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubAppInstallationRepository_FindByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOrganizationId'
type GithubAppInstallationRepository_FindByOrganizationId_Call struct {
	*mock.Call
}

// FindByOrganizationId is a helper method to define mock.On call
//   - orgID uuid.UUID
func (_e *GithubAppInstallationRepository_Expecter) FindByOrganizationId(orgID interface{}) *GithubAppInstallationRepository_FindByOrganizationId_Call {
	return &GithubAppInstallationRepository_FindByOrganizationId_Call{Call: _e.mock.On("FindByOrganizationId", orgID)}
}

func (_c *GithubAppInstallationRepository_FindByOrganizationId_Call) Run(run func(orgID uuid.UUID)) *GithubAppInstallationRepository_FindByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *GithubAppInstallationRepository_FindByOrganizationId_Call) Return(_a0 []models.GithubAppInstallation, _a1 error) *GithubAppInstallationRepository_FindByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubAppInstallationRepository_FindByOrganizationId_Call) RunAndReturn(run func(uuid.UUID) ([]models.GithubAppInstallation, error)) *GithubAppInstallationRepository_FindByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: installationID
func (_m *GithubAppInstallationRepository) Read(installationID int) (models.GithubAppInstallation, error) {
	ret := _m.Called(installationID)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.GithubAppInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (models.GithubAppInstallation, error)); ok {
		return rf(installationID)
	}
	if rf, ok := ret.Get(0).(func(int) models.GithubAppInstallation); ok {
		r0 = rf(installationID)
	} else {
		r0 = ret.Get(0).(models.GithubAppInstallation)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(installationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubAppInstallationRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type GithubAppInstallationRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - installationID int
func (_e *GithubAppInstallationRepository_Expecter) Read(installationID interface{}) *GithubAppInstallationRepository_Read_Call {
	return &GithubAppInstallationRepository_Read_Call{Call: _e.mock.On("Read", installationID)}
}

func (_c *GithubAppInstallationRepository_Read_Call) Run(run func(installationID int)) *GithubAppInstallationRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *GithubAppInstallationRepository_Read_Call) Return(_a0 models.GithubAppInstallation, _a1 error) *GithubAppInstallationRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubAppInstallationRepository_Read_Call) RunAndReturn(run func(int) (models.GithubAppInstallation, error)) *GithubAppInstallationRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, model
func (_m *GithubAppInstallationRepository) Save(tx *gorm.DB, model *models.GithubAppInstallation) error {
	ret := _m.Called(tx, model)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.GithubAppInstallation) error); ok {
		r0 = rf(tx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GithubAppInstallationRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type GithubAppInstallationRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - model *models.GithubAppInstallation
func (_e *GithubAppInstallationRepository_Expecter) Save(tx interface{}, model interface{}) *GithubAppInstallationRepository_Save_Call {
	return &GithubAppInstallationRepository_Save_Call{Call: _e.mock.On("Save", tx, model)}
}

func (_c *GithubAppInstallationRepository_Save_Call) Run(run func(tx *gorm.DB, model *models.GithubAppInstallation)) *GithubAppInstallationRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.GithubAppInstallation))
	})
	return _c
}

func (_c *GithubAppInstallationRepository_Save_Call) Return(_a0 error) *GithubAppInstallationRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GithubAppInstallationRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.GithubAppInstallation) error) *GithubAppInstallationRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewGithubAppInstallationRepository creates a new instance of GithubAppInstallationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGithubAppInstallationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GithubAppInstallationRepository {
	mock := &GithubAppInstallationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
