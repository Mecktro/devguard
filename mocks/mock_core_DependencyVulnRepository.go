// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	core "github.com/l3montree-dev/devguard/internal/core"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/l3montree-dev/devguard/internal/database/models"

	uuid "github.com/google/uuid"
)

// CoreDependencyVulnRepository is an autogenerated mock type for the DependencyVulnRepository type
type CoreDependencyVulnRepository struct {
	mock.Mock
}

type CoreDependencyVulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreDependencyVulnRepository) EXPECT() *CoreDependencyVulnRepository_Expecter {
	return &CoreDependencyVulnRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: tx, id
func (_m *CoreDependencyVulnRepository) Activate(tx *gorm.DB, id string) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreDependencyVulnRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type CoreDependencyVulnRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id string
func (_e *CoreDependencyVulnRepository_Expecter) Activate(tx interface{}, id interface{}) *CoreDependencyVulnRepository_Activate_Call {
	return &CoreDependencyVulnRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *CoreDependencyVulnRepository_Activate_Call) Run(run func(tx *gorm.DB, id string)) *CoreDependencyVulnRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_Activate_Call) Return(_a0 error) *CoreDependencyVulnRepository_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreDependencyVulnRepository_Activate_Call) RunAndReturn(run func(*gorm.DB, string) error) *CoreDependencyVulnRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyAndSave provides a mock function with given fields: tx, dependencyVuln, vulnEvent
func (_m *CoreDependencyVulnRepository) ApplyAndSave(tx *gorm.DB, dependencyVuln *models.DependencyVuln, vulnEvent *models.VulnEvent) error {
	ret := _m.Called(tx, dependencyVuln, vulnEvent)

	if len(ret) == 0 {
		panic("no return value specified for ApplyAndSave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.DependencyVuln, *models.VulnEvent) error); ok {
		r0 = rf(tx, dependencyVuln, vulnEvent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreDependencyVulnRepository_ApplyAndSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyAndSave'
type CoreDependencyVulnRepository_ApplyAndSave_Call struct {
	*mock.Call
}

// ApplyAndSave is a helper method to define mock.On call
//   - tx *gorm.DB
//   - dependencyVuln *models.DependencyVuln
//   - vulnEvent *models.VulnEvent
func (_e *CoreDependencyVulnRepository_Expecter) ApplyAndSave(tx interface{}, dependencyVuln interface{}, vulnEvent interface{}) *CoreDependencyVulnRepository_ApplyAndSave_Call {
	return &CoreDependencyVulnRepository_ApplyAndSave_Call{Call: _e.mock.On("ApplyAndSave", tx, dependencyVuln, vulnEvent)}
}

func (_c *CoreDependencyVulnRepository_ApplyAndSave_Call) Run(run func(tx *gorm.DB, dependencyVuln *models.DependencyVuln, vulnEvent *models.VulnEvent)) *CoreDependencyVulnRepository_ApplyAndSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.DependencyVuln), args[2].(*models.VulnEvent))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_ApplyAndSave_Call) Return(_a0 error) *CoreDependencyVulnRepository_ApplyAndSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreDependencyVulnRepository_ApplyAndSave_Call) RunAndReturn(run func(*gorm.DB, *models.DependencyVuln, *models.VulnEvent) error) *CoreDependencyVulnRepository_ApplyAndSave_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function with no fields
func (_m *CoreDependencyVulnRepository) Begin() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// CoreDependencyVulnRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type CoreDependencyVulnRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *CoreDependencyVulnRepository_Expecter) Begin() *CoreDependencyVulnRepository_Begin_Call {
	return &CoreDependencyVulnRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *CoreDependencyVulnRepository_Begin_Call) Run(run func()) *CoreDependencyVulnRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_Begin_Call) Return(_a0 *gorm.DB) *CoreDependencyVulnRepository_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreDependencyVulnRepository_Begin_Call) RunAndReturn(run func() *gorm.DB) *CoreDependencyVulnRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, t
func (_m *CoreDependencyVulnRepository) Create(tx *gorm.DB, t *models.DependencyVuln) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.DependencyVuln) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreDependencyVulnRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CoreDependencyVulnRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.DependencyVuln
func (_e *CoreDependencyVulnRepository_Expecter) Create(tx interface{}, t interface{}) *CoreDependencyVulnRepository_Create_Call {
	return &CoreDependencyVulnRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *CoreDependencyVulnRepository_Create_Call) Run(run func(tx *gorm.DB, t *models.DependencyVuln)) *CoreDependencyVulnRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.DependencyVuln))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_Create_Call) Return(_a0 error) *CoreDependencyVulnRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreDependencyVulnRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *models.DependencyVuln) error) *CoreDependencyVulnRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function with given fields: tx, ts
func (_m *CoreDependencyVulnRepository) CreateBatch(tx *gorm.DB, ts []models.DependencyVuln) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.DependencyVuln) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreDependencyVulnRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type CoreDependencyVulnRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.DependencyVuln
func (_e *CoreDependencyVulnRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *CoreDependencyVulnRepository_CreateBatch_Call {
	return &CoreDependencyVulnRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *CoreDependencyVulnRepository_CreateBatch_Call) Run(run func(tx *gorm.DB, ts []models.DependencyVuln)) *CoreDependencyVulnRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.DependencyVuln))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_CreateBatch_Call) Return(_a0 error) *CoreDependencyVulnRepository_CreateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreDependencyVulnRepository_CreateBatch_Call) RunAndReturn(run func(*gorm.DB, []models.DependencyVuln) error) *CoreDependencyVulnRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tx, id
func (_m *CoreDependencyVulnRepository) Delete(tx *gorm.DB, id string) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreDependencyVulnRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CoreDependencyVulnRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id string
func (_e *CoreDependencyVulnRepository_Expecter) Delete(tx interface{}, id interface{}) *CoreDependencyVulnRepository_Delete_Call {
	return &CoreDependencyVulnRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *CoreDependencyVulnRepository_Delete_Call) Run(run func(tx *gorm.DB, id string)) *CoreDependencyVulnRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_Delete_Call) Return(_a0 error) *CoreDependencyVulnRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreDependencyVulnRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, string) error) *CoreDependencyVulnRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOpenVulnsByAssetVersionNameAndAssetId provides a mock function with given fields: tx, assetVersionName, assetID
func (_m *CoreDependencyVulnRepository) GetAllOpenVulnsByAssetVersionNameAndAssetId(tx *gorm.DB, assetVersionName string, assetID uuid.UUID) ([]models.DependencyVuln, error) {
	ret := _m.Called(tx, assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOpenVulnsByAssetVersionNameAndAssetId")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID) ([]models.DependencyVuln, error)); ok {
		return rf(tx, assetVersionName, assetID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID) []models.DependencyVuln); ok {
		r0 = rf(tx, assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID) error); ok {
		r1 = rf(tx, assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOpenVulnsByAssetVersionNameAndAssetId'
type CoreDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call struct {
	*mock.Call
}

// GetAllOpenVulnsByAssetVersionNameAndAssetId is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
func (_e *CoreDependencyVulnRepository_Expecter) GetAllOpenVulnsByAssetVersionNameAndAssetId(tx interface{}, assetVersionName interface{}, assetID interface{}) *CoreDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	return &CoreDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call{Call: _e.mock.On("GetAllOpenVulnsByAssetVersionNameAndAssetId", tx, assetVersionName, assetID)}
}

func (_c *CoreDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID)) *CoreDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call) Return(_a0 []models.DependencyVuln, _a1 error) *CoreDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID) ([]models.DependencyVuln, error)) *CoreDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllVulnsByAssetID provides a mock function with given fields: tx, assetID
func (_m *CoreDependencyVulnRepository) GetAllVulnsByAssetID(tx *gorm.DB, assetID uuid.UUID) ([]models.DependencyVuln, error) {
	ret := _m.Called(tx, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVulnsByAssetID")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) ([]models.DependencyVuln, error)); ok {
		return rf(tx, assetID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) []models.DependencyVuln); ok {
		r0 = rf(tx, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, uuid.UUID) error); ok {
		r1 = rf(tx, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDependencyVulnRepository_GetAllVulnsByAssetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllVulnsByAssetID'
type CoreDependencyVulnRepository_GetAllVulnsByAssetID_Call struct {
	*mock.Call
}

// GetAllVulnsByAssetID is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetID uuid.UUID
func (_e *CoreDependencyVulnRepository_Expecter) GetAllVulnsByAssetID(tx interface{}, assetID interface{}) *CoreDependencyVulnRepository_GetAllVulnsByAssetID_Call {
	return &CoreDependencyVulnRepository_GetAllVulnsByAssetID_Call{Call: _e.mock.On("GetAllVulnsByAssetID", tx, assetID)}
}

func (_c *CoreDependencyVulnRepository_GetAllVulnsByAssetID_Call) Run(run func(tx *gorm.DB, assetID uuid.UUID)) *CoreDependencyVulnRepository_GetAllVulnsByAssetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_GetAllVulnsByAssetID_Call) Return(_a0 []models.DependencyVuln, _a1 error) *CoreDependencyVulnRepository_GetAllVulnsByAssetID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDependencyVulnRepository_GetAllVulnsByAssetID_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) ([]models.DependencyVuln, error)) *CoreDependencyVulnRepository_GetAllVulnsByAssetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetVersionPaged provides a mock function with given fields: tx, assetVersionName, assetID, pageInfo, search, filter, sort
func (_m *CoreDependencyVulnRepository) GetByAssetVersionPaged(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], map[string]int, error) {
	ret := _m.Called(tx, assetVersionName, assetID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetVersionPaged")
	}

	var r0 core.Paged[models.DependencyVuln]
	var r1 map[string]int
	var r2 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], map[string]int, error)); ok {
		return rf(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.DependencyVuln]); ok {
		r0 = rf(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.DependencyVuln])
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) map[string]int); ok {
		r1 = rf(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]int)
		}
	}

	if rf, ok := ret.Get(2).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r2 = rf(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CoreDependencyVulnRepository_GetByAssetVersionPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetVersionPaged'
type CoreDependencyVulnRepository_GetByAssetVersionPaged_Call struct {
	*mock.Call
}

// GetByAssetVersionPaged is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *CoreDependencyVulnRepository_Expecter) GetByAssetVersionPaged(tx interface{}, assetVersionName interface{}, assetID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *CoreDependencyVulnRepository_GetByAssetVersionPaged_Call {
	return &CoreDependencyVulnRepository_GetByAssetVersionPaged_Call{Call: _e.mock.On("GetByAssetVersionPaged", tx, assetVersionName, assetID, pageInfo, search, filter, sort)}
}

func (_c *CoreDependencyVulnRepository_GetByAssetVersionPaged_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *CoreDependencyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].(core.PageInfo), args[4].(string), args[5].([]core.FilterQuery), args[6].([]core.SortQuery))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_GetByAssetVersionPaged_Call) Return(_a0 core.Paged[models.DependencyVuln], _a1 map[string]int, _a2 error) *CoreDependencyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CoreDependencyVulnRepository_GetByAssetVersionPaged_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], map[string]int, error)) *CoreDependencyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: tx
func (_m *CoreDependencyVulnRepository) GetDB(tx *gorm.DB) *gorm.DB {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// CoreDependencyVulnRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type CoreDependencyVulnRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *CoreDependencyVulnRepository_Expecter) GetDB(tx interface{}) *CoreDependencyVulnRepository_GetDB_Call {
	return &CoreDependencyVulnRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *CoreDependencyVulnRepository_GetDB_Call) Run(run func(tx *gorm.DB)) *CoreDependencyVulnRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDB_Call) Return(_a0 *gorm.DB) *CoreDependencyVulnRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDB_Call) RunAndReturn(run func(*gorm.DB) *gorm.DB) *CoreDependencyVulnRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultDependencyVulnsByOrgIdPaged provides a mock function with given fields: tx, userAllowedProjectIds, pageInfo, search, filter, sort
func (_m *CoreDependencyVulnRepository) GetDefaultDependencyVulnsByOrgIdPaged(tx *gorm.DB, userAllowedProjectIds []string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], error) {
	ret := _m.Called(tx, userAllowedProjectIds, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultDependencyVulnsByOrgIdPaged")
	}

	var r0 core.Paged[models.DependencyVuln]
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], error)); ok {
		return rf(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.DependencyVuln]); ok {
		r0 = rf(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.DependencyVuln])
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = rf(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultDependencyVulnsByOrgIdPaged'
type CoreDependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call struct {
	*mock.Call
}

// GetDefaultDependencyVulnsByOrgIdPaged is a helper method to define mock.On call
//   - tx *gorm.DB
//   - userAllowedProjectIds []string
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *CoreDependencyVulnRepository_Expecter) GetDefaultDependencyVulnsByOrgIdPaged(tx interface{}, userAllowedProjectIds interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call {
	return &CoreDependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call{Call: _e.mock.On("GetDefaultDependencyVulnsByOrgIdPaged", tx, userAllowedProjectIds, pageInfo, search, filter, sort)}
}

func (_c *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call) Run(run func(tx *gorm.DB, userAllowedProjectIds []string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]string), args[2].(core.PageInfo), args[3].(string), args[4].([]core.FilterQuery), args[5].([]core.SortQuery))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call) Return(_a0 core.Paged[models.DependencyVuln], _a1 error) *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call) RunAndReturn(run func(*gorm.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], error)) *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultDependencyVulnsByProjectIdPaged provides a mock function with given fields: tx, projectID, pageInfo, search, filter, sort
func (_m *CoreDependencyVulnRepository) GetDefaultDependencyVulnsByProjectIdPaged(tx *gorm.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], error) {
	ret := _m.Called(tx, projectID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultDependencyVulnsByProjectIdPaged")
	}

	var r0 core.Paged[models.DependencyVuln]
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], error)); ok {
		return rf(tx, projectID, pageInfo, search, filter, sort)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.DependencyVuln]); ok {
		r0 = rf(tx, projectID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.DependencyVuln])
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = rf(tx, projectID, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultDependencyVulnsByProjectIdPaged'
type CoreDependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call struct {
	*mock.Call
}

// GetDefaultDependencyVulnsByProjectIdPaged is a helper method to define mock.On call
//   - tx *gorm.DB
//   - projectID uuid.UUID
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *CoreDependencyVulnRepository_Expecter) GetDefaultDependencyVulnsByProjectIdPaged(tx interface{}, projectID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call {
	return &CoreDependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call{Call: _e.mock.On("GetDefaultDependencyVulnsByProjectIdPaged", tx, projectID, pageInfo, search, filter, sort)}
}

func (_c *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call) Run(run func(tx *gorm.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID), args[2].(core.PageInfo), args[3].(string), args[4].([]core.FilterQuery), args[5].([]core.SortQuery))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call) Return(_a0 core.Paged[models.DependencyVuln], _a1 error) *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], error)) *CoreDependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyVulnsByAssetVersion provides a mock function with given fields: tx, assetVersionName, assetVersionID
func (_m *CoreDependencyVulnRepository) GetDependencyVulnsByAssetVersion(tx *gorm.DB, assetVersionName string, assetVersionID uuid.UUID) ([]models.DependencyVuln, error) {
	ret := _m.Called(tx, assetVersionName, assetVersionID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyVulnsByAssetVersion")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID) ([]models.DependencyVuln, error)); ok {
		return rf(tx, assetVersionName, assetVersionID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID) []models.DependencyVuln); ok {
		r0 = rf(tx, assetVersionName, assetVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID) error); ok {
		r1 = rf(tx, assetVersionName, assetVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyVulnsByAssetVersion'
type CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call struct {
	*mock.Call
}

// GetDependencyVulnsByAssetVersion is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetVersionID uuid.UUID
func (_e *CoreDependencyVulnRepository_Expecter) GetDependencyVulnsByAssetVersion(tx interface{}, assetVersionName interface{}, assetVersionID interface{}) *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	return &CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call{Call: _e.mock.On("GetDependencyVulnsByAssetVersion", tx, assetVersionName, assetVersionID)}
}

func (_c *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetVersionID uuid.UUID)) *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call) Return(_a0 []models.DependencyVuln, _a1 error) *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID) ([]models.DependencyVuln, error)) *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyVulnsByAssetVersionPagedAndFlat provides a mock function with given fields: tx, assetVersionName, assetVersionID, pageInfo, search, filter, sort
func (_m *CoreDependencyVulnRepository) GetDependencyVulnsByAssetVersionPagedAndFlat(tx *gorm.DB, assetVersionName string, assetVersionID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], error) {
	ret := _m.Called(tx, assetVersionName, assetVersionID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyVulnsByAssetVersionPagedAndFlat")
	}

	var r0 core.Paged[models.DependencyVuln]
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], error)); ok {
		return rf(tx, assetVersionName, assetVersionID, pageInfo, search, filter, sort)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.DependencyVuln]); ok {
		r0 = rf(tx, assetVersionName, assetVersionID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.DependencyVuln])
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = rf(tx, assetVersionName, assetVersionID, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyVulnsByAssetVersionPagedAndFlat'
type CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call struct {
	*mock.Call
}

// GetDependencyVulnsByAssetVersionPagedAndFlat is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetVersionID uuid.UUID
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *CoreDependencyVulnRepository_Expecter) GetDependencyVulnsByAssetVersionPagedAndFlat(tx interface{}, assetVersionName interface{}, assetVersionID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call {
	return &CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call{Call: _e.mock.On("GetDependencyVulnsByAssetVersionPagedAndFlat", tx, assetVersionName, assetVersionID, pageInfo, search, filter, sort)}
}

func (_c *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetVersionID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].(core.PageInfo), args[4].(string), args[5].([]core.FilterQuery), args[6].([]core.SortQuery))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call) Return(_a0 core.Paged[models.DependencyVuln], _a1 error) *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], error)) *CoreDependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyVulnsByPurl provides a mock function with given fields: tx, purls
func (_m *CoreDependencyVulnRepository) GetDependencyVulnsByPurl(tx *gorm.DB, purls []string) ([]models.DependencyVuln, error) {
	ret := _m.Called(tx, purls)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyVulnsByPurl")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) ([]models.DependencyVuln, error)); ok {
		return rf(tx, purls)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) []models.DependencyVuln); ok {
		r0 = rf(tx, purls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []string) error); ok {
		r1 = rf(tx, purls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDependencyVulnRepository_GetDependencyVulnsByPurl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyVulnsByPurl'
type CoreDependencyVulnRepository_GetDependencyVulnsByPurl_Call struct {
	*mock.Call
}

// GetDependencyVulnsByPurl is a helper method to define mock.On call
//   - tx *gorm.DB
//   - purls []string
func (_e *CoreDependencyVulnRepository_Expecter) GetDependencyVulnsByPurl(tx interface{}, purls interface{}) *CoreDependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	return &CoreDependencyVulnRepository_GetDependencyVulnsByPurl_Call{Call: _e.mock.On("GetDependencyVulnsByPurl", tx, purls)}
}

func (_c *CoreDependencyVulnRepository_GetDependencyVulnsByPurl_Call) Run(run func(tx *gorm.DB, purls []string)) *CoreDependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]string))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDependencyVulnsByPurl_Call) Return(_a0 []models.DependencyVuln, _a1 error) *CoreDependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDependencyVulnRepository_GetDependencyVulnsByPurl_Call) RunAndReturn(run func(*gorm.DB, []string) ([]models.DependencyVuln, error)) *CoreDependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ids
func (_m *CoreDependencyVulnRepository) List(ids []string) ([]models.DependencyVuln, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.DependencyVuln, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.DependencyVuln); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDependencyVulnRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CoreDependencyVulnRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []string
func (_e *CoreDependencyVulnRepository_Expecter) List(ids interface{}) *CoreDependencyVulnRepository_List_Call {
	return &CoreDependencyVulnRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *CoreDependencyVulnRepository_List_Call) Run(run func(ids []string)) *CoreDependencyVulnRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_List_Call) Return(_a0 []models.DependencyVuln, _a1 error) *CoreDependencyVulnRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDependencyVulnRepository_List_Call) RunAndReturn(run func([]string) ([]models.DependencyVuln, error)) *CoreDependencyVulnRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByScanner provides a mock function with given fields: assetVersionName, assetID, scannerID
func (_m *CoreDependencyVulnRepository) ListByScanner(assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.DependencyVuln, error) {
	ret := _m.Called(assetVersionName, assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for ListByScanner")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, string) ([]models.DependencyVuln, error)); ok {
		return rf(assetVersionName, assetID, scannerID)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, string) []models.DependencyVuln); ok {
		r0 = rf(assetVersionName, assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = rf(assetVersionName, assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDependencyVulnRepository_ListByScanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByScanner'
type CoreDependencyVulnRepository_ListByScanner_Call struct {
	*mock.Call
}

// ListByScanner is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scannerID string
func (_e *CoreDependencyVulnRepository_Expecter) ListByScanner(assetVersionName interface{}, assetID interface{}, scannerID interface{}) *CoreDependencyVulnRepository_ListByScanner_Call {
	return &CoreDependencyVulnRepository_ListByScanner_Call{Call: _e.mock.On("ListByScanner", assetVersionName, assetID, scannerID)}
}

func (_c *CoreDependencyVulnRepository_ListByScanner_Call) Run(run func(assetVersionName string, assetID uuid.UUID, scannerID string)) *CoreDependencyVulnRepository_ListByScanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_ListByScanner_Call) Return(_a0 []models.DependencyVuln, _a1 error) *CoreDependencyVulnRepository_ListByScanner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDependencyVulnRepository_ListByScanner_Call) RunAndReturn(run func(string, uuid.UUID, string) ([]models.DependencyVuln, error)) *CoreDependencyVulnRepository_ListByScanner_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *CoreDependencyVulnRepository) Read(id string) (models.DependencyVuln, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.DependencyVuln, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.DependencyVuln); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.DependencyVuln)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDependencyVulnRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type CoreDependencyVulnRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *CoreDependencyVulnRepository_Expecter) Read(id interface{}) *CoreDependencyVulnRepository_Read_Call {
	return &CoreDependencyVulnRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *CoreDependencyVulnRepository_Read_Call) Run(run func(id string)) *CoreDependencyVulnRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_Read_Call) Return(_a0 models.DependencyVuln, _a1 error) *CoreDependencyVulnRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDependencyVulnRepository_Read_Call) RunAndReturn(run func(string) (models.DependencyVuln, error)) *CoreDependencyVulnRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDependencyVulnWithAssetVersionEvents provides a mock function with given fields: id
func (_m *CoreDependencyVulnRepository) ReadDependencyVulnWithAssetVersionEvents(id string) (models.DependencyVuln, []models.VulnEvent, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ReadDependencyVulnWithAssetVersionEvents")
	}

	var r0 models.DependencyVuln
	var r1 []models.VulnEvent
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (models.DependencyVuln, []models.VulnEvent, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.DependencyVuln); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.DependencyVuln)
	}

	if rf, ok := ret.Get(1).(func(string) []models.VulnEvent); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]models.VulnEvent)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CoreDependencyVulnRepository_ReadDependencyVulnWithAssetVersionEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDependencyVulnWithAssetVersionEvents'
type CoreDependencyVulnRepository_ReadDependencyVulnWithAssetVersionEvents_Call struct {
	*mock.Call
}

// ReadDependencyVulnWithAssetVersionEvents is a helper method to define mock.On call
//   - id string
func (_e *CoreDependencyVulnRepository_Expecter) ReadDependencyVulnWithAssetVersionEvents(id interface{}) *CoreDependencyVulnRepository_ReadDependencyVulnWithAssetVersionEvents_Call {
	return &CoreDependencyVulnRepository_ReadDependencyVulnWithAssetVersionEvents_Call{Call: _e.mock.On("ReadDependencyVulnWithAssetVersionEvents", id)}
}

func (_c *CoreDependencyVulnRepository_ReadDependencyVulnWithAssetVersionEvents_Call) Run(run func(id string)) *CoreDependencyVulnRepository_ReadDependencyVulnWithAssetVersionEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_ReadDependencyVulnWithAssetVersionEvents_Call) Return(_a0 models.DependencyVuln, _a1 []models.VulnEvent, _a2 error) *CoreDependencyVulnRepository_ReadDependencyVulnWithAssetVersionEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CoreDependencyVulnRepository_ReadDependencyVulnWithAssetVersionEvents_Call) RunAndReturn(run func(string) (models.DependencyVuln, []models.VulnEvent, error)) *CoreDependencyVulnRepository_ReadDependencyVulnWithAssetVersionEvents_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, t
func (_m *CoreDependencyVulnRepository) Save(tx *gorm.DB, t *models.DependencyVuln) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.DependencyVuln) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreDependencyVulnRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type CoreDependencyVulnRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.DependencyVuln
func (_e *CoreDependencyVulnRepository_Expecter) Save(tx interface{}, t interface{}) *CoreDependencyVulnRepository_Save_Call {
	return &CoreDependencyVulnRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *CoreDependencyVulnRepository_Save_Call) Run(run func(tx *gorm.DB, t *models.DependencyVuln)) *CoreDependencyVulnRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.DependencyVuln))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_Save_Call) Return(_a0 error) *CoreDependencyVulnRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreDependencyVulnRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.DependencyVuln) error) *CoreDependencyVulnRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, ts
func (_m *CoreDependencyVulnRepository) SaveBatch(tx *gorm.DB, ts []models.DependencyVuln) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.DependencyVuln) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreDependencyVulnRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type CoreDependencyVulnRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.DependencyVuln
func (_e *CoreDependencyVulnRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *CoreDependencyVulnRepository_SaveBatch_Call {
	return &CoreDependencyVulnRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *CoreDependencyVulnRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, ts []models.DependencyVuln)) *CoreDependencyVulnRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.DependencyVuln))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_SaveBatch_Call) Return(_a0 error) *CoreDependencyVulnRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreDependencyVulnRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.DependencyVuln) error) *CoreDependencyVulnRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: _a0
func (_m *CoreDependencyVulnRepository) Transaction(_a0 func(*gorm.DB) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreDependencyVulnRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type CoreDependencyVulnRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - _a0 func(*gorm.DB) error
func (_e *CoreDependencyVulnRepository_Expecter) Transaction(_a0 interface{}) *CoreDependencyVulnRepository_Transaction_Call {
	return &CoreDependencyVulnRepository_Transaction_Call{Call: _e.mock.On("Transaction", _a0)}
}

func (_c *CoreDependencyVulnRepository_Transaction_Call) Run(run func(_a0 func(*gorm.DB) error)) *CoreDependencyVulnRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *CoreDependencyVulnRepository_Transaction_Call) Return(_a0 error) *CoreDependencyVulnRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreDependencyVulnRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *CoreDependencyVulnRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreDependencyVulnRepository creates a new instance of CoreDependencyVulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreDependencyVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreDependencyVulnRepository {
	mock := &CoreDependencyVulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
