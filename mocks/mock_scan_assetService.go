// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	normalize "github.com/l3montree-dev/devguard/internal/core/normalize"
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// ScanAssetService is an autogenerated mock type for the assetService type
type ScanAssetService struct {
	mock.Mock
}

type ScanAssetService_Expecter struct {
	mock *mock.Mock
}

func (_m *ScanAssetService) EXPECT() *ScanAssetService_Expecter {
	return &ScanAssetService_Expecter{mock: &_m.Mock}
}

// HandleScanResult provides a mock function with given fields: asset, vulns, scanner, version, scannerID, userID, doRiskManagement
func (_m *ScanAssetService) HandleScanResult(asset models.Asset, vulns []models.VulnInPackage, scanner string, version string, scannerID string, userID string, doRiskManagement bool) (int, int, []models.DependencyVulnerability, error) {
	ret := _m.Called(asset, vulns, scanner, version, scannerID, userID, doRiskManagement)

	if len(ret) == 0 {
		panic("no return value specified for HandleScanResult")
	}

	var r0 int
	var r1 int
	var r2 []models.DependencyVulnerability
	var r3 error
	if rf, ok := ret.Get(0).(func(models.Asset, []models.VulnInPackage, string, string, string, string, bool) (int, int, []models.DependencyVulnerability, error)); ok {
		return rf(asset, vulns, scanner, version, scannerID, userID, doRiskManagement)
	}
	if rf, ok := ret.Get(0).(func(models.Asset, []models.VulnInPackage, string, string, string, string, bool) int); ok {
		r0 = rf(asset, vulns, scanner, version, scannerID, userID, doRiskManagement)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(models.Asset, []models.VulnInPackage, string, string, string, string, bool) int); ok {
		r1 = rf(asset, vulns, scanner, version, scannerID, userID, doRiskManagement)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(models.Asset, []models.VulnInPackage, string, string, string, string, bool) []models.DependencyVulnerability); ok {
		r2 = rf(asset, vulns, scanner, version, scannerID, userID, doRiskManagement)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]models.DependencyVulnerability)
		}
	}

	if rf, ok := ret.Get(3).(func(models.Asset, []models.VulnInPackage, string, string, string, string, bool) error); ok {
		r3 = rf(asset, vulns, scanner, version, scannerID, userID, doRiskManagement)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ScanAssetService_HandleScanResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleScanResult'
type ScanAssetService_HandleScanResult_Call struct {
	*mock.Call
}

// HandleScanResult is a helper method to define mock.On call
//   - asset models.Asset
//   - vulns []models.VulnInPackage
//   - scanner string
//   - version string
//   - scannerID string
//   - userID string
//   - doRiskManagement bool
func (_e *ScanAssetService_Expecter) HandleScanResult(asset interface{}, vulns interface{}, scanner interface{}, version interface{}, scannerID interface{}, userID interface{}, doRiskManagement interface{}) *ScanAssetService_HandleScanResult_Call {
	return &ScanAssetService_HandleScanResult_Call{Call: _e.mock.On("HandleScanResult", asset, vulns, scanner, version, scannerID, userID, doRiskManagement)}
}

func (_c *ScanAssetService_HandleScanResult_Call) Run(run func(asset models.Asset, vulns []models.VulnInPackage, scanner string, version string, scannerID string, userID string, doRiskManagement bool)) *ScanAssetService_HandleScanResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Asset), args[1].([]models.VulnInPackage), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(bool))
	})
	return _c
}

func (_c *ScanAssetService_HandleScanResult_Call) Return(amountOpened int, amountClose int, newState []models.DependencyVulnerability, err error) *ScanAssetService_HandleScanResult_Call {
	_c.Call.Return(amountOpened, amountClose, newState, err)
	return _c
}

func (_c *ScanAssetService_HandleScanResult_Call) RunAndReturn(run func(models.Asset, []models.VulnInPackage, string, string, string, string, bool) (int, int, []models.DependencyVulnerability, error)) *ScanAssetService_HandleScanResult_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSBOM provides a mock function with given fields: asset, scanner, version, sbom
func (_m *ScanAssetService) UpdateSBOM(asset models.Asset, scanner string, version string, sbom normalize.SBOM) error {
	ret := _m.Called(asset, scanner, version, sbom)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSBOM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Asset, string, string, normalize.SBOM) error); ok {
		r0 = rf(asset, scanner, version, sbom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanAssetService_UpdateSBOM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSBOM'
type ScanAssetService_UpdateSBOM_Call struct {
	*mock.Call
}

// UpdateSBOM is a helper method to define mock.On call
//   - asset models.Asset
//   - scanner string
//   - version string
//   - sbom normalize.SBOM
func (_e *ScanAssetService_Expecter) UpdateSBOM(asset interface{}, scanner interface{}, version interface{}, sbom interface{}) *ScanAssetService_UpdateSBOM_Call {
	return &ScanAssetService_UpdateSBOM_Call{Call: _e.mock.On("UpdateSBOM", asset, scanner, version, sbom)}
}

func (_c *ScanAssetService_UpdateSBOM_Call) Run(run func(asset models.Asset, scanner string, version string, sbom normalize.SBOM)) *ScanAssetService_UpdateSBOM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Asset), args[1].(string), args[2].(string), args[3].(normalize.SBOM))
	})
	return _c
}

func (_c *ScanAssetService_UpdateSBOM_Call) Return(_a0 error) *ScanAssetService_UpdateSBOM_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScanAssetService_UpdateSBOM_Call) RunAndReturn(run func(models.Asset, string, string, normalize.SBOM) error) *ScanAssetService_UpdateSBOM_Call {
	_c.Call.Return(run)
	return _c
}

// NewScanAssetService creates a new instance of ScanAssetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScanAssetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScanAssetService {
	mock := &ScanAssetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
