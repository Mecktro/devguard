// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	cwe "github.com/l3montree-dev/flawfix/internal/core/cwe"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// CweRepository is an autogenerated mock type for the Repository type
type CweRepository struct {
	mock.Mock
}

type CweRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CweRepository) EXPECT() *CweRepository_Expecter {
	return &CweRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: tx, t
func (_m *CweRepository) Create(tx *gorm.DB, t *cwe.CVEModel) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *cwe.CVEModel) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CweRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CweRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *cwe.CVEModel
func (_e *CweRepository_Expecter) Create(tx interface{}, t interface{}) *CweRepository_Create_Call {
	return &CweRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *CweRepository_Create_Call) Run(run func(tx *gorm.DB, t *cwe.CVEModel)) *CweRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*cwe.CVEModel))
	})
	return _c
}

func (_c *CweRepository_Create_Call) Return(_a0 error) *CweRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CweRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *cwe.CVEModel) error) *CweRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function with given fields: tx, ts
func (_m *CweRepository) CreateBatch(tx *gorm.DB, ts []cwe.CVEModel) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []cwe.CVEModel) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CweRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type CweRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []cwe.CVEModel
func (_e *CweRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *CweRepository_CreateBatch_Call {
	return &CweRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *CweRepository_CreateBatch_Call) Run(run func(tx *gorm.DB, ts []cwe.CVEModel)) *CweRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]cwe.CVEModel))
	})
	return _c
}

func (_c *CweRepository_CreateBatch_Call) Return(_a0 error) *CweRepository_CreateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CweRepository_CreateBatch_Call) RunAndReturn(run func(*gorm.DB, []cwe.CVEModel) error) *CweRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tx, id
func (_m *CweRepository) Delete(tx *gorm.DB, id string) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CweRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CweRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id string
func (_e *CweRepository_Expecter) Delete(tx interface{}, id interface{}) *CweRepository_Delete_Call {
	return &CweRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *CweRepository_Delete_Call) Run(run func(tx *gorm.DB, id string)) *CweRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *CweRepository_Delete_Call) Return(_a0 error) *CweRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CweRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, string) error) *CweRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: id
func (_m *CweRepository) FindByID(id string) (cwe.CVEModel, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 cwe.CVEModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (cwe.CVEModel, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) cwe.CVEModel); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(cwe.CVEModel)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CweRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type CweRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - id string
func (_e *CweRepository_Expecter) FindByID(id interface{}) *CweRepository_FindByID_Call {
	return &CweRepository_FindByID_Call{Call: _e.mock.On("FindByID", id)}
}

func (_c *CweRepository_FindByID_Call) Run(run func(id string)) *CweRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CweRepository_FindByID_Call) Return(_a0 cwe.CVEModel, _a1 error) *CweRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CweRepository_FindByID_Call) RunAndReturn(run func(string) (cwe.CVEModel, error)) *CweRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: tx
func (_m *CweRepository) GetDB(tx *gorm.DB) *gorm.DB {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// CweRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type CweRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *CweRepository_Expecter) GetDB(tx interface{}) *CweRepository_GetDB_Call {
	return &CweRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *CweRepository_GetDB_Call) Run(run func(tx *gorm.DB)) *CweRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *CweRepository_GetDB_Call) Return(_a0 *gorm.DB) *CweRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CweRepository_GetDB_Call) RunAndReturn(run func(*gorm.DB) *gorm.DB) *CweRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ids
func (_m *CweRepository) List(ids []string) ([]cwe.CVEModel, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []cwe.CVEModel
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]cwe.CVEModel, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []cwe.CVEModel); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cwe.CVEModel)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CweRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CweRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []string
func (_e *CweRepository_Expecter) List(ids interface{}) *CweRepository_List_Call {
	return &CweRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *CweRepository_List_Call) Run(run func(ids []string)) *CweRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *CweRepository_List_Call) Return(_a0 []cwe.CVEModel, _a1 error) *CweRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CweRepository_List_Call) RunAndReturn(run func([]string) ([]cwe.CVEModel, error)) *CweRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *CweRepository) Read(id string) (cwe.CVEModel, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 cwe.CVEModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (cwe.CVEModel, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) cwe.CVEModel); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(cwe.CVEModel)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CweRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type CweRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *CweRepository_Expecter) Read(id interface{}) *CweRepository_Read_Call {
	return &CweRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *CweRepository_Read_Call) Run(run func(id string)) *CweRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CweRepository_Read_Call) Return(_a0 cwe.CVEModel, _a1 error) *CweRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CweRepository_Read_Call) RunAndReturn(run func(string) (cwe.CVEModel, error)) *CweRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, t
func (_m *CweRepository) Save(tx *gorm.DB, t *cwe.CVEModel) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *cwe.CVEModel) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CweRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type CweRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *cwe.CVEModel
func (_e *CweRepository_Expecter) Save(tx interface{}, t interface{}) *CweRepository_Save_Call {
	return &CweRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *CweRepository_Save_Call) Run(run func(tx *gorm.DB, t *cwe.CVEModel)) *CweRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*cwe.CVEModel))
	})
	return _c
}

func (_c *CweRepository_Save_Call) Return(_a0 error) *CweRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CweRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *cwe.CVEModel) error) *CweRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, ts
func (_m *CweRepository) SaveBatch(tx *gorm.DB, ts []cwe.CVEModel) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []cwe.CVEModel) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CweRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type CweRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []cwe.CVEModel
func (_e *CweRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *CweRepository_SaveBatch_Call {
	return &CweRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *CweRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, ts []cwe.CVEModel)) *CweRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]cwe.CVEModel))
	})
	return _c
}

func (_c *CweRepository_SaveBatch_Call) Return(_a0 error) *CweRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CweRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []cwe.CVEModel) error) *CweRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: _a0
func (_m *CweRepository) Transaction(_a0 func(*gorm.DB) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CweRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type CweRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - _a0 func(*gorm.DB) error
func (_e *CweRepository_Expecter) Transaction(_a0 interface{}) *CweRepository_Transaction_Call {
	return &CweRepository_Transaction_Call{Call: _e.mock.On("Transaction", _a0)}
}

func (_c *CweRepository_Transaction_Call) Run(run func(_a0 func(*gorm.DB) error)) *CweRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *CweRepository_Transaction_Call) Return(_a0 error) *CweRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CweRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *CweRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: tx, t
func (_m *CweRepository) Update(tx *gorm.DB, t *cwe.CVEModel) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *cwe.CVEModel) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CweRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CweRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *cwe.CVEModel
func (_e *CweRepository_Expecter) Update(tx interface{}, t interface{}) *CweRepository_Update_Call {
	return &CweRepository_Update_Call{Call: _e.mock.On("Update", tx, t)}
}

func (_c *CweRepository_Update_Call) Run(run func(tx *gorm.DB, t *cwe.CVEModel)) *CweRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*cwe.CVEModel))
	})
	return _c
}

func (_c *CweRepository_Update_Call) Return(_a0 error) *CweRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CweRepository_Update_Call) RunAndReturn(run func(*gorm.DB, *cwe.CVEModel) error) *CweRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBatch provides a mock function with given fields: tx, ts
func (_m *CweRepository) UpdateBatch(tx *gorm.DB, ts []cwe.CVEModel) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []cwe.CVEModel) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CweRepository_UpdateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBatch'
type CweRepository_UpdateBatch_Call struct {
	*mock.Call
}

// UpdateBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []cwe.CVEModel
func (_e *CweRepository_Expecter) UpdateBatch(tx interface{}, ts interface{}) *CweRepository_UpdateBatch_Call {
	return &CweRepository_UpdateBatch_Call{Call: _e.mock.On("UpdateBatch", tx, ts)}
}

func (_c *CweRepository_UpdateBatch_Call) Run(run func(tx *gorm.DB, ts []cwe.CVEModel)) *CweRepository_UpdateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]cwe.CVEModel))
	})
	return _c
}

func (_c *CweRepository_UpdateBatch_Call) Return(_a0 error) *CweRepository_UpdateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CweRepository_UpdateBatch_Call) RunAndReturn(run func(*gorm.DB, []cwe.CVEModel) error) *CweRepository_UpdateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewCweRepository creates a new instance of CweRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCweRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CweRepository {
	mock := &CweRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
