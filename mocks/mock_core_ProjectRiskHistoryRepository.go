// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	time "time"

	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CoreProjectRiskHistoryRepository is an autogenerated mock type for the ProjectRiskHistoryRepository type
type CoreProjectRiskHistoryRepository struct {
	mock.Mock
}

type CoreProjectRiskHistoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreProjectRiskHistoryRepository) EXPECT() *CoreProjectRiskHistoryRepository_Expecter {
	return &CoreProjectRiskHistoryRepository_Expecter{mock: &_m.Mock}
}

// GetRiskHistory provides a mock function with given fields: projectId, start, end
func (_m *CoreProjectRiskHistoryRepository) GetRiskHistory(projectId uuid.UUID, start time.Time, end time.Time) ([]models.ProjectRiskHistory, error) {
	ret := _m.Called(projectId, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetRiskHistory")
	}

	var r0 []models.ProjectRiskHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) ([]models.ProjectRiskHistory, error)); ok {
		return rf(projectId, start, end)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) []models.ProjectRiskHistory); ok {
		r0 = rf(projectId, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProjectRiskHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, time.Time, time.Time) error); ok {
		r1 = rf(projectId, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreProjectRiskHistoryRepository_GetRiskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRiskHistory'
type CoreProjectRiskHistoryRepository_GetRiskHistory_Call struct {
	*mock.Call
}

// GetRiskHistory is a helper method to define mock.On call
//   - projectId uuid.UUID
//   - start time.Time
//   - end time.Time
func (_e *CoreProjectRiskHistoryRepository_Expecter) GetRiskHistory(projectId interface{}, start interface{}, end interface{}) *CoreProjectRiskHistoryRepository_GetRiskHistory_Call {
	return &CoreProjectRiskHistoryRepository_GetRiskHistory_Call{Call: _e.mock.On("GetRiskHistory", projectId, start, end)}
}

func (_c *CoreProjectRiskHistoryRepository_GetRiskHistory_Call) Run(run func(projectId uuid.UUID, start time.Time, end time.Time)) *CoreProjectRiskHistoryRepository_GetRiskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *CoreProjectRiskHistoryRepository_GetRiskHistory_Call) Return(_a0 []models.ProjectRiskHistory, _a1 error) *CoreProjectRiskHistoryRepository_GetRiskHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreProjectRiskHistoryRepository_GetRiskHistory_Call) RunAndReturn(run func(uuid.UUID, time.Time, time.Time) ([]models.ProjectRiskHistory, error)) *CoreProjectRiskHistoryRepository_GetRiskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRiskAggregation provides a mock function with given fields: projectRisk
func (_m *CoreProjectRiskHistoryRepository) UpdateRiskAggregation(projectRisk *models.ProjectRiskHistory) error {
	ret := _m.Called(projectRisk)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRiskAggregation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ProjectRiskHistory) error); ok {
		r0 = rf(projectRisk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreProjectRiskHistoryRepository_UpdateRiskAggregation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRiskAggregation'
type CoreProjectRiskHistoryRepository_UpdateRiskAggregation_Call struct {
	*mock.Call
}

// UpdateRiskAggregation is a helper method to define mock.On call
//   - projectRisk *models.ProjectRiskHistory
func (_e *CoreProjectRiskHistoryRepository_Expecter) UpdateRiskAggregation(projectRisk interface{}) *CoreProjectRiskHistoryRepository_UpdateRiskAggregation_Call {
	return &CoreProjectRiskHistoryRepository_UpdateRiskAggregation_Call{Call: _e.mock.On("UpdateRiskAggregation", projectRisk)}
}

func (_c *CoreProjectRiskHistoryRepository_UpdateRiskAggregation_Call) Run(run func(projectRisk *models.ProjectRiskHistory)) *CoreProjectRiskHistoryRepository_UpdateRiskAggregation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.ProjectRiskHistory))
	})
	return _c
}

func (_c *CoreProjectRiskHistoryRepository_UpdateRiskAggregation_Call) Return(_a0 error) *CoreProjectRiskHistoryRepository_UpdateRiskAggregation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreProjectRiskHistoryRepository_UpdateRiskAggregation_Call) RunAndReturn(run func(*models.ProjectRiskHistory) error) *CoreProjectRiskHistoryRepository_UpdateRiskAggregation_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreProjectRiskHistoryRepository creates a new instance of CoreProjectRiskHistoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreProjectRiskHistoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreProjectRiskHistoryRepository {
	mock := &CoreProjectRiskHistoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
