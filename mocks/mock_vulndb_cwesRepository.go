// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	database "github.com/l3montree-dev/devguard/internal/database"
	mock "github.com/stretchr/testify/mock"

	models "github.com/l3montree-dev/devguard/internal/database/models"
)

// VulndbCwesRepository is an autogenerated mock type for the cwesRepository type
type VulndbCwesRepository struct {
	mock.Mock
}

type VulndbCwesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *VulndbCwesRepository) EXPECT() *VulndbCwesRepository_Expecter {
	return &VulndbCwesRepository_Expecter{mock: &_m.Mock}
}

// GetAllCWEsID provides a mock function with given fields:
func (_m *VulndbCwesRepository) GetAllCWEsID() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCWEsID")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VulndbCwesRepository_GetAllCWEsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCWEsID'
type VulndbCwesRepository_GetAllCWEsID_Call struct {
	*mock.Call
}

// GetAllCWEsID is a helper method to define mock.On call
func (_e *VulndbCwesRepository_Expecter) GetAllCWEsID() *VulndbCwesRepository_GetAllCWEsID_Call {
	return &VulndbCwesRepository_GetAllCWEsID_Call{Call: _e.mock.On("GetAllCWEsID")}
}

func (_c *VulndbCwesRepository_GetAllCWEsID_Call) Run(run func()) *VulndbCwesRepository_GetAllCWEsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VulndbCwesRepository_GetAllCWEsID_Call) Return(_a0 []string, _a1 error) *VulndbCwesRepository_GetAllCWEsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VulndbCwesRepository_GetAllCWEsID_Call) RunAndReturn(run func() ([]string, error)) *VulndbCwesRepository_GetAllCWEsID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, cwes
func (_m *VulndbCwesRepository) SaveBatch(tx database.DB, cwes []models.CWE) error {
	ret := _m.Called(tx, cwes)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(database.DB, []models.CWE) error); ok {
		r0 = rf(tx, cwes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbCwesRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type VulndbCwesRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx database.DB
//   - cwes []models.CWE
func (_e *VulndbCwesRepository_Expecter) SaveBatch(tx interface{}, cwes interface{}) *VulndbCwesRepository_SaveBatch_Call {
	return &VulndbCwesRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, cwes)}
}

func (_c *VulndbCwesRepository_SaveBatch_Call) Run(run func(tx database.DB, cwes []models.CWE)) *VulndbCwesRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(database.DB), args[1].([]models.CWE))
	})
	return _c
}

func (_c *VulndbCwesRepository_SaveBatch_Call) Return(_a0 error) *VulndbCwesRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCwesRepository_SaveBatch_Call) RunAndReturn(run func(database.DB, []models.CWE) error) *VulndbCwesRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewVulndbCwesRepository creates a new instance of VulndbCwesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVulndbCwesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VulndbCwesRepository {
	mock := &VulndbCwesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
