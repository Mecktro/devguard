// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	gitlab "gitlab.com/gitlab-org/api/client-go"

	mock "github.com/stretchr/testify/mock"
)

// IntegrationsGitlabClientFacade is an autogenerated mock type for the gitlabClientFacade type
type IntegrationsGitlabClientFacade struct {
	mock.Mock
}

type IntegrationsGitlabClientFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *IntegrationsGitlabClientFacade) EXPECT() *IntegrationsGitlabClientFacade_Expecter {
	return &IntegrationsGitlabClientFacade_Expecter{mock: &_m.Mock}
}

// AddProjectHook provides a mock function with given fields: ctx, projectId, opt
func (_m *IntegrationsGitlabClientFacade) AddProjectHook(ctx context.Context, projectId int, opt *gitlab.AddProjectHookOptions) (*gitlab.ProjectHook, *gitlab.Response, error) {
	ret := _m.Called(ctx, projectId, opt)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectHook")
	}

	var r0 *gitlab.ProjectHook
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *gitlab.AddProjectHookOptions) (*gitlab.ProjectHook, *gitlab.Response, error)); ok {
		return rf(ctx, projectId, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *gitlab.AddProjectHookOptions) *gitlab.ProjectHook); ok {
		r0 = rf(ctx, projectId, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectHook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *gitlab.AddProjectHookOptions) *gitlab.Response); ok {
		r1 = rf(ctx, projectId, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, *gitlab.AddProjectHookOptions) error); ok {
		r2 = rf(ctx, projectId, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IntegrationsGitlabClientFacade_AddProjectHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectHook'
type IntegrationsGitlabClientFacade_AddProjectHook_Call struct {
	*mock.Call
}

// AddProjectHook is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId int
//   - opt *gitlab.AddProjectHookOptions
func (_e *IntegrationsGitlabClientFacade_Expecter) AddProjectHook(ctx interface{}, projectId interface{}, opt interface{}) *IntegrationsGitlabClientFacade_AddProjectHook_Call {
	return &IntegrationsGitlabClientFacade_AddProjectHook_Call{Call: _e.mock.On("AddProjectHook", ctx, projectId, opt)}
}

func (_c *IntegrationsGitlabClientFacade_AddProjectHook_Call) Run(run func(ctx context.Context, projectId int, opt *gitlab.AddProjectHookOptions)) *IntegrationsGitlabClientFacade_AddProjectHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*gitlab.AddProjectHookOptions))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_AddProjectHook_Call) Return(_a0 *gitlab.ProjectHook, _a1 *gitlab.Response, _a2 error) *IntegrationsGitlabClientFacade_AddProjectHook_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_AddProjectHook_Call) RunAndReturn(run func(context.Context, int, *gitlab.AddProjectHookOptions) (*gitlab.ProjectHook, *gitlab.Response, error)) *IntegrationsGitlabClientFacade_AddProjectHook_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssue provides a mock function with given fields: ctx, pid, opt
func (_m *IntegrationsGitlabClientFacade) CreateIssue(ctx context.Context, pid int, opt *gitlab.CreateIssueOptions) (*gitlab.Issue, *gitlab.Response, error) {
	ret := _m.Called(ctx, pid, opt)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssue")
	}

	var r0 *gitlab.Issue
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *gitlab.CreateIssueOptions) (*gitlab.Issue, *gitlab.Response, error)); ok {
		return rf(ctx, pid, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *gitlab.CreateIssueOptions) *gitlab.Issue); ok {
		r0 = rf(ctx, pid, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *gitlab.CreateIssueOptions) *gitlab.Response); ok {
		r1 = rf(ctx, pid, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, *gitlab.CreateIssueOptions) error); ok {
		r2 = rf(ctx, pid, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IntegrationsGitlabClientFacade_CreateIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssue'
type IntegrationsGitlabClientFacade_CreateIssue_Call struct {
	*mock.Call
}

// CreateIssue is a helper method to define mock.On call
//   - ctx context.Context
//   - pid int
//   - opt *gitlab.CreateIssueOptions
func (_e *IntegrationsGitlabClientFacade_Expecter) CreateIssue(ctx interface{}, pid interface{}, opt interface{}) *IntegrationsGitlabClientFacade_CreateIssue_Call {
	return &IntegrationsGitlabClientFacade_CreateIssue_Call{Call: _e.mock.On("CreateIssue", ctx, pid, opt)}
}

func (_c *IntegrationsGitlabClientFacade_CreateIssue_Call) Run(run func(ctx context.Context, pid int, opt *gitlab.CreateIssueOptions)) *IntegrationsGitlabClientFacade_CreateIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*gitlab.CreateIssueOptions))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_CreateIssue_Call) Return(_a0 *gitlab.Issue, _a1 *gitlab.Response, _a2 error) *IntegrationsGitlabClientFacade_CreateIssue_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_CreateIssue_Call) RunAndReturn(run func(context.Context, int, *gitlab.CreateIssueOptions) (*gitlab.Issue, *gitlab.Response, error)) *IntegrationsGitlabClientFacade_CreateIssue_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueComment provides a mock function with given fields: ctx, pid, issue, opt
func (_m *IntegrationsGitlabClientFacade) CreateIssueComment(ctx context.Context, pid int, issue int, opt *gitlab.CreateIssueNoteOptions) (*gitlab.Note, *gitlab.Response, error) {
	ret := _m.Called(ctx, pid, issue, opt)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueComment")
	}

	var r0 *gitlab.Note
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *gitlab.CreateIssueNoteOptions) (*gitlab.Note, *gitlab.Response, error)); ok {
		return rf(ctx, pid, issue, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *gitlab.CreateIssueNoteOptions) *gitlab.Note); ok {
		r0 = rf(ctx, pid, issue, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *gitlab.CreateIssueNoteOptions) *gitlab.Response); ok {
		r1 = rf(ctx, pid, issue, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, *gitlab.CreateIssueNoteOptions) error); ok {
		r2 = rf(ctx, pid, issue, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IntegrationsGitlabClientFacade_CreateIssueComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueComment'
type IntegrationsGitlabClientFacade_CreateIssueComment_Call struct {
	*mock.Call
}

// CreateIssueComment is a helper method to define mock.On call
//   - ctx context.Context
//   - pid int
//   - issue int
//   - opt *gitlab.CreateIssueNoteOptions
func (_e *IntegrationsGitlabClientFacade_Expecter) CreateIssueComment(ctx interface{}, pid interface{}, issue interface{}, opt interface{}) *IntegrationsGitlabClientFacade_CreateIssueComment_Call {
	return &IntegrationsGitlabClientFacade_CreateIssueComment_Call{Call: _e.mock.On("CreateIssueComment", ctx, pid, issue, opt)}
}

func (_c *IntegrationsGitlabClientFacade_CreateIssueComment_Call) Run(run func(ctx context.Context, pid int, issue int, opt *gitlab.CreateIssueNoteOptions)) *IntegrationsGitlabClientFacade_CreateIssueComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*gitlab.CreateIssueNoteOptions))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_CreateIssueComment_Call) Return(_a0 *gitlab.Note, _a1 *gitlab.Response, _a2 error) *IntegrationsGitlabClientFacade_CreateIssueComment_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_CreateIssueComment_Call) RunAndReturn(run func(context.Context, int, int, *gitlab.CreateIssueNoteOptions) (*gitlab.Note, *gitlab.Response, error)) *IntegrationsGitlabClientFacade_CreateIssueComment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMergeRequest provides a mock function with given fields: ctx, project, opt
func (_m *IntegrationsGitlabClientFacade) CreateMergeRequest(ctx context.Context, project string, opt *gitlab.CreateMergeRequestOptions) (*gitlab.MergeRequest, *gitlab.Response, error) {
	ret := _m.Called(ctx, project, opt)

	if len(ret) == 0 {
		panic("no return value specified for CreateMergeRequest")
	}

	var r0 *gitlab.MergeRequest
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *gitlab.CreateMergeRequestOptions) (*gitlab.MergeRequest, *gitlab.Response, error)); ok {
		return rf(ctx, project, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *gitlab.CreateMergeRequestOptions) *gitlab.MergeRequest); ok {
		r0 = rf(ctx, project, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *gitlab.CreateMergeRequestOptions) *gitlab.Response); ok {
		r1 = rf(ctx, project, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *gitlab.CreateMergeRequestOptions) error); ok {
		r2 = rf(ctx, project, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IntegrationsGitlabClientFacade_CreateMergeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMergeRequest'
type IntegrationsGitlabClientFacade_CreateMergeRequest_Call struct {
	*mock.Call
}

// CreateMergeRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - opt *gitlab.CreateMergeRequestOptions
func (_e *IntegrationsGitlabClientFacade_Expecter) CreateMergeRequest(ctx interface{}, project interface{}, opt interface{}) *IntegrationsGitlabClientFacade_CreateMergeRequest_Call {
	return &IntegrationsGitlabClientFacade_CreateMergeRequest_Call{Call: _e.mock.On("CreateMergeRequest", ctx, project, opt)}
}

func (_c *IntegrationsGitlabClientFacade_CreateMergeRequest_Call) Run(run func(ctx context.Context, project string, opt *gitlab.CreateMergeRequestOptions)) *IntegrationsGitlabClientFacade_CreateMergeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*gitlab.CreateMergeRequestOptions))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_CreateMergeRequest_Call) Return(_a0 *gitlab.MergeRequest, _a1 *gitlab.Response, _a2 error) *IntegrationsGitlabClientFacade_CreateMergeRequest_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_CreateMergeRequest_Call) RunAndReturn(run func(context.Context, string, *gitlab.CreateMergeRequestOptions) (*gitlab.MergeRequest, *gitlab.Response, error)) *IntegrationsGitlabClientFacade_CreateMergeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVariable provides a mock function with given fields: ctx, projectId, opt
func (_m *IntegrationsGitlabClientFacade) CreateVariable(ctx context.Context, projectId int, opt *gitlab.CreateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error) {
	ret := _m.Called(ctx, projectId, opt)

	if len(ret) == 0 {
		panic("no return value specified for CreateVariable")
	}

	var r0 *gitlab.ProjectVariable
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *gitlab.CreateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error)); ok {
		return rf(ctx, projectId, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *gitlab.CreateProjectVariableOptions) *gitlab.ProjectVariable); ok {
		r0 = rf(ctx, projectId, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectVariable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *gitlab.CreateProjectVariableOptions) *gitlab.Response); ok {
		r1 = rf(ctx, projectId, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, *gitlab.CreateProjectVariableOptions) error); ok {
		r2 = rf(ctx, projectId, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IntegrationsGitlabClientFacade_CreateVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVariable'
type IntegrationsGitlabClientFacade_CreateVariable_Call struct {
	*mock.Call
}

// CreateVariable is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId int
//   - opt *gitlab.CreateProjectVariableOptions
func (_e *IntegrationsGitlabClientFacade_Expecter) CreateVariable(ctx interface{}, projectId interface{}, opt interface{}) *IntegrationsGitlabClientFacade_CreateVariable_Call {
	return &IntegrationsGitlabClientFacade_CreateVariable_Call{Call: _e.mock.On("CreateVariable", ctx, projectId, opt)}
}

func (_c *IntegrationsGitlabClientFacade_CreateVariable_Call) Run(run func(ctx context.Context, projectId int, opt *gitlab.CreateProjectVariableOptions)) *IntegrationsGitlabClientFacade_CreateVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*gitlab.CreateProjectVariableOptions))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_CreateVariable_Call) Return(_a0 *gitlab.ProjectVariable, _a1 *gitlab.Response, _a2 error) *IntegrationsGitlabClientFacade_CreateVariable_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_CreateVariable_Call) RunAndReturn(run func(context.Context, int, *gitlab.CreateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error)) *IntegrationsGitlabClientFacade_CreateVariable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectHook provides a mock function with given fields: ctx, projectId, hookId
func (_m *IntegrationsGitlabClientFacade) DeleteProjectHook(ctx context.Context, projectId int, hookId int) (*gitlab.Response, error) {
	ret := _m.Called(ctx, projectId, hookId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectHook")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*gitlab.Response, error)); ok {
		return rf(ctx, projectId, hookId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *gitlab.Response); ok {
		r0 = rf(ctx, projectId, hookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, projectId, hookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntegrationsGitlabClientFacade_DeleteProjectHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectHook'
type IntegrationsGitlabClientFacade_DeleteProjectHook_Call struct {
	*mock.Call
}

// DeleteProjectHook is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId int
//   - hookId int
func (_e *IntegrationsGitlabClientFacade_Expecter) DeleteProjectHook(ctx interface{}, projectId interface{}, hookId interface{}) *IntegrationsGitlabClientFacade_DeleteProjectHook_Call {
	return &IntegrationsGitlabClientFacade_DeleteProjectHook_Call{Call: _e.mock.On("DeleteProjectHook", ctx, projectId, hookId)}
}

func (_c *IntegrationsGitlabClientFacade_DeleteProjectHook_Call) Run(run func(ctx context.Context, projectId int, hookId int)) *IntegrationsGitlabClientFacade_DeleteProjectHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_DeleteProjectHook_Call) Return(_a0 *gitlab.Response, _a1 error) *IntegrationsGitlabClientFacade_DeleteProjectHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_DeleteProjectHook_Call) RunAndReturn(run func(context.Context, int, int) (*gitlab.Response, error)) *IntegrationsGitlabClientFacade_DeleteProjectHook_Call {
	_c.Call.Return(run)
	return _c
}

// EditIssue provides a mock function with given fields: ctx, pid, issue, opt
func (_m *IntegrationsGitlabClientFacade) EditIssue(ctx context.Context, pid int, issue int, opt *gitlab.UpdateIssueOptions) (*gitlab.Issue, *gitlab.Response, error) {
	ret := _m.Called(ctx, pid, issue, opt)

	if len(ret) == 0 {
		panic("no return value specified for EditIssue")
	}

	var r0 *gitlab.Issue
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *gitlab.UpdateIssueOptions) (*gitlab.Issue, *gitlab.Response, error)); ok {
		return rf(ctx, pid, issue, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *gitlab.UpdateIssueOptions) *gitlab.Issue); ok {
		r0 = rf(ctx, pid, issue, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *gitlab.UpdateIssueOptions) *gitlab.Response); ok {
		r1 = rf(ctx, pid, issue, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, *gitlab.UpdateIssueOptions) error); ok {
		r2 = rf(ctx, pid, issue, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IntegrationsGitlabClientFacade_EditIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditIssue'
type IntegrationsGitlabClientFacade_EditIssue_Call struct {
	*mock.Call
}

// EditIssue is a helper method to define mock.On call
//   - ctx context.Context
//   - pid int
//   - issue int
//   - opt *gitlab.UpdateIssueOptions
func (_e *IntegrationsGitlabClientFacade_Expecter) EditIssue(ctx interface{}, pid interface{}, issue interface{}, opt interface{}) *IntegrationsGitlabClientFacade_EditIssue_Call {
	return &IntegrationsGitlabClientFacade_EditIssue_Call{Call: _e.mock.On("EditIssue", ctx, pid, issue, opt)}
}

func (_c *IntegrationsGitlabClientFacade_EditIssue_Call) Run(run func(ctx context.Context, pid int, issue int, opt *gitlab.UpdateIssueOptions)) *IntegrationsGitlabClientFacade_EditIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*gitlab.UpdateIssueOptions))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_EditIssue_Call) Return(_a0 *gitlab.Issue, _a1 *gitlab.Response, _a2 error) *IntegrationsGitlabClientFacade_EditIssue_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_EditIssue_Call) RunAndReturn(run func(context.Context, int, int, *gitlab.UpdateIssueOptions) (*gitlab.Issue, *gitlab.Response, error)) *IntegrationsGitlabClientFacade_EditIssue_Call {
	_c.Call.Return(run)
	return _c
}

// EditIssueLabel provides a mock function with given fields: ctx, pid, issue, labels
func (_m *IntegrationsGitlabClientFacade) EditIssueLabel(ctx context.Context, pid int, issue int, labels []*gitlab.CreateLabelOptions) (*gitlab.Response, error) {
	ret := _m.Called(ctx, pid, issue, labels)

	if len(ret) == 0 {
		panic("no return value specified for EditIssueLabel")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []*gitlab.CreateLabelOptions) (*gitlab.Response, error)); ok {
		return rf(ctx, pid, issue, labels)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []*gitlab.CreateLabelOptions) *gitlab.Response); ok {
		r0 = rf(ctx, pid, issue, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, []*gitlab.CreateLabelOptions) error); ok {
		r1 = rf(ctx, pid, issue, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntegrationsGitlabClientFacade_EditIssueLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditIssueLabel'
type IntegrationsGitlabClientFacade_EditIssueLabel_Call struct {
	*mock.Call
}

// EditIssueLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - pid int
//   - issue int
//   - labels []*gitlab.CreateLabelOptions
func (_e *IntegrationsGitlabClientFacade_Expecter) EditIssueLabel(ctx interface{}, pid interface{}, issue interface{}, labels interface{}) *IntegrationsGitlabClientFacade_EditIssueLabel_Call {
	return &IntegrationsGitlabClientFacade_EditIssueLabel_Call{Call: _e.mock.On("EditIssueLabel", ctx, pid, issue, labels)}
}

func (_c *IntegrationsGitlabClientFacade_EditIssueLabel_Call) Run(run func(ctx context.Context, pid int, issue int, labels []*gitlab.CreateLabelOptions)) *IntegrationsGitlabClientFacade_EditIssueLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].([]*gitlab.CreateLabelOptions))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_EditIssueLabel_Call) Return(_a0 *gitlab.Response, _a1 error) *IntegrationsGitlabClientFacade_EditIssueLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_EditIssueLabel_Call) RunAndReturn(run func(context.Context, int, int, []*gitlab.CreateLabelOptions) (*gitlab.Response, error)) *IntegrationsGitlabClientFacade_EditIssueLabel_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: ctx, projectId
func (_m *IntegrationsGitlabClientFacade) GetProject(ctx context.Context, projectId int) (*gitlab.Project, *gitlab.Response, error) {
	ret := _m.Called(ctx, projectId)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *gitlab.Project
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*gitlab.Project, *gitlab.Response, error)); ok {
		return rf(ctx, projectId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *gitlab.Project); ok {
		r0 = rf(ctx, projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) *gitlab.Response); ok {
		r1 = rf(ctx, projectId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, projectId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IntegrationsGitlabClientFacade_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type IntegrationsGitlabClientFacade_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId int
func (_e *IntegrationsGitlabClientFacade_Expecter) GetProject(ctx interface{}, projectId interface{}) *IntegrationsGitlabClientFacade_GetProject_Call {
	return &IntegrationsGitlabClientFacade_GetProject_Call{Call: _e.mock.On("GetProject", ctx, projectId)}
}

func (_c *IntegrationsGitlabClientFacade_GetProject_Call) Run(run func(ctx context.Context, projectId int)) *IntegrationsGitlabClientFacade_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_GetProject_Call) Return(_a0 *gitlab.Project, _a1 *gitlab.Response, _a2 error) *IntegrationsGitlabClientFacade_GetProject_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_GetProject_Call) RunAndReturn(run func(context.Context, int) (*gitlab.Project, *gitlab.Response, error)) *IntegrationsGitlabClientFacade_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectHooks provides a mock function with given fields: ctx, projectId, options
func (_m *IntegrationsGitlabClientFacade) ListProjectHooks(ctx context.Context, projectId int, options *gitlab.ListProjectHooksOptions) ([]*gitlab.ProjectHook, *gitlab.Response, error) {
	ret := _m.Called(ctx, projectId, options)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectHooks")
	}

	var r0 []*gitlab.ProjectHook
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *gitlab.ListProjectHooksOptions) ([]*gitlab.ProjectHook, *gitlab.Response, error)); ok {
		return rf(ctx, projectId, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *gitlab.ListProjectHooksOptions) []*gitlab.ProjectHook); ok {
		r0 = rf(ctx, projectId, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectHook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *gitlab.ListProjectHooksOptions) *gitlab.Response); ok {
		r1 = rf(ctx, projectId, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, *gitlab.ListProjectHooksOptions) error); ok {
		r2 = rf(ctx, projectId, options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IntegrationsGitlabClientFacade_ListProjectHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectHooks'
type IntegrationsGitlabClientFacade_ListProjectHooks_Call struct {
	*mock.Call
}

// ListProjectHooks is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId int
//   - options *gitlab.ListProjectHooksOptions
func (_e *IntegrationsGitlabClientFacade_Expecter) ListProjectHooks(ctx interface{}, projectId interface{}, options interface{}) *IntegrationsGitlabClientFacade_ListProjectHooks_Call {
	return &IntegrationsGitlabClientFacade_ListProjectHooks_Call{Call: _e.mock.On("ListProjectHooks", ctx, projectId, options)}
}

func (_c *IntegrationsGitlabClientFacade_ListProjectHooks_Call) Run(run func(ctx context.Context, projectId int, options *gitlab.ListProjectHooksOptions)) *IntegrationsGitlabClientFacade_ListProjectHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*gitlab.ListProjectHooksOptions))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_ListProjectHooks_Call) Return(_a0 []*gitlab.ProjectHook, _a1 *gitlab.Response, _a2 error) *IntegrationsGitlabClientFacade_ListProjectHooks_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_ListProjectHooks_Call) RunAndReturn(run func(context.Context, int, *gitlab.ListProjectHooksOptions) ([]*gitlab.ProjectHook, *gitlab.Response, error)) *IntegrationsGitlabClientFacade_ListProjectHooks_Call {
	_c.Call.Return(run)
	return _c
}

// ListVariables provides a mock function with given fields: ctx, projectId, options
func (_m *IntegrationsGitlabClientFacade) ListVariables(ctx context.Context, projectId int, options *gitlab.ListProjectVariablesOptions) ([]*gitlab.ProjectVariable, *gitlab.Response, error) {
	ret := _m.Called(ctx, projectId, options)

	if len(ret) == 0 {
		panic("no return value specified for ListVariables")
	}

	var r0 []*gitlab.ProjectVariable
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *gitlab.ListProjectVariablesOptions) ([]*gitlab.ProjectVariable, *gitlab.Response, error)); ok {
		return rf(ctx, projectId, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *gitlab.ListProjectVariablesOptions) []*gitlab.ProjectVariable); ok {
		r0 = rf(ctx, projectId, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectVariable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *gitlab.ListProjectVariablesOptions) *gitlab.Response); ok {
		r1 = rf(ctx, projectId, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, *gitlab.ListProjectVariablesOptions) error); ok {
		r2 = rf(ctx, projectId, options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IntegrationsGitlabClientFacade_ListVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVariables'
type IntegrationsGitlabClientFacade_ListVariables_Call struct {
	*mock.Call
}

// ListVariables is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId int
//   - options *gitlab.ListProjectVariablesOptions
func (_e *IntegrationsGitlabClientFacade_Expecter) ListVariables(ctx interface{}, projectId interface{}, options interface{}) *IntegrationsGitlabClientFacade_ListVariables_Call {
	return &IntegrationsGitlabClientFacade_ListVariables_Call{Call: _e.mock.On("ListVariables", ctx, projectId, options)}
}

func (_c *IntegrationsGitlabClientFacade_ListVariables_Call) Run(run func(ctx context.Context, projectId int, options *gitlab.ListProjectVariablesOptions)) *IntegrationsGitlabClientFacade_ListVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*gitlab.ListProjectVariablesOptions))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_ListVariables_Call) Return(_a0 []*gitlab.ProjectVariable, _a1 *gitlab.Response, _a2 error) *IntegrationsGitlabClientFacade_ListVariables_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_ListVariables_Call) RunAndReturn(run func(context.Context, int, *gitlab.ListProjectVariablesOptions) ([]*gitlab.ProjectVariable, *gitlab.Response, error)) *IntegrationsGitlabClientFacade_ListVariables_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveVariable provides a mock function with given fields: ctx, projectId, key
func (_m *IntegrationsGitlabClientFacade) RemoveVariable(ctx context.Context, projectId int, key string) (*gitlab.Response, error) {
	ret := _m.Called(ctx, projectId, key)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVariable")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (*gitlab.Response, error)); ok {
		return rf(ctx, projectId, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *gitlab.Response); ok {
		r0 = rf(ctx, projectId, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, projectId, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntegrationsGitlabClientFacade_RemoveVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveVariable'
type IntegrationsGitlabClientFacade_RemoveVariable_Call struct {
	*mock.Call
}

// RemoveVariable is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId int
//   - key string
func (_e *IntegrationsGitlabClientFacade_Expecter) RemoveVariable(ctx interface{}, projectId interface{}, key interface{}) *IntegrationsGitlabClientFacade_RemoveVariable_Call {
	return &IntegrationsGitlabClientFacade_RemoveVariable_Call{Call: _e.mock.On("RemoveVariable", ctx, projectId, key)}
}

func (_c *IntegrationsGitlabClientFacade_RemoveVariable_Call) Run(run func(ctx context.Context, projectId int, key string)) *IntegrationsGitlabClientFacade_RemoveVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_RemoveVariable_Call) Return(_a0 *gitlab.Response, _a1 error) *IntegrationsGitlabClientFacade_RemoveVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_RemoveVariable_Call) RunAndReturn(run func(context.Context, int, string) (*gitlab.Response, error)) *IntegrationsGitlabClientFacade_RemoveVariable_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVariable provides a mock function with given fields: ctx, projectId, key, opt
func (_m *IntegrationsGitlabClientFacade) UpdateVariable(ctx context.Context, projectId int, key string, opt *gitlab.UpdateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error) {
	ret := _m.Called(ctx, projectId, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVariable")
	}

	var r0 *gitlab.ProjectVariable
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *gitlab.UpdateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error)); ok {
		return rf(ctx, projectId, key, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *gitlab.UpdateProjectVariableOptions) *gitlab.ProjectVariable); ok {
		r0 = rf(ctx, projectId, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectVariable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *gitlab.UpdateProjectVariableOptions) *gitlab.Response); ok {
		r1 = rf(ctx, projectId, key, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, string, *gitlab.UpdateProjectVariableOptions) error); ok {
		r2 = rf(ctx, projectId, key, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IntegrationsGitlabClientFacade_UpdateVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVariable'
type IntegrationsGitlabClientFacade_UpdateVariable_Call struct {
	*mock.Call
}

// UpdateVariable is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId int
//   - key string
//   - opt *gitlab.UpdateProjectVariableOptions
func (_e *IntegrationsGitlabClientFacade_Expecter) UpdateVariable(ctx interface{}, projectId interface{}, key interface{}, opt interface{}) *IntegrationsGitlabClientFacade_UpdateVariable_Call {
	return &IntegrationsGitlabClientFacade_UpdateVariable_Call{Call: _e.mock.On("UpdateVariable", ctx, projectId, key, opt)}
}

func (_c *IntegrationsGitlabClientFacade_UpdateVariable_Call) Run(run func(ctx context.Context, projectId int, key string, opt *gitlab.UpdateProjectVariableOptions)) *IntegrationsGitlabClientFacade_UpdateVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*gitlab.UpdateProjectVariableOptions))
	})
	return _c
}

func (_c *IntegrationsGitlabClientFacade_UpdateVariable_Call) Return(_a0 *gitlab.ProjectVariable, _a1 *gitlab.Response, _a2 error) *IntegrationsGitlabClientFacade_UpdateVariable_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IntegrationsGitlabClientFacade_UpdateVariable_Call) RunAndReturn(run func(context.Context, int, string, *gitlab.UpdateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error)) *IntegrationsGitlabClientFacade_UpdateVariable_Call {
	_c.Call.Return(run)
	return _c
}

// NewIntegrationsGitlabClientFacade creates a new instance of IntegrationsGitlabClientFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntegrationsGitlabClientFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntegrationsGitlabClientFacade {
	mock := &IntegrationsGitlabClientFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
