// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// CoreProjectRepository is an autogenerated mock type for the ProjectRepository type
type CoreProjectRepository struct {
	mock.Mock
}

type CoreProjectRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreProjectRepository) EXPECT() *CoreProjectRepository_Expecter {
	return &CoreProjectRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: tx, projectID
func (_m *CoreProjectRepository) Activate(tx *gorm.DB, projectID uuid.UUID) error {
	ret := _m.Called(tx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) error); ok {
		r0 = rf(tx, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreProjectRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type CoreProjectRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx *gorm.DB
//   - projectID uuid.UUID
func (_e *CoreProjectRepository_Expecter) Activate(tx interface{}, projectID interface{}) *CoreProjectRepository_Activate_Call {
	return &CoreProjectRepository_Activate_Call{Call: _e.mock.On("Activate", tx, projectID)}
}

func (_c *CoreProjectRepository_Activate_Call) Run(run func(tx *gorm.DB, projectID uuid.UUID)) *CoreProjectRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CoreProjectRepository_Activate_Call) Return(_a0 error) *CoreProjectRepository_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreProjectRepository_Activate_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) error) *CoreProjectRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, project
func (_m *CoreProjectRepository) Create(tx *gorm.DB, project *models.Project) error {
	ret := _m.Called(tx, project)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Project) error); ok {
		r0 = rf(tx, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreProjectRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CoreProjectRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx *gorm.DB
//   - project *models.Project
func (_e *CoreProjectRepository_Expecter) Create(tx interface{}, project interface{}) *CoreProjectRepository_Create_Call {
	return &CoreProjectRepository_Create_Call{Call: _e.mock.On("Create", tx, project)}
}

func (_c *CoreProjectRepository_Create_Call) Run(run func(tx *gorm.DB, project *models.Project)) *CoreProjectRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Project))
	})
	return _c
}

func (_c *CoreProjectRepository_Create_Call) Return(_a0 error) *CoreProjectRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreProjectRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *models.Project) error) *CoreProjectRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tx, projectID
func (_m *CoreProjectRepository) Delete(tx *gorm.DB, projectID uuid.UUID) error {
	ret := _m.Called(tx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) error); ok {
		r0 = rf(tx, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreProjectRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CoreProjectRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - projectID uuid.UUID
func (_e *CoreProjectRepository_Expecter) Delete(tx interface{}, projectID interface{}) *CoreProjectRepository_Delete_Call {
	return &CoreProjectRepository_Delete_Call{Call: _e.mock.On("Delete", tx, projectID)}
}

func (_c *CoreProjectRepository_Delete_Call) Run(run func(tx *gorm.DB, projectID uuid.UUID)) *CoreProjectRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CoreProjectRepository_Delete_Call) Return(_a0 error) *CoreProjectRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreProjectRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) error) *CoreProjectRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByOrgID provides a mock function with given fields: organizationID
func (_m *CoreProjectRepository) GetByOrgID(organizationID uuid.UUID) ([]models.Project, error) {
	ret := _m.Called(organizationID)

	if len(ret) == 0 {
		panic("no return value specified for GetByOrgID")
	}

	var r0 []models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Project, error)); ok {
		return rf(organizationID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Project); ok {
		r0 = rf(organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreProjectRepository_GetByOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByOrgID'
type CoreProjectRepository_GetByOrgID_Call struct {
	*mock.Call
}

// GetByOrgID is a helper method to define mock.On call
//   - organizationID uuid.UUID
func (_e *CoreProjectRepository_Expecter) GetByOrgID(organizationID interface{}) *CoreProjectRepository_GetByOrgID_Call {
	return &CoreProjectRepository_GetByOrgID_Call{Call: _e.mock.On("GetByOrgID", organizationID)}
}

func (_c *CoreProjectRepository_GetByOrgID_Call) Run(run func(organizationID uuid.UUID)) *CoreProjectRepository_GetByOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *CoreProjectRepository_GetByOrgID_Call) Return(_a0 []models.Project, _a1 error) *CoreProjectRepository_GetByOrgID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreProjectRepository_GetByOrgID_Call) RunAndReturn(run func(uuid.UUID) ([]models.Project, error)) *CoreProjectRepository_GetByOrgID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirectChildProjects provides a mock function with given fields: projectID
func (_m *CoreProjectRepository) GetDirectChildProjects(projectID uuid.UUID) ([]models.Project, error) {
	ret := _m.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetDirectChildProjects")
	}

	var r0 []models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Project, error)); ok {
		return rf(projectID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Project); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreProjectRepository_GetDirectChildProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirectChildProjects'
type CoreProjectRepository_GetDirectChildProjects_Call struct {
	*mock.Call
}

// GetDirectChildProjects is a helper method to define mock.On call
//   - projectID uuid.UUID
func (_e *CoreProjectRepository_Expecter) GetDirectChildProjects(projectID interface{}) *CoreProjectRepository_GetDirectChildProjects_Call {
	return &CoreProjectRepository_GetDirectChildProjects_Call{Call: _e.mock.On("GetDirectChildProjects", projectID)}
}

func (_c *CoreProjectRepository_GetDirectChildProjects_Call) Run(run func(projectID uuid.UUID)) *CoreProjectRepository_GetDirectChildProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *CoreProjectRepository_GetDirectChildProjects_Call) Return(_a0 []models.Project, _a1 error) *CoreProjectRepository_GetDirectChildProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreProjectRepository_GetDirectChildProjects_Call) RunAndReturn(run func(uuid.UUID) ([]models.Project, error)) *CoreProjectRepository_GetDirectChildProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByAssetID provides a mock function with given fields: assetID
func (_m *CoreProjectRepository) GetProjectByAssetID(assetID uuid.UUID) (models.Project, error) {
	ret := _m.Called(assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByAssetID")
	}

	var r0 models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Project, error)); ok {
		return rf(assetID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Project); ok {
		r0 = rf(assetID)
	} else {
		r0 = ret.Get(0).(models.Project)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreProjectRepository_GetProjectByAssetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByAssetID'
type CoreProjectRepository_GetProjectByAssetID_Call struct {
	*mock.Call
}

// GetProjectByAssetID is a helper method to define mock.On call
//   - assetID uuid.UUID
func (_e *CoreProjectRepository_Expecter) GetProjectByAssetID(assetID interface{}) *CoreProjectRepository_GetProjectByAssetID_Call {
	return &CoreProjectRepository_GetProjectByAssetID_Call{Call: _e.mock.On("GetProjectByAssetID", assetID)}
}

func (_c *CoreProjectRepository_GetProjectByAssetID_Call) Run(run func(assetID uuid.UUID)) *CoreProjectRepository_GetProjectByAssetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *CoreProjectRepository_GetProjectByAssetID_Call) Return(_a0 models.Project, _a1 error) *CoreProjectRepository_GetProjectByAssetID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreProjectRepository_GetProjectByAssetID_Call) RunAndReturn(run func(uuid.UUID) (models.Project, error)) *CoreProjectRepository_GetProjectByAssetID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: idSlice, parentID, organizationID
func (_m *CoreProjectRepository) List(idSlice []uuid.UUID, parentID *uuid.UUID, organizationID uuid.UUID) ([]models.Project, error) {
	ret := _m.Called(idSlice, parentID, organizationID)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID, *uuid.UUID, uuid.UUID) ([]models.Project, error)); ok {
		return rf(idSlice, parentID, organizationID)
	}
	if rf, ok := ret.Get(0).(func([]uuid.UUID, *uuid.UUID, uuid.UUID) []models.Project); ok {
		r0 = rf(idSlice, parentID, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Project)
		}
	}

	if rf, ok := ret.Get(1).(func([]uuid.UUID, *uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(idSlice, parentID, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreProjectRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CoreProjectRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - idSlice []uuid.UUID
//   - parentID *uuid.UUID
//   - organizationID uuid.UUID
func (_e *CoreProjectRepository_Expecter) List(idSlice interface{}, parentID interface{}, organizationID interface{}) *CoreProjectRepository_List_Call {
	return &CoreProjectRepository_List_Call{Call: _e.mock.On("List", idSlice, parentID, organizationID)}
}

func (_c *CoreProjectRepository_List_Call) Run(run func(idSlice []uuid.UUID, parentID *uuid.UUID, organizationID uuid.UUID)) *CoreProjectRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uuid.UUID), args[1].(*uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *CoreProjectRepository_List_Call) Return(_a0 []models.Project, _a1 error) *CoreProjectRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreProjectRepository_List_Call) RunAndReturn(run func([]uuid.UUID, *uuid.UUID, uuid.UUID) ([]models.Project, error)) *CoreProjectRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: projectID
func (_m *CoreProjectRepository) Read(projectID uuid.UUID) (models.Project, error) {
	ret := _m.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Project, error)); ok {
		return rf(projectID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Project); ok {
		r0 = rf(projectID)
	} else {
		r0 = ret.Get(0).(models.Project)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreProjectRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type CoreProjectRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - projectID uuid.UUID
func (_e *CoreProjectRepository_Expecter) Read(projectID interface{}) *CoreProjectRepository_Read_Call {
	return &CoreProjectRepository_Read_Call{Call: _e.mock.On("Read", projectID)}
}

func (_c *CoreProjectRepository_Read_Call) Run(run func(projectID uuid.UUID)) *CoreProjectRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *CoreProjectRepository_Read_Call) Return(_a0 models.Project, _a1 error) *CoreProjectRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreProjectRepository_Read_Call) RunAndReturn(run func(uuid.UUID) (models.Project, error)) *CoreProjectRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBySlug provides a mock function with given fields: organizationID, slug
func (_m *CoreProjectRepository) ReadBySlug(organizationID uuid.UUID, slug string) (models.Project, error) {
	ret := _m.Called(organizationID, slug)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlug")
	}

	var r0 models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (models.Project, error)); ok {
		return rf(organizationID, slug)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) models.Project); ok {
		r0 = rf(organizationID, slug)
	} else {
		r0 = ret.Get(0).(models.Project)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(organizationID, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreProjectRepository_ReadBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlug'
type CoreProjectRepository_ReadBySlug_Call struct {
	*mock.Call
}

// ReadBySlug is a helper method to define mock.On call
//   - organizationID uuid.UUID
//   - slug string
func (_e *CoreProjectRepository_Expecter) ReadBySlug(organizationID interface{}, slug interface{}) *CoreProjectRepository_ReadBySlug_Call {
	return &CoreProjectRepository_ReadBySlug_Call{Call: _e.mock.On("ReadBySlug", organizationID, slug)}
}

func (_c *CoreProjectRepository_ReadBySlug_Call) Run(run func(organizationID uuid.UUID, slug string)) *CoreProjectRepository_ReadBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *CoreProjectRepository_ReadBySlug_Call) Return(_a0 models.Project, _a1 error) *CoreProjectRepository_ReadBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreProjectRepository_ReadBySlug_Call) RunAndReturn(run func(uuid.UUID, string) (models.Project, error)) *CoreProjectRepository_ReadBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBySlugUnscoped provides a mock function with given fields: organizationId, slug
func (_m *CoreProjectRepository) ReadBySlugUnscoped(organizationId uuid.UUID, slug string) (models.Project, error) {
	ret := _m.Called(organizationId, slug)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlugUnscoped")
	}

	var r0 models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (models.Project, error)); ok {
		return rf(organizationId, slug)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) models.Project); ok {
		r0 = rf(organizationId, slug)
	} else {
		r0 = ret.Get(0).(models.Project)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(organizationId, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreProjectRepository_ReadBySlugUnscoped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlugUnscoped'
type CoreProjectRepository_ReadBySlugUnscoped_Call struct {
	*mock.Call
}

// ReadBySlugUnscoped is a helper method to define mock.On call
//   - organizationId uuid.UUID
//   - slug string
func (_e *CoreProjectRepository_Expecter) ReadBySlugUnscoped(organizationId interface{}, slug interface{}) *CoreProjectRepository_ReadBySlugUnscoped_Call {
	return &CoreProjectRepository_ReadBySlugUnscoped_Call{Call: _e.mock.On("ReadBySlugUnscoped", organizationId, slug)}
}

func (_c *CoreProjectRepository_ReadBySlugUnscoped_Call) Run(run func(organizationId uuid.UUID, slug string)) *CoreProjectRepository_ReadBySlugUnscoped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *CoreProjectRepository_ReadBySlugUnscoped_Call) Return(_a0 models.Project, _a1 error) *CoreProjectRepository_ReadBySlugUnscoped_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreProjectRepository_ReadBySlugUnscoped_Call) RunAndReturn(run func(uuid.UUID, string) (models.Project, error)) *CoreProjectRepository_ReadBySlugUnscoped_Call {
	_c.Call.Return(run)
	return _c
}

// RecursivelyGetChildProjects provides a mock function with given fields: projectID
func (_m *CoreProjectRepository) RecursivelyGetChildProjects(projectID uuid.UUID) ([]models.Project, error) {
	ret := _m.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for RecursivelyGetChildProjects")
	}

	var r0 []models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Project, error)); ok {
		return rf(projectID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Project); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreProjectRepository_RecursivelyGetChildProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecursivelyGetChildProjects'
type CoreProjectRepository_RecursivelyGetChildProjects_Call struct {
	*mock.Call
}

// RecursivelyGetChildProjects is a helper method to define mock.On call
//   - projectID uuid.UUID
func (_e *CoreProjectRepository_Expecter) RecursivelyGetChildProjects(projectID interface{}) *CoreProjectRepository_RecursivelyGetChildProjects_Call {
	return &CoreProjectRepository_RecursivelyGetChildProjects_Call{Call: _e.mock.On("RecursivelyGetChildProjects", projectID)}
}

func (_c *CoreProjectRepository_RecursivelyGetChildProjects_Call) Run(run func(projectID uuid.UUID)) *CoreProjectRepository_RecursivelyGetChildProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *CoreProjectRepository_RecursivelyGetChildProjects_Call) Return(_a0 []models.Project, _a1 error) *CoreProjectRepository_RecursivelyGetChildProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreProjectRepository_RecursivelyGetChildProjects_Call) RunAndReturn(run func(uuid.UUID) ([]models.Project, error)) *CoreProjectRepository_RecursivelyGetChildProjects_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: tx, project
func (_m *CoreProjectRepository) Update(tx *gorm.DB, project *models.Project) error {
	ret := _m.Called(tx, project)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Project) error); ok {
		r0 = rf(tx, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreProjectRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CoreProjectRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - tx *gorm.DB
//   - project *models.Project
func (_e *CoreProjectRepository_Expecter) Update(tx interface{}, project interface{}) *CoreProjectRepository_Update_Call {
	return &CoreProjectRepository_Update_Call{Call: _e.mock.On("Update", tx, project)}
}

func (_c *CoreProjectRepository_Update_Call) Run(run func(tx *gorm.DB, project *models.Project)) *CoreProjectRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Project))
	})
	return _c
}

func (_c *CoreProjectRepository_Update_Call) Return(_a0 error) *CoreProjectRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreProjectRepository_Update_Call) RunAndReturn(run func(*gorm.DB, *models.Project) error) *CoreProjectRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreProjectRepository creates a new instance of CoreProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreProjectRepository {
	mock := &CoreProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
