// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// ScanCveRepository is an autogenerated mock type for the cveRepository type
type ScanCveRepository struct {
	mock.Mock
}

type ScanCveRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ScanCveRepository) EXPECT() *ScanCveRepository_Expecter {
	return &ScanCveRepository_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields: cveIDs
func (_m *ScanCveRepository) FindAll(cveIDs []string) ([]models.CVE, error) {
	ret := _m.Called(cveIDs)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []models.CVE
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.CVE, error)); ok {
		return rf(cveIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.CVE); ok {
		r0 = rf(cveIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CVE)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(cveIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanCveRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type ScanCveRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - cveIDs []string
func (_e *ScanCveRepository_Expecter) FindAll(cveIDs interface{}) *ScanCveRepository_FindAll_Call {
	return &ScanCveRepository_FindAll_Call{Call: _e.mock.On("FindAll", cveIDs)}
}

func (_c *ScanCveRepository_FindAll_Call) Run(run func(cveIDs []string)) *ScanCveRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *ScanCveRepository_FindAll_Call) Return(_a0 []models.CVE, _a1 error) *ScanCveRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ScanCveRepository_FindAll_Call) RunAndReturn(run func([]string) ([]models.CVE, error)) *ScanCveRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewScanCveRepository creates a new instance of ScanCveRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScanCveRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScanCveRepository {
	mock := &ScanCveRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
