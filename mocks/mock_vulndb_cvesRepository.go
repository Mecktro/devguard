// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// VulndbCvesRepository is an autogenerated mock type for the cvesRepository type
type VulndbCvesRepository struct {
	mock.Mock
}

type VulndbCvesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *VulndbCvesRepository) EXPECT() *VulndbCvesRepository_Expecter {
	return &VulndbCvesRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: tx, id
func (_m *VulndbCvesRepository) Activate(tx *gorm.DB, id string) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbCvesRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type VulndbCvesRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id string
func (_e *VulndbCvesRepository_Expecter) Activate(tx interface{}, id interface{}) *VulndbCvesRepository_Activate_Call {
	return &VulndbCvesRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *VulndbCvesRepository_Activate_Call) Run(run func(tx *gorm.DB, id string)) *VulndbCvesRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *VulndbCvesRepository_Activate_Call) Return(_a0 error) *VulndbCvesRepository_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCvesRepository_Activate_Call) RunAndReturn(run func(*gorm.DB, string) error) *VulndbCvesRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function with no fields
func (_m *VulndbCvesRepository) Begin() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// VulndbCvesRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type VulndbCvesRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *VulndbCvesRepository_Expecter) Begin() *VulndbCvesRepository_Begin_Call {
	return &VulndbCvesRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *VulndbCvesRepository_Begin_Call) Run(run func()) *VulndbCvesRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VulndbCvesRepository_Begin_Call) Return(_a0 *gorm.DB) *VulndbCvesRepository_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCvesRepository_Begin_Call) RunAndReturn(run func() *gorm.DB) *VulndbCvesRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, t
func (_m *VulndbCvesRepository) Create(tx *gorm.DB, t *models.CVE) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.CVE) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbCvesRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type VulndbCvesRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.CVE
func (_e *VulndbCvesRepository_Expecter) Create(tx interface{}, t interface{}) *VulndbCvesRepository_Create_Call {
	return &VulndbCvesRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *VulndbCvesRepository_Create_Call) Run(run func(tx *gorm.DB, t *models.CVE)) *VulndbCvesRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.CVE))
	})
	return _c
}

func (_c *VulndbCvesRepository_Create_Call) Return(_a0 error) *VulndbCvesRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCvesRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *models.CVE) error) *VulndbCvesRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function with given fields: tx, ts
func (_m *VulndbCvesRepository) CreateBatch(tx *gorm.DB, ts []models.CVE) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.CVE) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbCvesRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type VulndbCvesRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.CVE
func (_e *VulndbCvesRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *VulndbCvesRepository_CreateBatch_Call {
	return &VulndbCvesRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *VulndbCvesRepository_CreateBatch_Call) Run(run func(tx *gorm.DB, ts []models.CVE)) *VulndbCvesRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.CVE))
	})
	return _c
}

func (_c *VulndbCvesRepository_CreateBatch_Call) Return(_a0 error) *VulndbCvesRepository_CreateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCvesRepository_CreateBatch_Call) RunAndReturn(run func(*gorm.DB, []models.CVE) error) *VulndbCvesRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tx, id
func (_m *VulndbCvesRepository) Delete(tx *gorm.DB, id string) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbCvesRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type VulndbCvesRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id string
func (_e *VulndbCvesRepository_Expecter) Delete(tx interface{}, id interface{}) *VulndbCvesRepository_Delete_Call {
	return &VulndbCvesRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *VulndbCvesRepository_Delete_Call) Run(run func(tx *gorm.DB, id string)) *VulndbCvesRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *VulndbCvesRepository_Delete_Call) Return(_a0 error) *VulndbCvesRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCvesRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, string) error) *VulndbCvesRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCPEMatchesID provides a mock function with no fields
func (_m *VulndbCvesRepository) GetAllCPEMatchesID() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCPEMatchesID")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VulndbCvesRepository_GetAllCPEMatchesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCPEMatchesID'
type VulndbCvesRepository_GetAllCPEMatchesID_Call struct {
	*mock.Call
}

// GetAllCPEMatchesID is a helper method to define mock.On call
func (_e *VulndbCvesRepository_Expecter) GetAllCPEMatchesID() *VulndbCvesRepository_GetAllCPEMatchesID_Call {
	return &VulndbCvesRepository_GetAllCPEMatchesID_Call{Call: _e.mock.On("GetAllCPEMatchesID")}
}

func (_c *VulndbCvesRepository_GetAllCPEMatchesID_Call) Run(run func()) *VulndbCvesRepository_GetAllCPEMatchesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VulndbCvesRepository_GetAllCPEMatchesID_Call) Return(_a0 []string, _a1 error) *VulndbCvesRepository_GetAllCPEMatchesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VulndbCvesRepository_GetAllCPEMatchesID_Call) RunAndReturn(run func() ([]string, error)) *VulndbCvesRepository_GetAllCPEMatchesID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCVEsID provides a mock function with no fields
func (_m *VulndbCvesRepository) GetAllCVEsID() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCVEsID")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VulndbCvesRepository_GetAllCVEsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCVEsID'
type VulndbCvesRepository_GetAllCVEsID_Call struct {
	*mock.Call
}

// GetAllCVEsID is a helper method to define mock.On call
func (_e *VulndbCvesRepository_Expecter) GetAllCVEsID() *VulndbCvesRepository_GetAllCVEsID_Call {
	return &VulndbCvesRepository_GetAllCVEsID_Call{Call: _e.mock.On("GetAllCVEsID")}
}

func (_c *VulndbCvesRepository_GetAllCVEsID_Call) Run(run func()) *VulndbCvesRepository_GetAllCVEsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VulndbCvesRepository_GetAllCVEsID_Call) Return(_a0 []string, _a1 error) *VulndbCvesRepository_GetAllCVEsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VulndbCvesRepository_GetAllCVEsID_Call) RunAndReturn(run func() ([]string, error)) *VulndbCvesRepository_GetAllCVEsID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: tx
func (_m *VulndbCvesRepository) GetDB(tx *gorm.DB) *gorm.DB {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// VulndbCvesRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type VulndbCvesRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *VulndbCvesRepository_Expecter) GetDB(tx interface{}) *VulndbCvesRepository_GetDB_Call {
	return &VulndbCvesRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *VulndbCvesRepository_GetDB_Call) Run(run func(tx *gorm.DB)) *VulndbCvesRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *VulndbCvesRepository_GetDB_Call) Return(_a0 *gorm.DB) *VulndbCvesRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCvesRepository_GetDB_Call) RunAndReturn(run func(*gorm.DB) *gorm.DB) *VulndbCvesRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ids
func (_m *VulndbCvesRepository) List(ids []string) ([]models.CVE, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.CVE
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.CVE, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.CVE); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CVE)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VulndbCvesRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type VulndbCvesRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []string
func (_e *VulndbCvesRepository_Expecter) List(ids interface{}) *VulndbCvesRepository_List_Call {
	return &VulndbCvesRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *VulndbCvesRepository_List_Call) Run(run func(ids []string)) *VulndbCvesRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *VulndbCvesRepository_List_Call) Return(_a0 []models.CVE, _a1 error) *VulndbCvesRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VulndbCvesRepository_List_Call) RunAndReturn(run func([]string) ([]models.CVE, error)) *VulndbCvesRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *VulndbCvesRepository) Read(id string) (models.CVE, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.CVE
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.CVE, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.CVE); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.CVE)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VulndbCvesRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type VulndbCvesRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *VulndbCvesRepository_Expecter) Read(id interface{}) *VulndbCvesRepository_Read_Call {
	return &VulndbCvesRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *VulndbCvesRepository_Read_Call) Run(run func(id string)) *VulndbCvesRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *VulndbCvesRepository_Read_Call) Return(_a0 models.CVE, _a1 error) *VulndbCvesRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VulndbCvesRepository_Read_Call) RunAndReturn(run func(string) (models.CVE, error)) *VulndbCvesRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, cve
func (_m *VulndbCvesRepository) Save(tx *gorm.DB, cve *models.CVE) error {
	ret := _m.Called(tx, cve)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.CVE) error); ok {
		r0 = rf(tx, cve)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbCvesRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type VulndbCvesRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - cve *models.CVE
func (_e *VulndbCvesRepository_Expecter) Save(tx interface{}, cve interface{}) *VulndbCvesRepository_Save_Call {
	return &VulndbCvesRepository_Save_Call{Call: _e.mock.On("Save", tx, cve)}
}

func (_c *VulndbCvesRepository_Save_Call) Run(run func(tx *gorm.DB, cve *models.CVE)) *VulndbCvesRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.CVE))
	})
	return _c
}

func (_c *VulndbCvesRepository_Save_Call) Return(_a0 error) *VulndbCvesRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCvesRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.CVE) error) *VulndbCvesRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, ts
func (_m *VulndbCvesRepository) SaveBatch(tx *gorm.DB, ts []models.CVE) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.CVE) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbCvesRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type VulndbCvesRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.CVE
func (_e *VulndbCvesRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *VulndbCvesRepository_SaveBatch_Call {
	return &VulndbCvesRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *VulndbCvesRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, ts []models.CVE)) *VulndbCvesRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.CVE))
	})
	return _c
}

func (_c *VulndbCvesRepository_SaveBatch_Call) Return(_a0 error) *VulndbCvesRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCvesRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.CVE) error) *VulndbCvesRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatchCPEMatch provides a mock function with given fields: tx, matches
func (_m *VulndbCvesRepository) SaveBatchCPEMatch(tx *gorm.DB, matches []models.CPEMatch) error {
	ret := _m.Called(tx, matches)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatchCPEMatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.CPEMatch) error); ok {
		r0 = rf(tx, matches)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbCvesRepository_SaveBatchCPEMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatchCPEMatch'
type VulndbCvesRepository_SaveBatchCPEMatch_Call struct {
	*mock.Call
}

// SaveBatchCPEMatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - matches []models.CPEMatch
func (_e *VulndbCvesRepository_Expecter) SaveBatchCPEMatch(tx interface{}, matches interface{}) *VulndbCvesRepository_SaveBatchCPEMatch_Call {
	return &VulndbCvesRepository_SaveBatchCPEMatch_Call{Call: _e.mock.On("SaveBatchCPEMatch", tx, matches)}
}

func (_c *VulndbCvesRepository_SaveBatchCPEMatch_Call) Run(run func(tx *gorm.DB, matches []models.CPEMatch)) *VulndbCvesRepository_SaveBatchCPEMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.CPEMatch))
	})
	return _c
}

func (_c *VulndbCvesRepository_SaveBatchCPEMatch_Call) Return(_a0 error) *VulndbCvesRepository_SaveBatchCPEMatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCvesRepository_SaveBatchCPEMatch_Call) RunAndReturn(run func(*gorm.DB, []models.CPEMatch) error) *VulndbCvesRepository_SaveBatchCPEMatch_Call {
	_c.Call.Return(run)
	return _c
}

// SaveCveAffectedComponents provides a mock function with given fields: tx, cveId, affectedComponentHashes
func (_m *VulndbCvesRepository) SaveCveAffectedComponents(tx *gorm.DB, cveId string, affectedComponentHashes []string) error {
	ret := _m.Called(tx, cveId, affectedComponentHashes)

	if len(ret) == 0 {
		panic("no return value specified for SaveCveAffectedComponents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, []string) error); ok {
		r0 = rf(tx, cveId, affectedComponentHashes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbCvesRepository_SaveCveAffectedComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveCveAffectedComponents'
type VulndbCvesRepository_SaveCveAffectedComponents_Call struct {
	*mock.Call
}

// SaveCveAffectedComponents is a helper method to define mock.On call
//   - tx *gorm.DB
//   - cveId string
//   - affectedComponentHashes []string
func (_e *VulndbCvesRepository_Expecter) SaveCveAffectedComponents(tx interface{}, cveId interface{}, affectedComponentHashes interface{}) *VulndbCvesRepository_SaveCveAffectedComponents_Call {
	return &VulndbCvesRepository_SaveCveAffectedComponents_Call{Call: _e.mock.On("SaveCveAffectedComponents", tx, cveId, affectedComponentHashes)}
}

func (_c *VulndbCvesRepository_SaveCveAffectedComponents_Call) Run(run func(tx *gorm.DB, cveId string, affectedComponentHashes []string)) *VulndbCvesRepository_SaveCveAffectedComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *VulndbCvesRepository_SaveCveAffectedComponents_Call) Return(_a0 error) *VulndbCvesRepository_SaveCveAffectedComponents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCvesRepository_SaveCveAffectedComponents_Call) RunAndReturn(run func(*gorm.DB, string, []string) error) *VulndbCvesRepository_SaveCveAffectedComponents_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: _a0
func (_m *VulndbCvesRepository) Transaction(_a0 func(*gorm.DB) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbCvesRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type VulndbCvesRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - _a0 func(*gorm.DB) error
func (_e *VulndbCvesRepository_Expecter) Transaction(_a0 interface{}) *VulndbCvesRepository_Transaction_Call {
	return &VulndbCvesRepository_Transaction_Call{Call: _e.mock.On("Transaction", _a0)}
}

func (_c *VulndbCvesRepository_Transaction_Call) Run(run func(_a0 func(*gorm.DB) error)) *VulndbCvesRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *VulndbCvesRepository_Transaction_Call) Return(_a0 error) *VulndbCvesRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbCvesRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *VulndbCvesRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewVulndbCvesRepository creates a new instance of VulndbCvesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVulndbCvesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VulndbCvesRepository {
	mock := &VulndbCvesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
