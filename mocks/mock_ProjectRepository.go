// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// ProjectRepository is an autogenerated mock type for the projectRepository type
type ProjectRepository struct {
	mock.Mock
}

type ProjectRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectRepository) EXPECT() *ProjectRepository_Expecter {
	return &ProjectRepository_Expecter{mock: &_m.Mock}
}

// ReadBySlug provides a mock function with given fields: organizationID, slug
func (_m *ProjectRepository) ReadBySlug(organizationID uuid.UUID, slug string) (models.Project, error) {
	ret := _m.Called(organizationID, slug)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlug")
	}

	var r0 models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (models.Project, error)); ok {
		return rf(organizationID, slug)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) models.Project); ok {
		r0 = rf(organizationID, slug)
	} else {
		r0 = ret.Get(0).(models.Project)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(organizationID, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepository_ReadBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlug'
type ProjectRepository_ReadBySlug_Call struct {
	*mock.Call
}

// ReadBySlug is a helper method to define mock.On call
//   - organizationID uuid.UUID
//   - slug string
func (_e *ProjectRepository_Expecter) ReadBySlug(organizationID interface{}, slug interface{}) *ProjectRepository_ReadBySlug_Call {
	return &ProjectRepository_ReadBySlug_Call{Call: _e.mock.On("ReadBySlug", organizationID, slug)}
}

func (_c *ProjectRepository_ReadBySlug_Call) Run(run func(organizationID uuid.UUID, slug string)) *ProjectRepository_ReadBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *ProjectRepository_ReadBySlug_Call) Return(_a0 models.Project, _a1 error) *ProjectRepository_ReadBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepository_ReadBySlug_Call) RunAndReturn(run func(uuid.UUID, string) (models.Project, error)) *ProjectRepository_ReadBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectRepository creates a new instance of ProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectRepository {
	mock := &ProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
