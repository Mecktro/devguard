// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/ory/client-go"

	mock "github.com/stretchr/testify/mock"
)

// CoreAdminClient is an autogenerated mock type for the AdminClient type
type CoreAdminClient struct {
	mock.Mock
}

type CoreAdminClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreAdminClient) EXPECT() *CoreAdminClient_Expecter {
	return &CoreAdminClient_Expecter{mock: &_m.Mock}
}

// GetIdentity provides a mock function with given fields: ctx, userID
func (_m *CoreAdminClient) GetIdentity(ctx context.Context, userID string) (client.Identity, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentity")
	}

	var r0 client.Identity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (client.Identity, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) client.Identity); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(client.Identity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAdminClient_GetIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentity'
type CoreAdminClient_GetIdentity_Call struct {
	*mock.Call
}

// GetIdentity is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *CoreAdminClient_Expecter) GetIdentity(ctx interface{}, userID interface{}) *CoreAdminClient_GetIdentity_Call {
	return &CoreAdminClient_GetIdentity_Call{Call: _e.mock.On("GetIdentity", ctx, userID)}
}

func (_c *CoreAdminClient_GetIdentity_Call) Run(run func(ctx context.Context, userID string)) *CoreAdminClient_GetIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CoreAdminClient_GetIdentity_Call) Return(_a0 client.Identity, _a1 error) *CoreAdminClient_GetIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAdminClient_GetIdentity_Call) RunAndReturn(run func(context.Context, string) (client.Identity, error)) *CoreAdminClient_GetIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// ListUser provides a mock function with given fields: _a0
func (_m *CoreAdminClient) ListUser(_a0 client.IdentityAPIListIdentitiesRequest) ([]client.Identity, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListUser")
	}

	var r0 []client.Identity
	var r1 error
	if rf, ok := ret.Get(0).(func(client.IdentityAPIListIdentitiesRequest) ([]client.Identity, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(client.IdentityAPIListIdentitiesRequest) []client.Identity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(client.IdentityAPIListIdentitiesRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAdminClient_ListUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUser'
type CoreAdminClient_ListUser_Call struct {
	*mock.Call
}

// ListUser is a helper method to define mock.On call
//   - _a0 client.IdentityAPIListIdentitiesRequest
func (_e *CoreAdminClient_Expecter) ListUser(_a0 interface{}) *CoreAdminClient_ListUser_Call {
	return &CoreAdminClient_ListUser_Call{Call: _e.mock.On("ListUser", _a0)}
}

func (_c *CoreAdminClient_ListUser_Call) Run(run func(_a0 client.IdentityAPIListIdentitiesRequest)) *CoreAdminClient_ListUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.IdentityAPIListIdentitiesRequest))
	})
	return _c
}

func (_c *CoreAdminClient_ListUser_Call) Return(_a0 []client.Identity, _a1 error) *CoreAdminClient_ListUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAdminClient_ListUser_Call) RunAndReturn(run func(client.IdentityAPIListIdentitiesRequest) ([]client.Identity, error)) *CoreAdminClient_ListUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreAdminClient creates a new instance of CoreAdminClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreAdminClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreAdminClient {
	mock := &CoreAdminClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
