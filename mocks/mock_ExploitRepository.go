// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// ExploitRepository is an autogenerated mock type for the ExploitRepository type
type ExploitRepository struct {
	mock.Mock
}

type ExploitRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ExploitRepository) EXPECT() *ExploitRepository_Expecter {
	return &ExploitRepository_Expecter{mock: &_m.Mock}
}

// GetAllExploitsID provides a mock function with no fields
func (_m *ExploitRepository) GetAllExploitsID() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllExploitsID")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExploitRepository_GetAllExploitsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllExploitsID'
type ExploitRepository_GetAllExploitsID_Call struct {
	*mock.Call
}

// GetAllExploitsID is a helper method to define mock.On call
func (_e *ExploitRepository_Expecter) GetAllExploitsID() *ExploitRepository_GetAllExploitsID_Call {
	return &ExploitRepository_GetAllExploitsID_Call{Call: _e.mock.On("GetAllExploitsID")}
}

func (_c *ExploitRepository_GetAllExploitsID_Call) Run(run func()) *ExploitRepository_GetAllExploitsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExploitRepository_GetAllExploitsID_Call) Return(_a0 []string, _a1 error) *ExploitRepository_GetAllExploitsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExploitRepository_GetAllExploitsID_Call) RunAndReturn(run func() ([]string, error)) *ExploitRepository_GetAllExploitsID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, exploits
func (_m *ExploitRepository) SaveBatch(tx *gorm.DB, exploits []models.Exploit) error {
	ret := _m.Called(tx, exploits)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Exploit) error); ok {
		r0 = rf(tx, exploits)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExploitRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type ExploitRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - exploits []models.Exploit
func (_e *ExploitRepository_Expecter) SaveBatch(tx interface{}, exploits interface{}) *ExploitRepository_SaveBatch_Call {
	return &ExploitRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, exploits)}
}

func (_c *ExploitRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, exploits []models.Exploit)) *ExploitRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Exploit))
	})
	return _c
}

func (_c *ExploitRepository_SaveBatch_Call) Return(_a0 error) *ExploitRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExploitRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Exploit) error) *ExploitRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewExploitRepository creates a new instance of ExploitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExploitRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExploitRepository {
	mock := &ExploitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
