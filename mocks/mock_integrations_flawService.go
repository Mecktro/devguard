// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/l3montree-dev/devguard/internal/database/models"
)

// IntegrationsVulnService is an autogenerated mock type for the vulnService type
type IntegrationsVulnService struct {
	mock.Mock
}

type IntegrationsVulnService_Expecter struct {
	mock *mock.Mock
}

func (_m *IntegrationsVulnService) EXPECT() *IntegrationsVulnService_Expecter {
	return &IntegrationsVulnService_Expecter{mock: &_m.Mock}
}

// ApplyAndSave provides a mock function with given fields: tx, vuln, vulnEvent
func (_m *IntegrationsVulnService) ApplyAndSave(tx *gorm.DB, vuln *models.DependencyVulnerability, vulnEvent *models.VulnEvent) error {
	ret := _m.Called(tx, vuln, vulnEvent)

	if len(ret) == 0 {
		panic("no return value specified for ApplyAndSave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.DependencyVulnerability, *models.VulnEvent) error); ok {
		r0 = rf(tx, vuln, vulnEvent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IntegrationsVulnService_ApplyAndSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyAndSave'
type IntegrationsVulnService_ApplyAndSave_Call struct {
	*mock.Call
}

// ApplyAndSave is a helper method to define mock.On call
//   - tx *gorm.DB
//   - vuln *models.Vuln
//   - vulnEvent *models.VulnEvent
func (_e *IntegrationsVulnService_Expecter) ApplyAndSave(tx interface{}, vuln interface{}, vulnEvent interface{}) *IntegrationsVulnService_ApplyAndSave_Call {
	return &IntegrationsVulnService_ApplyAndSave_Call{Call: _e.mock.On("ApplyAndSave", tx, vuln, vulnEvent)}
}

func (_c *IntegrationsVulnService_ApplyAndSave_Call) Run(run func(tx *gorm.DB, vuln *models.DependencyVulnerability, vulnEvent *models.VulnEvent)) *IntegrationsVulnService_ApplyAndSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.DependencyVulnerability), args[2].(*models.VulnEvent))
	})
	return _c
}

func (_c *IntegrationsVulnService_ApplyAndSave_Call) Return(_a0 error) *IntegrationsVulnService_ApplyAndSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IntegrationsVulnService_ApplyAndSave_Call) RunAndReturn(run func(*gorm.DB, *models.DependencyVulnerability, *models.VulnEvent) error) *IntegrationsVulnService_ApplyAndSave_Call {
	_c.Call.Return(run)
	return _c
}

// NewIntegrationsVulnService creates a new instance of IntegrationsVulnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntegrationsVulnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntegrationsVulnService {
	mock := &IntegrationsVulnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
