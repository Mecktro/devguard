// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// CoreComponentRepository is an autogenerated mock type for the ComponentRepository type
type CoreComponentRepository struct {
	mock.Mock
}

type CoreComponentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreComponentRepository) EXPECT() *CoreComponentRepository_Expecter {
	return &CoreComponentRepository_Expecter{mock: &_m.Mock}
}

// FindByPurl provides a mock function with given fields: tx, purl
func (_m *CoreComponentRepository) FindByPurl(tx *gorm.DB, purl string) (models.Component, error) {
	ret := _m.Called(tx, purl)

	if len(ret) == 0 {
		panic("no return value specified for FindByPurl")
	}

	var r0 models.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (models.Component, error)); ok {
		return rf(tx, purl)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) models.Component); ok {
		r0 = rf(tx, purl)
	} else {
		r0 = ret.Get(0).(models.Component)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, purl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreComponentRepository_FindByPurl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByPurl'
type CoreComponentRepository_FindByPurl_Call struct {
	*mock.Call
}

// FindByPurl is a helper method to define mock.On call
//   - tx *gorm.DB
//   - purl string
func (_e *CoreComponentRepository_Expecter) FindByPurl(tx interface{}, purl interface{}) *CoreComponentRepository_FindByPurl_Call {
	return &CoreComponentRepository_FindByPurl_Call{Call: _e.mock.On("FindByPurl", tx, purl)}
}

func (_c *CoreComponentRepository_FindByPurl_Call) Run(run func(tx *gorm.DB, purl string)) *CoreComponentRepository_FindByPurl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *CoreComponentRepository_FindByPurl_Call) Return(_a0 models.Component, _a1 error) *CoreComponentRepository_FindByPurl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreComponentRepository_FindByPurl_Call) RunAndReturn(run func(*gorm.DB, string) (models.Component, error)) *CoreComponentRepository_FindByPurl_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyCountPerScanner provides a mock function with given fields: assetVersionName, assetID
func (_m *CoreComponentRepository) GetDependencyCountPerScanner(assetVersionName string, assetID uuid.UUID) (map[string]int, error) {
	ret := _m.Called(assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyCountPerScanner")
	}

	var r0 map[string]int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) (map[string]int, error)); ok {
		return rf(assetVersionName, assetID)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) map[string]int); ok {
		r0 = rf(assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = rf(assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreComponentRepository_GetDependencyCountPerScanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyCountPerScanner'
type CoreComponentRepository_GetDependencyCountPerScanner_Call struct {
	*mock.Call
}

// GetDependencyCountPerScanner is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
func (_e *CoreComponentRepository_Expecter) GetDependencyCountPerScanner(assetVersionName interface{}, assetID interface{}) *CoreComponentRepository_GetDependencyCountPerScanner_Call {
	return &CoreComponentRepository_GetDependencyCountPerScanner_Call{Call: _e.mock.On("GetDependencyCountPerScanner", assetVersionName, assetID)}
}

func (_c *CoreComponentRepository_GetDependencyCountPerScanner_Call) Run(run func(assetVersionName string, assetID uuid.UUID)) *CoreComponentRepository_GetDependencyCountPerScanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CoreComponentRepository_GetDependencyCountPerScanner_Call) Return(_a0 map[string]int, _a1 error) *CoreComponentRepository_GetDependencyCountPerScanner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreComponentRepository_GetDependencyCountPerScanner_Call) RunAndReturn(run func(string, uuid.UUID) (map[string]int, error)) *CoreComponentRepository_GetDependencyCountPerScanner_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersions provides a mock function with given fields: tx, assetVersion
func (_m *CoreComponentRepository) GetVersions(tx *gorm.DB, assetVersion models.AssetVersion) ([]string, error) {
	ret := _m.Called(tx, assetVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetVersions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, models.AssetVersion) ([]string, error)); ok {
		return rf(tx, assetVersion)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, models.AssetVersion) []string); ok {
		r0 = rf(tx, assetVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, models.AssetVersion) error); ok {
		r1 = rf(tx, assetVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreComponentRepository_GetVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersions'
type CoreComponentRepository_GetVersions_Call struct {
	*mock.Call
}

// GetVersions is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersion models.AssetVersion
func (_e *CoreComponentRepository_Expecter) GetVersions(tx interface{}, assetVersion interface{}) *CoreComponentRepository_GetVersions_Call {
	return &CoreComponentRepository_GetVersions_Call{Call: _e.mock.On("GetVersions", tx, assetVersion)}
}

func (_c *CoreComponentRepository_GetVersions_Call) Run(run func(tx *gorm.DB, assetVersion models.AssetVersion)) *CoreComponentRepository_GetVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(models.AssetVersion))
	})
	return _c
}

func (_c *CoreComponentRepository_GetVersions_Call) Return(_a0 []string, _a1 error) *CoreComponentRepository_GetVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreComponentRepository_GetVersions_Call) RunAndReturn(run func(*gorm.DB, models.AssetVersion) ([]string, error)) *CoreComponentRepository_GetVersions_Call {
	_c.Call.Return(run)
	return _c
}

// HandleStateDiff provides a mock function with given fields: tx, assetVersionName, assetID, version, oldState, newState
func (_m *CoreComponentRepository) HandleStateDiff(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, version string, oldState []models.ComponentDependency, newState []models.ComponentDependency) error {
	ret := _m.Called(tx, assetVersionName, assetID, version, oldState, newState)

	if len(ret) == 0 {
		panic("no return value specified for HandleStateDiff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string, []models.ComponentDependency, []models.ComponentDependency) error); ok {
		r0 = rf(tx, assetVersionName, assetID, version, oldState, newState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreComponentRepository_HandleStateDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleStateDiff'
type CoreComponentRepository_HandleStateDiff_Call struct {
	*mock.Call
}

// HandleStateDiff is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - version string
//   - oldState []models.ComponentDependency
//   - newState []models.ComponentDependency
func (_e *CoreComponentRepository_Expecter) HandleStateDiff(tx interface{}, assetVersionName interface{}, assetID interface{}, version interface{}, oldState interface{}, newState interface{}) *CoreComponentRepository_HandleStateDiff_Call {
	return &CoreComponentRepository_HandleStateDiff_Call{Call: _e.mock.On("HandleStateDiff", tx, assetVersionName, assetID, version, oldState, newState)}
}

func (_c *CoreComponentRepository_HandleStateDiff_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, version string, oldState []models.ComponentDependency, newState []models.ComponentDependency)) *CoreComponentRepository_HandleStateDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].(string), args[4].([]models.ComponentDependency), args[5].([]models.ComponentDependency))
	})
	return _c
}

func (_c *CoreComponentRepository_HandleStateDiff_Call) Return(_a0 error) *CoreComponentRepository_HandleStateDiff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreComponentRepository_HandleStateDiff_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, string, []models.ComponentDependency, []models.ComponentDependency) error) *CoreComponentRepository_HandleStateDiff_Call {
	_c.Call.Return(run)
	return _c
}

// LoadComponents provides a mock function with given fields: tx, assetVersionName, assetID, scanner, version
func (_m *CoreComponentRepository) LoadComponents(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, scanner string, version string) ([]models.ComponentDependency, error) {
	ret := _m.Called(tx, assetVersionName, assetID, scanner, version)

	if len(ret) == 0 {
		panic("no return value specified for LoadComponents")
	}

	var r0 []models.ComponentDependency
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string, string) ([]models.ComponentDependency, error)); ok {
		return rf(tx, assetVersionName, assetID, scanner, version)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string, string) []models.ComponentDependency); ok {
		r0 = rf(tx, assetVersionName, assetID, scanner, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ComponentDependency)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID, string, string) error); ok {
		r1 = rf(tx, assetVersionName, assetID, scanner, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreComponentRepository_LoadComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadComponents'
type CoreComponentRepository_LoadComponents_Call struct {
	*mock.Call
}

// LoadComponents is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scanner string
//   - version string
func (_e *CoreComponentRepository_Expecter) LoadComponents(tx interface{}, assetVersionName interface{}, assetID interface{}, scanner interface{}, version interface{}) *CoreComponentRepository_LoadComponents_Call {
	return &CoreComponentRepository_LoadComponents_Call{Call: _e.mock.On("LoadComponents", tx, assetVersionName, assetID, scanner, version)}
}

func (_c *CoreComponentRepository_LoadComponents_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, scanner string, version string)) *CoreComponentRepository_LoadComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *CoreComponentRepository_LoadComponents_Call) Return(_a0 []models.ComponentDependency, _a1 error) *CoreComponentRepository_LoadComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreComponentRepository_LoadComponents_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, string, string) ([]models.ComponentDependency, error)) *CoreComponentRepository_LoadComponents_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, components
func (_m *CoreComponentRepository) SaveBatch(tx *gorm.DB, components []models.Component) error {
	ret := _m.Called(tx, components)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Component) error); ok {
		r0 = rf(tx, components)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreComponentRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type CoreComponentRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - components []models.Component
func (_e *CoreComponentRepository_Expecter) SaveBatch(tx interface{}, components interface{}) *CoreComponentRepository_SaveBatch_Call {
	return &CoreComponentRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, components)}
}

func (_c *CoreComponentRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, components []models.Component)) *CoreComponentRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Component))
	})
	return _c
}

func (_c *CoreComponentRepository_SaveBatch_Call) Return(_a0 error) *CoreComponentRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreComponentRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Component) error) *CoreComponentRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreComponentRepository creates a new instance of CoreComponentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreComponentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreComponentRepository {
	mock := &CoreComponentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
