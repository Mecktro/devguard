// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// VulndbAffectedCmpRepository is an autogenerated mock type for the affectedCmpRepository type
type VulndbAffectedCmpRepository struct {
	mock.Mock
}

type VulndbAffectedCmpRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *VulndbAffectedCmpRepository) EXPECT() *VulndbAffectedCmpRepository_Expecter {
	return &VulndbAffectedCmpRepository_Expecter{mock: &_m.Mock}
}

// DeleteAll provides a mock function with given fields: tx, ecosystem
func (_m *VulndbAffectedCmpRepository) DeleteAll(tx *gorm.DB, ecosystem string) error {
	ret := _m.Called(tx, ecosystem)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, ecosystem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbAffectedCmpRepository_DeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAll'
type VulndbAffectedCmpRepository_DeleteAll_Call struct {
	*mock.Call
}

// DeleteAll is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ecosystem string
func (_e *VulndbAffectedCmpRepository_Expecter) DeleteAll(tx interface{}, ecosystem interface{}) *VulndbAffectedCmpRepository_DeleteAll_Call {
	return &VulndbAffectedCmpRepository_DeleteAll_Call{Call: _e.mock.On("DeleteAll", tx, ecosystem)}
}

func (_c *VulndbAffectedCmpRepository_DeleteAll_Call) Run(run func(tx *gorm.DB, ecosystem string)) *VulndbAffectedCmpRepository_DeleteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *VulndbAffectedCmpRepository_DeleteAll_Call) Return(_a0 error) *VulndbAffectedCmpRepository_DeleteAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbAffectedCmpRepository_DeleteAll_Call) RunAndReturn(run func(*gorm.DB, string) error) *VulndbAffectedCmpRepository_DeleteAll_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, affectedComponents
func (_m *VulndbAffectedCmpRepository) SaveBatch(tx *gorm.DB, affectedComponents []models.AffectedComponent) error {
	ret := _m.Called(tx, affectedComponents)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.AffectedComponent) error); ok {
		r0 = rf(tx, affectedComponents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulndbAffectedCmpRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type VulndbAffectedCmpRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - affectedComponents []models.AffectedComponent
func (_e *VulndbAffectedCmpRepository_Expecter) SaveBatch(tx interface{}, affectedComponents interface{}) *VulndbAffectedCmpRepository_SaveBatch_Call {
	return &VulndbAffectedCmpRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, affectedComponents)}
}

func (_c *VulndbAffectedCmpRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, affectedComponents []models.AffectedComponent)) *VulndbAffectedCmpRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.AffectedComponent))
	})
	return _c
}

func (_c *VulndbAffectedCmpRepository_SaveBatch_Call) Return(_a0 error) *VulndbAffectedCmpRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulndbAffectedCmpRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.AffectedComponent) error) *VulndbAffectedCmpRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewVulndbAffectedCmpRepository creates a new instance of VulndbAffectedCmpRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVulndbAffectedCmpRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VulndbAffectedCmpRepository {
	mock := &VulndbAffectedCmpRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
