// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// VulnAssetRepository is an autogenerated mock type for the assetRepository type
type VulnAssetRepository struct {
	mock.Mock
}

type VulnAssetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *VulnAssetRepository) EXPECT() *VulnAssetRepository_Expecter {
	return &VulnAssetRepository_Expecter{mock: &_m.Mock}
}

// GetAllAssetsFromDB provides a mock function with no fields
func (_m *VulnAssetRepository) GetAllAssetsFromDB() ([]models.Asset, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAssetsFromDB")
	}

	var r0 []models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Asset, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Asset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VulnAssetRepository_GetAllAssetsFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAssetsFromDB'
type VulnAssetRepository_GetAllAssetsFromDB_Call struct {
	*mock.Call
}

// GetAllAssetsFromDB is a helper method to define mock.On call
func (_e *VulnAssetRepository_Expecter) GetAllAssetsFromDB() *VulnAssetRepository_GetAllAssetsFromDB_Call {
	return &VulnAssetRepository_GetAllAssetsFromDB_Call{Call: _e.mock.On("GetAllAssetsFromDB")}
}

func (_c *VulnAssetRepository_GetAllAssetsFromDB_Call) Run(run func()) *VulnAssetRepository_GetAllAssetsFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VulnAssetRepository_GetAllAssetsFromDB_Call) Return(_a0 []models.Asset, _a1 error) *VulnAssetRepository_GetAllAssetsFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VulnAssetRepository_GetAllAssetsFromDB_Call) RunAndReturn(run func() ([]models.Asset, error)) *VulnAssetRepository_GetAllAssetsFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: tx, asset
func (_m *VulnAssetRepository) Update(tx *gorm.DB, asset *models.Asset) error {
	ret := _m.Called(tx, asset)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Asset) error); ok {
		r0 = rf(tx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VulnAssetRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type VulnAssetRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - tx *gorm.DB
//   - asset *models.Asset
func (_e *VulnAssetRepository_Expecter) Update(tx interface{}, asset interface{}) *VulnAssetRepository_Update_Call {
	return &VulnAssetRepository_Update_Call{Call: _e.mock.On("Update", tx, asset)}
}

func (_c *VulnAssetRepository_Update_Call) Run(run func(tx *gorm.DB, asset *models.Asset)) *VulnAssetRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Asset))
	})
	return _c
}

func (_c *VulnAssetRepository_Update_Call) Return(_a0 error) *VulnAssetRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VulnAssetRepository_Update_Call) RunAndReturn(run func(*gorm.DB, *models.Asset) error) *VulnAssetRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewVulnAssetRepository creates a new instance of VulnAssetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVulnAssetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VulnAssetRepository {
	mock := &VulnAssetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
