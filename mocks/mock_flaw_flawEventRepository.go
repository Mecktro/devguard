// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// FlawFlawEventRepository is an autogenerated mock type for the flawEventRepository type
type FlawFlawEventRepository struct {
	mock.Mock
}

type FlawFlawEventRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FlawFlawEventRepository) EXPECT() *FlawFlawEventRepository_Expecter {
	return &FlawFlawEventRepository_Expecter{mock: &_m.Mock}
}

// Save provides a mock function with given fields: db, event
func (_m *FlawFlawEventRepository) Save(db *gorm.DB, event *models.FlawEvent) error {
	ret := _m.Called(db, event)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.FlawEvent) error); ok {
		r0 = rf(db, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlawFlawEventRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type FlawFlawEventRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - db *gorm.DB
//   - event *models.FlawEvent
func (_e *FlawFlawEventRepository_Expecter) Save(db interface{}, event interface{}) *FlawFlawEventRepository_Save_Call {
	return &FlawFlawEventRepository_Save_Call{Call: _e.mock.On("Save", db, event)}
}

func (_c *FlawFlawEventRepository_Save_Call) Run(run func(db *gorm.DB, event *models.FlawEvent)) *FlawFlawEventRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.FlawEvent))
	})
	return _c
}

func (_c *FlawFlawEventRepository_Save_Call) Return(_a0 error) *FlawFlawEventRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlawFlawEventRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.FlawEvent) error) *FlawFlawEventRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: db, events
func (_m *FlawFlawEventRepository) SaveBatch(db *gorm.DB, events []models.FlawEvent) error {
	ret := _m.Called(db, events)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.FlawEvent) error); ok {
		r0 = rf(db, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlawFlawEventRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type FlawFlawEventRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - db *gorm.DB
//   - events []models.FlawEvent
func (_e *FlawFlawEventRepository_Expecter) SaveBatch(db interface{}, events interface{}) *FlawFlawEventRepository_SaveBatch_Call {
	return &FlawFlawEventRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", db, events)}
}

func (_c *FlawFlawEventRepository_SaveBatch_Call) Run(run func(db *gorm.DB, events []models.FlawEvent)) *FlawFlawEventRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.FlawEvent))
	})
	return _c
}

func (_c *FlawFlawEventRepository_SaveBatch_Call) Return(_a0 error) *FlawFlawEventRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlawFlawEventRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.FlawEvent) error) *FlawFlawEventRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewFlawFlawEventRepository creates a new instance of FlawFlawEventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlawFlawEventRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlawFlawEventRepository {
	mock := &FlawFlawEventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
