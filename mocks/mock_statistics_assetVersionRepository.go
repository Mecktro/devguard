// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// StatisticsAssetVersionRepository is an autogenerated mock type for the assetVersionRepository type
type StatisticsAssetVersionRepository struct {
	mock.Mock
}

type StatisticsAssetVersionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StatisticsAssetVersionRepository) EXPECT() *StatisticsAssetVersionRepository_Expecter {
	return &StatisticsAssetVersionRepository_Expecter{mock: &_m.Mock}
}

// GetAllAssetsVersionFromDB provides a mock function with given fields: tx
func (_m *StatisticsAssetVersionRepository) GetAllAssetsVersionFromDB(tx *gorm.DB) ([]models.AssetVersion, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAssetsVersionFromDB")
	}

	var r0 []models.AssetVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) ([]models.AssetVersion, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB) []models.AssetVersion); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssetVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsAssetVersionRepository_GetAllAssetsVersionFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAssetsVersionFromDB'
type StatisticsAssetVersionRepository_GetAllAssetsVersionFromDB_Call struct {
	*mock.Call
}

// GetAllAssetsVersionFromDB is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *StatisticsAssetVersionRepository_Expecter) GetAllAssetsVersionFromDB(tx interface{}) *StatisticsAssetVersionRepository_GetAllAssetsVersionFromDB_Call {
	return &StatisticsAssetVersionRepository_GetAllAssetsVersionFromDB_Call{Call: _e.mock.On("GetAllAssetsVersionFromDB", tx)}
}

func (_c *StatisticsAssetVersionRepository_GetAllAssetsVersionFromDB_Call) Run(run func(tx *gorm.DB)) *StatisticsAssetVersionRepository_GetAllAssetsVersionFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *StatisticsAssetVersionRepository_GetAllAssetsVersionFromDB_Call) Return(_a0 []models.AssetVersion, _a1 error) *StatisticsAssetVersionRepository_GetAllAssetsVersionFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsAssetVersionRepository_GetAllAssetsVersionFromDB_Call) RunAndReturn(run func(*gorm.DB) ([]models.AssetVersion, error)) *StatisticsAssetVersionRepository_GetAllAssetsVersionFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultAssetVersionsByProjectID provides a mock function with given fields: projectID
func (_m *StatisticsAssetVersionRepository) GetDefaultAssetVersionsByProjectID(projectID uuid.UUID) ([]models.AssetVersion, error) {
	ret := _m.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultAssetVersionsByProjectID")
	}

	var r0 []models.AssetVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.AssetVersion, error)); ok {
		return rf(projectID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.AssetVersion); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssetVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultAssetVersionsByProjectID'
type StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call struct {
	*mock.Call
}

// GetDefaultAssetVersionsByProjectID is a helper method to define mock.On call
//   - projectID uuid.UUID
func (_e *StatisticsAssetVersionRepository_Expecter) GetDefaultAssetVersionsByProjectID(projectID interface{}) *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call {
	return &StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call{Call: _e.mock.On("GetDefaultAssetVersionsByProjectID", projectID)}
}

func (_c *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call) Run(run func(projectID uuid.UUID)) *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call) Return(_a0 []models.AssetVersion, _a1 error) *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call) RunAndReturn(run func(uuid.UUID) ([]models.AssetVersion, error)) *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultAssetVersionsByProjectIDs provides a mock function with given fields: projectIDs
func (_m *StatisticsAssetVersionRepository) GetDefaultAssetVersionsByProjectIDs(projectIDs []uuid.UUID) ([]models.AssetVersion, error) {
	ret := _m.Called(projectIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultAssetVersionsByProjectIDs")
	}

	var r0 []models.AssetVersion
	var r1 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID) ([]models.AssetVersion, error)); ok {
		return rf(projectIDs)
	}
	if rf, ok := ret.Get(0).(func([]uuid.UUID) []models.AssetVersion); ok {
		r0 = rf(projectIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssetVersion)
		}
	}

	if rf, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = rf(projectIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultAssetVersionsByProjectIDs'
type StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call struct {
	*mock.Call
}

// GetDefaultAssetVersionsByProjectIDs is a helper method to define mock.On call
//   - projectIDs []uuid.UUID
func (_e *StatisticsAssetVersionRepository_Expecter) GetDefaultAssetVersionsByProjectIDs(projectIDs interface{}) *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call {
	return &StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call{Call: _e.mock.On("GetDefaultAssetVersionsByProjectIDs", projectIDs)}
}

func (_c *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call) Run(run func(projectIDs []uuid.UUID)) *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uuid.UUID))
	})
	return _c
}

func (_c *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call) Return(_a0 []models.AssetVersion, _a1 error) *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call) RunAndReturn(run func([]uuid.UUID) ([]models.AssetVersion, error)) *StatisticsAssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, asset
func (_m *StatisticsAssetVersionRepository) Save(tx *gorm.DB, asset *models.AssetVersion) error {
	ret := _m.Called(tx, asset)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.AssetVersion) error); ok {
		r0 = rf(tx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StatisticsAssetVersionRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type StatisticsAssetVersionRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - asset *models.AssetVersion
func (_e *StatisticsAssetVersionRepository_Expecter) Save(tx interface{}, asset interface{}) *StatisticsAssetVersionRepository_Save_Call {
	return &StatisticsAssetVersionRepository_Save_Call{Call: _e.mock.On("Save", tx, asset)}
}

func (_c *StatisticsAssetVersionRepository_Save_Call) Run(run func(tx *gorm.DB, asset *models.AssetVersion)) *StatisticsAssetVersionRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.AssetVersion))
	})
	return _c
}

func (_c *StatisticsAssetVersionRepository_Save_Call) Return(_a0 error) *StatisticsAssetVersionRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StatisticsAssetVersionRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.AssetVersion) error) *StatisticsAssetVersionRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatisticsAssetVersionRepository creates a new instance of StatisticsAssetVersionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatisticsAssetVersionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatisticsAssetVersionRepository {
	mock := &StatisticsAssetVersionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
