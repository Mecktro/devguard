// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	cyclonedx "github.com/CycloneDX/cyclonedx-go"
	mock "github.com/stretchr/testify/mock"

	models "github.com/l3montree-dev/devguard/internal/database/models"
)

// AssetAssetService is an autogenerated mock type for the assetService type
type AssetAssetService struct {
	mock.Mock
}

type AssetAssetService_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetAssetService) EXPECT() *AssetAssetService_Expecter {
	return &AssetAssetService_Expecter{mock: &_m.Mock}
}

// BuildSBOM provides a mock function with given fields: _a0, version, orgName, components
func (_m *AssetAssetService) BuildSBOM(_a0 models.Asset, version string, orgName string, components []models.ComponentDependency) *cyclonedx.BOM {
	ret := _m.Called(_a0, version, orgName, components)

	if len(ret) == 0 {
		panic("no return value specified for BuildSBOM")
	}

	var r0 *cyclonedx.BOM
	if rf, ok := ret.Get(0).(func(models.Asset, string, string, []models.ComponentDependency) *cyclonedx.BOM); ok {
		r0 = rf(_a0, version, orgName, components)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cyclonedx.BOM)
		}
	}

	return r0
}

// AssetAssetService_BuildSBOM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildSBOM'
type AssetAssetService_BuildSBOM_Call struct {
	*mock.Call
}

// BuildSBOM is a helper method to define mock.On call
//   - _a0 models.Asset
//   - version string
//   - orgName string
//   - components []models.ComponentDependency
func (_e *AssetAssetService_Expecter) BuildSBOM(_a0 interface{}, version interface{}, orgName interface{}, components interface{}) *AssetAssetService_BuildSBOM_Call {
	return &AssetAssetService_BuildSBOM_Call{Call: _e.mock.On("BuildSBOM", _a0, version, orgName, components)}
}

func (_c *AssetAssetService_BuildSBOM_Call) Run(run func(_a0 models.Asset, version string, orgName string, components []models.ComponentDependency)) *AssetAssetService_BuildSBOM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Asset), args[1].(string), args[2].(string), args[3].([]models.ComponentDependency))
	})
	return _c
}

func (_c *AssetAssetService_BuildSBOM_Call) Return(_a0 *cyclonedx.BOM) *AssetAssetService_BuildSBOM_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetAssetService_BuildSBOM_Call) RunAndReturn(run func(models.Asset, string, string, []models.ComponentDependency) *cyclonedx.BOM) *AssetAssetService_BuildSBOM_Call {
	_c.Call.Return(run)
	return _c
}

// BuildVeX provides a mock function with given fields: _a0, version, orgName, components, flaws
func (_m *AssetAssetService) BuildVeX(_a0 models.Asset, version string, orgName string, components []models.ComponentDependency, flaws []models.Flaw) *cyclonedx.BOM {
	ret := _m.Called(_a0, version, orgName, components, flaws)

	if len(ret) == 0 {
		panic("no return value specified for BuildVeX")
	}

	var r0 *cyclonedx.BOM
	if rf, ok := ret.Get(0).(func(models.Asset, string, string, []models.ComponentDependency, []models.Flaw) *cyclonedx.BOM); ok {
		r0 = rf(_a0, version, orgName, components, flaws)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cyclonedx.BOM)
		}
	}

	return r0
}

// AssetAssetService_BuildVeX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildVeX'
type AssetAssetService_BuildVeX_Call struct {
	*mock.Call
}

// BuildVeX is a helper method to define mock.On call
//   - _a0 models.Asset
//   - version string
//   - orgName string
//   - components []models.ComponentDependency
//   - flaws []models.Flaw
func (_e *AssetAssetService_Expecter) BuildVeX(_a0 interface{}, version interface{}, orgName interface{}, components interface{}, flaws interface{}) *AssetAssetService_BuildVeX_Call {
	return &AssetAssetService_BuildVeX_Call{Call: _e.mock.On("BuildVeX", _a0, version, orgName, components, flaws)}
}

func (_c *AssetAssetService_BuildVeX_Call) Run(run func(_a0 models.Asset, version string, orgName string, components []models.ComponentDependency, flaws []models.Flaw)) *AssetAssetService_BuildVeX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Asset), args[1].(string), args[2].(string), args[3].([]models.ComponentDependency), args[4].([]models.Flaw))
	})
	return _c
}

func (_c *AssetAssetService_BuildVeX_Call) Return(_a0 *cyclonedx.BOM) *AssetAssetService_BuildVeX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetAssetService_BuildVeX_Call) RunAndReturn(run func(models.Asset, string, string, []models.ComponentDependency, []models.Flaw) *cyclonedx.BOM) *AssetAssetService_BuildVeX_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssetRequirements provides a mock function with given fields: _a0, responsible, justification
func (_m *AssetAssetService) UpdateAssetRequirements(_a0 models.Asset, responsible string, justification string) error {
	ret := _m.Called(_a0, responsible, justification)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetRequirements")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Asset, string, string) error); ok {
		r0 = rf(_a0, responsible, justification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetAssetService_UpdateAssetRequirements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssetRequirements'
type AssetAssetService_UpdateAssetRequirements_Call struct {
	*mock.Call
}

// UpdateAssetRequirements is a helper method to define mock.On call
//   - _a0 models.Asset
//   - responsible string
//   - justification string
func (_e *AssetAssetService_Expecter) UpdateAssetRequirements(_a0 interface{}, responsible interface{}, justification interface{}) *AssetAssetService_UpdateAssetRequirements_Call {
	return &AssetAssetService_UpdateAssetRequirements_Call{Call: _e.mock.On("UpdateAssetRequirements", _a0, responsible, justification)}
}

func (_c *AssetAssetService_UpdateAssetRequirements_Call) Run(run func(_a0 models.Asset, responsible string, justification string)) *AssetAssetService_UpdateAssetRequirements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Asset), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AssetAssetService_UpdateAssetRequirements_Call) Return(_a0 error) *AssetAssetService_UpdateAssetRequirements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetAssetService_UpdateAssetRequirements_Call) RunAndReturn(run func(models.Asset, string, string) error) *AssetAssetService_UpdateAssetRequirements_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetAssetService creates a new instance of AssetAssetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetAssetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetAssetService {
	mock := &AssetAssetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
