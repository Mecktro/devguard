// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// AssetversionAssetVersionComponentsLoader is an autogenerated mock type for the assetVersionComponentsLoader type
type AssetversionAssetVersionComponentsLoader struct {
	mock.Mock
}

type AssetversionAssetVersionComponentsLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetversionAssetVersionComponentsLoader) EXPECT() *AssetversionAssetVersionComponentsLoader_Expecter {
	return &AssetversionAssetVersionComponentsLoader_Expecter{mock: &_m.Mock}
}

// GetVersions provides a mock function with given fields: tx, assetVersion
func (_m *AssetversionAssetVersionComponentsLoader) GetVersions(tx *gorm.DB, assetVersion models.AssetVersion) ([]string, error) {
	ret := _m.Called(tx, assetVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetVersions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, models.AssetVersion) ([]string, error)); ok {
		return rf(tx, assetVersion)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, models.AssetVersion) []string); ok {
		r0 = rf(tx, assetVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, models.AssetVersion) error); ok {
		r1 = rf(tx, assetVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetversionAssetVersionComponentsLoader_GetVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersions'
type AssetversionAssetVersionComponentsLoader_GetVersions_Call struct {
	*mock.Call
}

// GetVersions is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersion models.AssetVersion
func (_e *AssetversionAssetVersionComponentsLoader_Expecter) GetVersions(tx interface{}, assetVersion interface{}) *AssetversionAssetVersionComponentsLoader_GetVersions_Call {
	return &AssetversionAssetVersionComponentsLoader_GetVersions_Call{Call: _e.mock.On("GetVersions", tx, assetVersion)}
}

func (_c *AssetversionAssetVersionComponentsLoader_GetVersions_Call) Run(run func(tx *gorm.DB, assetVersion models.AssetVersion)) *AssetversionAssetVersionComponentsLoader_GetVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(models.AssetVersion))
	})
	return _c
}

func (_c *AssetversionAssetVersionComponentsLoader_GetVersions_Call) Return(_a0 []string, _a1 error) *AssetversionAssetVersionComponentsLoader_GetVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetversionAssetVersionComponentsLoader_GetVersions_Call) RunAndReturn(run func(*gorm.DB, models.AssetVersion) ([]string, error)) *AssetversionAssetVersionComponentsLoader_GetVersions_Call {
	_c.Call.Return(run)
	return _c
}

// LoadComponents provides a mock function with given fields: tx, assetVersionName, assetID, scanner, version
func (_m *AssetversionAssetVersionComponentsLoader) LoadComponents(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, scanner string, version string) ([]models.ComponentDependency, error) {
	ret := _m.Called(tx, assetVersionName, assetID, scanner, version)

	if len(ret) == 0 {
		panic("no return value specified for LoadComponents")
	}

	var r0 []models.ComponentDependency
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string, string) ([]models.ComponentDependency, error)); ok {
		return rf(tx, assetVersionName, assetID, scanner, version)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string, string) []models.ComponentDependency); ok {
		r0 = rf(tx, assetVersionName, assetID, scanner, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ComponentDependency)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID, string, string) error); ok {
		r1 = rf(tx, assetVersionName, assetID, scanner, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetversionAssetVersionComponentsLoader_LoadComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadComponents'
type AssetversionAssetVersionComponentsLoader_LoadComponents_Call struct {
	*mock.Call
}

// LoadComponents is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scanner string
//   - version string
func (_e *AssetversionAssetVersionComponentsLoader_Expecter) LoadComponents(tx interface{}, assetVersionName interface{}, assetID interface{}, scanner interface{}, version interface{}) *AssetversionAssetVersionComponentsLoader_LoadComponents_Call {
	return &AssetversionAssetVersionComponentsLoader_LoadComponents_Call{Call: _e.mock.On("LoadComponents", tx, assetVersionName, assetID, scanner, version)}
}

func (_c *AssetversionAssetVersionComponentsLoader_LoadComponents_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, scanner string, version string)) *AssetversionAssetVersionComponentsLoader_LoadComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AssetversionAssetVersionComponentsLoader_LoadComponents_Call) Return(_a0 []models.ComponentDependency, _a1 error) *AssetversionAssetVersionComponentsLoader_LoadComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetversionAssetVersionComponentsLoader_LoadComponents_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, string, string) ([]models.ComponentDependency, error)) *AssetversionAssetVersionComponentsLoader_LoadComponents_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetversionAssetVersionComponentsLoader creates a new instance of AssetversionAssetVersionComponentsLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetversionAssetVersionComponentsLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetversionAssetVersionComponentsLoader {
	mock := &AssetversionAssetVersionComponentsLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
