// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// AssetDependencyVulnRepository is an autogenerated mock type for the dependencyVulnRepository type
type AssetDependencyVulnRepository struct {
	mock.Mock
}

type AssetDependencyVulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetDependencyVulnRepository) EXPECT() *AssetDependencyVulnRepository_Expecter {
	return &AssetDependencyVulnRepository_Expecter{mock: &_m.Mock}
}

// GetAllVulnsByAssetID provides a mock function with given fields: tx, assetID
func (_m *AssetDependencyVulnRepository) GetAllVulnsByAssetID(tx *gorm.DB, assetID uuid.UUID) ([]models.DependencyVuln, error) {
	ret := _m.Called(tx, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVulnsByAssetID")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) ([]models.DependencyVuln, error)); ok {
		return rf(tx, assetID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) []models.DependencyVuln); ok {
		r0 = rf(tx, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, uuid.UUID) error); ok {
		r1 = rf(tx, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetDependencyVulnRepository_GetAllVulnsByAssetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllVulnsByAssetID'
type AssetDependencyVulnRepository_GetAllVulnsByAssetID_Call struct {
	*mock.Call
}

// GetAllVulnsByAssetID is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetID uuid.UUID
func (_e *AssetDependencyVulnRepository_Expecter) GetAllVulnsByAssetID(tx interface{}, assetID interface{}) *AssetDependencyVulnRepository_GetAllVulnsByAssetID_Call {
	return &AssetDependencyVulnRepository_GetAllVulnsByAssetID_Call{Call: _e.mock.On("GetAllVulnsByAssetID", tx, assetID)}
}

func (_c *AssetDependencyVulnRepository_GetAllVulnsByAssetID_Call) Run(run func(tx *gorm.DB, assetID uuid.UUID)) *AssetDependencyVulnRepository_GetAllVulnsByAssetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AssetDependencyVulnRepository_GetAllVulnsByAssetID_Call) Return(_a0 []models.DependencyVuln, _a1 error) *AssetDependencyVulnRepository_GetAllVulnsByAssetID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetDependencyVulnRepository_GetAllVulnsByAssetID_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) ([]models.DependencyVuln, error)) *AssetDependencyVulnRepository_GetAllVulnsByAssetID_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: txFunc
func (_m *AssetDependencyVulnRepository) Transaction(txFunc func(*gorm.DB) error) error {
	ret := _m.Called(txFunc)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetDependencyVulnRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type AssetDependencyVulnRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - txFunc func(*gorm.DB) error
func (_e *AssetDependencyVulnRepository_Expecter) Transaction(txFunc interface{}) *AssetDependencyVulnRepository_Transaction_Call {
	return &AssetDependencyVulnRepository_Transaction_Call{Call: _e.mock.On("Transaction", txFunc)}
}

func (_c *AssetDependencyVulnRepository_Transaction_Call) Run(run func(txFunc func(*gorm.DB) error)) *AssetDependencyVulnRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *AssetDependencyVulnRepository_Transaction_Call) Return(_a0 error) *AssetDependencyVulnRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetDependencyVulnRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *AssetDependencyVulnRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetDependencyVulnRepository creates a new instance of AssetDependencyVulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetDependencyVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetDependencyVulnRepository {
	mock := &AssetDependencyVulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
