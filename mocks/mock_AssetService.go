// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// AssetService is an autogenerated mock type for the AssetService type
type AssetService struct {
	mock.Mock
}

type AssetService_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetService) EXPECT() *AssetService_Expecter {
	return &AssetService_Expecter{mock: &_m.Mock}
}

// UpdateAssetRequirements provides a mock function with given fields: asset, responsible, justification
func (_m *AssetService) UpdateAssetRequirements(asset models.Asset, responsible string, justification string) error {
	ret := _m.Called(asset, responsible, justification)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetRequirements")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Asset, string, string) error); ok {
		r0 = rf(asset, responsible, justification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetService_UpdateAssetRequirements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssetRequirements'
type AssetService_UpdateAssetRequirements_Call struct {
	*mock.Call
}

// UpdateAssetRequirements is a helper method to define mock.On call
//   - asset models.Asset
//   - responsible string
//   - justification string
func (_e *AssetService_Expecter) UpdateAssetRequirements(asset interface{}, responsible interface{}, justification interface{}) *AssetService_UpdateAssetRequirements_Call {
	return &AssetService_UpdateAssetRequirements_Call{Call: _e.mock.On("UpdateAssetRequirements", asset, responsible, justification)}
}

func (_c *AssetService_UpdateAssetRequirements_Call) Run(run func(asset models.Asset, responsible string, justification string)) *AssetService_UpdateAssetRequirements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Asset), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AssetService_UpdateAssetRequirements_Call) Return(_a0 error) *AssetService_UpdateAssetRequirements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetService_UpdateAssetRequirements_Call) RunAndReturn(run func(models.Asset, string, string) error) *AssetService_UpdateAssetRequirements_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetService creates a new instance of AssetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetService {
	mock := &AssetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
