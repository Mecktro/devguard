// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// AssetversionSupplyChainRepository is an autogenerated mock type for the supplyChainRepository type
type AssetversionSupplyChainRepository struct {
	mock.Mock
}

type AssetversionSupplyChainRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetversionSupplyChainRepository) EXPECT() *AssetversionSupplyChainRepository_Expecter {
	return &AssetversionSupplyChainRepository_Expecter{mock: &_m.Mock}
}

// PercentageOfVerifiedSupplyChains provides a mock function with given fields: assetVersionName, assetID
func (_m *AssetversionSupplyChainRepository) PercentageOfVerifiedSupplyChains(assetVersionName string, assetID uuid.UUID) (float64, error) {
	ret := _m.Called(assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for PercentageOfVerifiedSupplyChains")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) (float64, error)); ok {
		return rf(assetVersionName, assetID)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) float64); ok {
		r0 = rf(assetVersionName, assetID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = rf(assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetversionSupplyChainRepository_PercentageOfVerifiedSupplyChains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PercentageOfVerifiedSupplyChains'
type AssetversionSupplyChainRepository_PercentageOfVerifiedSupplyChains_Call struct {
	*mock.Call
}

// PercentageOfVerifiedSupplyChains is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
func (_e *AssetversionSupplyChainRepository_Expecter) PercentageOfVerifiedSupplyChains(assetVersionName interface{}, assetID interface{}) *AssetversionSupplyChainRepository_PercentageOfVerifiedSupplyChains_Call {
	return &AssetversionSupplyChainRepository_PercentageOfVerifiedSupplyChains_Call{Call: _e.mock.On("PercentageOfVerifiedSupplyChains", assetVersionName, assetID)}
}

func (_c *AssetversionSupplyChainRepository_PercentageOfVerifiedSupplyChains_Call) Run(run func(assetVersionName string, assetID uuid.UUID)) *AssetversionSupplyChainRepository_PercentageOfVerifiedSupplyChains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AssetversionSupplyChainRepository_PercentageOfVerifiedSupplyChains_Call) Return(_a0 float64, _a1 error) *AssetversionSupplyChainRepository_PercentageOfVerifiedSupplyChains_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetversionSupplyChainRepository_PercentageOfVerifiedSupplyChains_Call) RunAndReturn(run func(string, uuid.UUID) (float64, error)) *AssetversionSupplyChainRepository_PercentageOfVerifiedSupplyChains_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetversionSupplyChainRepository creates a new instance of AssetversionSupplyChainRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetversionSupplyChainRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetversionSupplyChainRepository {
	mock := &AssetversionSupplyChainRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
