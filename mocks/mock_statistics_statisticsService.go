// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	statistics "github.com/l3montree-dev/devguard/internal/core/statistics"
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// StatisticsStatisticsService is an autogenerated mock type for the statisticsService type
type StatisticsStatisticsService struct {
	mock.Mock
}

type StatisticsStatisticsService_Expecter struct {
	mock *mock.Mock
}

func (_m *StatisticsStatisticsService) EXPECT() *StatisticsStatisticsService_Expecter {
	return &StatisticsStatisticsService_Expecter{mock: &_m.Mock}
}

// GetAssetRiskDistribution provides a mock function with given fields: assetID, assetName
func (_m *StatisticsStatisticsService) GetAssetRiskDistribution(assetID uuid.UUID, assetName string) (models.AssetRiskDistribution, error) {
	ret := _m.Called(assetID, assetName)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetRiskDistribution")
	}

	var r0 models.AssetRiskDistribution
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (models.AssetRiskDistribution, error)); ok {
		return rf(assetID, assetName)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) models.AssetRiskDistribution); ok {
		r0 = rf(assetID, assetName)
	} else {
		r0 = ret.Get(0).(models.AssetRiskDistribution)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(assetID, assetName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsStatisticsService_GetAssetRiskDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetRiskDistribution'
type StatisticsStatisticsService_GetAssetRiskDistribution_Call struct {
	*mock.Call
}

// GetAssetRiskDistribution is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - assetName string
func (_e *StatisticsStatisticsService_Expecter) GetAssetRiskDistribution(assetID interface{}, assetName interface{}) *StatisticsStatisticsService_GetAssetRiskDistribution_Call {
	return &StatisticsStatisticsService_GetAssetRiskDistribution_Call{Call: _e.mock.On("GetAssetRiskDistribution", assetID, assetName)}
}

func (_c *StatisticsStatisticsService_GetAssetRiskDistribution_Call) Run(run func(assetID uuid.UUID, assetName string)) *StatisticsStatisticsService_GetAssetRiskDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *StatisticsStatisticsService_GetAssetRiskDistribution_Call) Return(_a0 models.AssetRiskDistribution, _a1 error) *StatisticsStatisticsService_GetAssetRiskDistribution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsStatisticsService_GetAssetRiskDistribution_Call) RunAndReturn(run func(uuid.UUID, string) (models.AssetRiskDistribution, error)) *StatisticsStatisticsService_GetAssetRiskDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetRiskHistory provides a mock function with given fields: assetID, start, end
func (_m *StatisticsStatisticsService) GetAssetRiskHistory(assetID uuid.UUID, start time.Time, end time.Time) ([]models.AssetRiskHistory, error) {
	ret := _m.Called(assetID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetRiskHistory")
	}

	var r0 []models.AssetRiskHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) ([]models.AssetRiskHistory, error)); ok {
		return rf(assetID, start, end)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) []models.AssetRiskHistory); ok {
		r0 = rf(assetID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssetRiskHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, time.Time, time.Time) error); ok {
		r1 = rf(assetID, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsStatisticsService_GetAssetRiskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetRiskHistory'
type StatisticsStatisticsService_GetAssetRiskHistory_Call struct {
	*mock.Call
}

// GetAssetRiskHistory is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - start time.Time
//   - end time.Time
func (_e *StatisticsStatisticsService_Expecter) GetAssetRiskHistory(assetID interface{}, start interface{}, end interface{}) *StatisticsStatisticsService_GetAssetRiskHistory_Call {
	return &StatisticsStatisticsService_GetAssetRiskHistory_Call{Call: _e.mock.On("GetAssetRiskHistory", assetID, start, end)}
}

func (_c *StatisticsStatisticsService_GetAssetRiskHistory_Call) Run(run func(assetID uuid.UUID, start time.Time, end time.Time)) *StatisticsStatisticsService_GetAssetRiskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *StatisticsStatisticsService_GetAssetRiskHistory_Call) Return(_a0 []models.AssetRiskHistory, _a1 error) *StatisticsStatisticsService_GetAssetRiskHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsStatisticsService_GetAssetRiskHistory_Call) RunAndReturn(run func(uuid.UUID, time.Time, time.Time) ([]models.AssetRiskHistory, error)) *StatisticsStatisticsService_GetAssetRiskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetAverageFixingTime provides a mock function with given fields: assetID, severity
func (_m *StatisticsStatisticsService) GetAverageFixingTime(assetID uuid.UUID, severity string) (time.Duration, error) {
	ret := _m.Called(assetID, severity)

	if len(ret) == 0 {
		panic("no return value specified for GetAverageFixingTime")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (time.Duration, error)); ok {
		return rf(assetID, severity)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) time.Duration); ok {
		r0 = rf(assetID, severity)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(assetID, severity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsStatisticsService_GetAverageFixingTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAverageFixingTime'
type StatisticsStatisticsService_GetAverageFixingTime_Call struct {
	*mock.Call
}

// GetAverageFixingTime is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - severity string
func (_e *StatisticsStatisticsService_Expecter) GetAverageFixingTime(assetID interface{}, severity interface{}) *StatisticsStatisticsService_GetAverageFixingTime_Call {
	return &StatisticsStatisticsService_GetAverageFixingTime_Call{Call: _e.mock.On("GetAverageFixingTime", assetID, severity)}
}

func (_c *StatisticsStatisticsService_GetAverageFixingTime_Call) Run(run func(assetID uuid.UUID, severity string)) *StatisticsStatisticsService_GetAverageFixingTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *StatisticsStatisticsService_GetAverageFixingTime_Call) Return(_a0 time.Duration, _a1 error) *StatisticsStatisticsService_GetAverageFixingTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsStatisticsService_GetAverageFixingTime_Call) RunAndReturn(run func(uuid.UUID, string) (time.Duration, error)) *StatisticsStatisticsService_GetAverageFixingTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentRisk provides a mock function with given fields: assetID
func (_m *StatisticsStatisticsService) GetComponentRisk(assetID uuid.UUID) (map[string]float64, error) {
	ret := _m.Called(assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentRisk")
	}

	var r0 map[string]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (map[string]float64, error)); ok {
		return rf(assetID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) map[string]float64); ok {
		r0 = rf(assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsStatisticsService_GetComponentRisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentRisk'
type StatisticsStatisticsService_GetComponentRisk_Call struct {
	*mock.Call
}

// GetComponentRisk is a helper method to define mock.On call
//   - assetID uuid.UUID
func (_e *StatisticsStatisticsService_Expecter) GetComponentRisk(assetID interface{}) *StatisticsStatisticsService_GetComponentRisk_Call {
	return &StatisticsStatisticsService_GetComponentRisk_Call{Call: _e.mock.On("GetComponentRisk", assetID)}
}

func (_c *StatisticsStatisticsService_GetComponentRisk_Call) Run(run func(assetID uuid.UUID)) *StatisticsStatisticsService_GetComponentRisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *StatisticsStatisticsService_GetComponentRisk_Call) Return(_a0 map[string]float64, _a1 error) *StatisticsStatisticsService_GetComponentRisk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsStatisticsService_GetComponentRisk_Call) RunAndReturn(run func(uuid.UUID) (map[string]float64, error)) *StatisticsStatisticsService_GetComponentRisk_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyCountPerScanType provides a mock function with given fields: assetID
func (_m *StatisticsStatisticsService) GetDependencyCountPerScanType(assetID uuid.UUID) (map[string]int, error) {
	ret := _m.Called(assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyCountPerScanType")
	}

	var r0 map[string]int
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (map[string]int, error)); ok {
		return rf(assetID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) map[string]int); ok {
		r0 = rf(assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsStatisticsService_GetDependencyCountPerScanType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyCountPerScanType'
type StatisticsStatisticsService_GetDependencyCountPerScanType_Call struct {
	*mock.Call
}

// GetDependencyCountPerScanType is a helper method to define mock.On call
//   - assetID uuid.UUID
func (_e *StatisticsStatisticsService_Expecter) GetDependencyCountPerScanType(assetID interface{}) *StatisticsStatisticsService_GetDependencyCountPerScanType_Call {
	return &StatisticsStatisticsService_GetDependencyCountPerScanType_Call{Call: _e.mock.On("GetDependencyCountPerScanType", assetID)}
}

func (_c *StatisticsStatisticsService_GetDependencyCountPerScanType_Call) Run(run func(assetID uuid.UUID)) *StatisticsStatisticsService_GetDependencyCountPerScanType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *StatisticsStatisticsService_GetDependencyCountPerScanType_Call) Return(_a0 map[string]int, _a1 error) *StatisticsStatisticsService_GetDependencyCountPerScanType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsStatisticsService_GetDependencyCountPerScanType_Call) RunAndReturn(run func(uuid.UUID) (map[string]int, error)) *StatisticsStatisticsService_GetDependencyCountPerScanType_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlawAggregationStateAndChangeSince provides a mock function with given fields: assetID, calculateChangeTo
func (_m *StatisticsStatisticsService) GetFlawAggregationStateAndChangeSince(assetID uuid.UUID, calculateChangeTo time.Time) (statistics.FlawAggregationStateAndChange, error) {
	ret := _m.Called(assetID, calculateChangeTo)

	if len(ret) == 0 {
		panic("no return value specified for GetFlawAggregationStateAndChangeSince")
	}

	var r0 statistics.FlawAggregationStateAndChange
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Time) (statistics.FlawAggregationStateAndChange, error)); ok {
		return rf(assetID, calculateChangeTo)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Time) statistics.FlawAggregationStateAndChange); ok {
		r0 = rf(assetID, calculateChangeTo)
	} else {
		r0 = ret.Get(0).(statistics.FlawAggregationStateAndChange)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, time.Time) error); ok {
		r1 = rf(assetID, calculateChangeTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsStatisticsService_GetFlawAggregationStateAndChangeSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlawAggregationStateAndChangeSince'
type StatisticsStatisticsService_GetFlawAggregationStateAndChangeSince_Call struct {
	*mock.Call
}

// GetFlawAggregationStateAndChangeSince is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - calculateChangeTo time.Time
func (_e *StatisticsStatisticsService_Expecter) GetFlawAggregationStateAndChangeSince(assetID interface{}, calculateChangeTo interface{}) *StatisticsStatisticsService_GetFlawAggregationStateAndChangeSince_Call {
	return &StatisticsStatisticsService_GetFlawAggregationStateAndChangeSince_Call{Call: _e.mock.On("GetFlawAggregationStateAndChangeSince", assetID, calculateChangeTo)}
}

func (_c *StatisticsStatisticsService_GetFlawAggregationStateAndChangeSince_Call) Run(run func(assetID uuid.UUID, calculateChangeTo time.Time)) *StatisticsStatisticsService_GetFlawAggregationStateAndChangeSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(time.Time))
	})
	return _c
}

func (_c *StatisticsStatisticsService_GetFlawAggregationStateAndChangeSince_Call) Return(_a0 statistics.FlawAggregationStateAndChange, _a1 error) *StatisticsStatisticsService_GetFlawAggregationStateAndChangeSince_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsStatisticsService_GetFlawAggregationStateAndChangeSince_Call) RunAndReturn(run func(uuid.UUID, time.Time) (statistics.FlawAggregationStateAndChange, error)) *StatisticsStatisticsService_GetFlawAggregationStateAndChangeSince_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlawCountByScannerId provides a mock function with given fields: assetID
func (_m *StatisticsStatisticsService) GetFlawCountByScannerId(assetID uuid.UUID) (map[string]int, error) {
	ret := _m.Called(assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetFlawCountByScannerId")
	}

	var r0 map[string]int
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (map[string]int, error)); ok {
		return rf(assetID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) map[string]int); ok {
		r0 = rf(assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsStatisticsService_GetFlawCountByScannerId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlawCountByScannerId'
type StatisticsStatisticsService_GetFlawCountByScannerId_Call struct {
	*mock.Call
}

// GetFlawCountByScannerId is a helper method to define mock.On call
//   - assetID uuid.UUID
func (_e *StatisticsStatisticsService_Expecter) GetFlawCountByScannerId(assetID interface{}) *StatisticsStatisticsService_GetFlawCountByScannerId_Call {
	return &StatisticsStatisticsService_GetFlawCountByScannerId_Call{Call: _e.mock.On("GetFlawCountByScannerId", assetID)}
}

func (_c *StatisticsStatisticsService_GetFlawCountByScannerId_Call) Run(run func(assetID uuid.UUID)) *StatisticsStatisticsService_GetFlawCountByScannerId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *StatisticsStatisticsService_GetFlawCountByScannerId_Call) Return(_a0 map[string]int, _a1 error) *StatisticsStatisticsService_GetFlawCountByScannerId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsStatisticsService_GetFlawCountByScannerId_Call) RunAndReturn(run func(uuid.UUID) (map[string]int, error)) *StatisticsStatisticsService_GetFlawCountByScannerId_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectRiskHistory provides a mock function with given fields: projectID, start, end
func (_m *StatisticsStatisticsService) GetProjectRiskHistory(projectID uuid.UUID, start time.Time, end time.Time) ([]models.ProjectRiskHistory, error) {
	ret := _m.Called(projectID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectRiskHistory")
	}

	var r0 []models.ProjectRiskHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) ([]models.ProjectRiskHistory, error)); ok {
		return rf(projectID, start, end)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) []models.ProjectRiskHistory); ok {
		r0 = rf(projectID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProjectRiskHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, time.Time, time.Time) error); ok {
		r1 = rf(projectID, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsStatisticsService_GetProjectRiskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectRiskHistory'
type StatisticsStatisticsService_GetProjectRiskHistory_Call struct {
	*mock.Call
}

// GetProjectRiskHistory is a helper method to define mock.On call
//   - projectID uuid.UUID
//   - start time.Time
//   - end time.Time
func (_e *StatisticsStatisticsService_Expecter) GetProjectRiskHistory(projectID interface{}, start interface{}, end interface{}) *StatisticsStatisticsService_GetProjectRiskHistory_Call {
	return &StatisticsStatisticsService_GetProjectRiskHistory_Call{Call: _e.mock.On("GetProjectRiskHistory", projectID, start, end)}
}

func (_c *StatisticsStatisticsService_GetProjectRiskHistory_Call) Run(run func(projectID uuid.UUID, start time.Time, end time.Time)) *StatisticsStatisticsService_GetProjectRiskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *StatisticsStatisticsService_GetProjectRiskHistory_Call) Return(_a0 []models.ProjectRiskHistory, _a1 error) *StatisticsStatisticsService_GetProjectRiskHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsStatisticsService_GetProjectRiskHistory_Call) RunAndReturn(run func(uuid.UUID, time.Time, time.Time) ([]models.ProjectRiskHistory, error)) *StatisticsStatisticsService_GetProjectRiskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssetRiskAggregation provides a mock function with given fields: assetID, start, end, updateProject
func (_m *StatisticsStatisticsService) UpdateAssetRiskAggregation(assetID uuid.UUID, start time.Time, end time.Time, updateProject bool) error {
	ret := _m.Called(assetID, start, end, updateProject)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetRiskAggregation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time, bool) error); ok {
		r0 = rf(assetID, start, end, updateProject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StatisticsStatisticsService_UpdateAssetRiskAggregation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssetRiskAggregation'
type StatisticsStatisticsService_UpdateAssetRiskAggregation_Call struct {
	*mock.Call
}

// UpdateAssetRiskAggregation is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - start time.Time
//   - end time.Time
//   - updateProject bool
func (_e *StatisticsStatisticsService_Expecter) UpdateAssetRiskAggregation(assetID interface{}, start interface{}, end interface{}, updateProject interface{}) *StatisticsStatisticsService_UpdateAssetRiskAggregation_Call {
	return &StatisticsStatisticsService_UpdateAssetRiskAggregation_Call{Call: _e.mock.On("UpdateAssetRiskAggregation", assetID, start, end, updateProject)}
}

func (_c *StatisticsStatisticsService_UpdateAssetRiskAggregation_Call) Run(run func(assetID uuid.UUID, start time.Time, end time.Time, updateProject bool)) *StatisticsStatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(time.Time), args[2].(time.Time), args[3].(bool))
	})
	return _c
}

func (_c *StatisticsStatisticsService_UpdateAssetRiskAggregation_Call) Return(_a0 error) *StatisticsStatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StatisticsStatisticsService_UpdateAssetRiskAggregation_Call) RunAndReturn(run func(uuid.UUID, time.Time, time.Time, bool) error) *StatisticsStatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatisticsStatisticsService creates a new instance of StatisticsStatisticsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatisticsStatisticsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatisticsStatisticsService {
	mock := &StatisticsStatisticsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
