// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// ScanStatisticsService is an autogenerated mock type for the statisticsService type
type ScanStatisticsService struct {
	mock.Mock
}

type ScanStatisticsService_Expecter struct {
	mock *mock.Mock
}

func (_m *ScanStatisticsService) EXPECT() *ScanStatisticsService_Expecter {
	return &ScanStatisticsService_Expecter{mock: &_m.Mock}
}

// UpdateAssetRiskAggregation provides a mock function with given fields: assetVersion, assetID, begin, end, updateProject
func (_m *ScanStatisticsService) UpdateAssetRiskAggregation(assetVersion *models.AssetVersion, assetID uuid.UUID, begin time.Time, end time.Time, updateProject bool) error {
	ret := _m.Called(assetVersion, assetID, begin, end, updateProject)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetRiskAggregation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AssetVersion, uuid.UUID, time.Time, time.Time, bool) error); ok {
		r0 = rf(assetVersion, assetID, begin, end, updateProject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanStatisticsService_UpdateAssetRiskAggregation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssetRiskAggregation'
type ScanStatisticsService_UpdateAssetRiskAggregation_Call struct {
	*mock.Call
}

// UpdateAssetRiskAggregation is a helper method to define mock.On call
//   - assetVersion *models.AssetVersion
//   - assetID uuid.UUID
//   - begin time.Time
//   - end time.Time
//   - updateProject bool
func (_e *ScanStatisticsService_Expecter) UpdateAssetRiskAggregation(assetVersion interface{}, assetID interface{}, begin interface{}, end interface{}, updateProject interface{}) *ScanStatisticsService_UpdateAssetRiskAggregation_Call {
	return &ScanStatisticsService_UpdateAssetRiskAggregation_Call{Call: _e.mock.On("UpdateAssetRiskAggregation", assetVersion, assetID, begin, end, updateProject)}
}

func (_c *ScanStatisticsService_UpdateAssetRiskAggregation_Call) Run(run func(assetVersion *models.AssetVersion, assetID uuid.UUID, begin time.Time, end time.Time, updateProject bool)) *ScanStatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.AssetVersion), args[1].(uuid.UUID), args[2].(time.Time), args[3].(time.Time), args[4].(bool))
	})
	return _c
}

func (_c *ScanStatisticsService_UpdateAssetRiskAggregation_Call) Return(_a0 error) *ScanStatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScanStatisticsService_UpdateAssetRiskAggregation_Call) RunAndReturn(run func(*models.AssetVersion, uuid.UUID, time.Time, time.Time, bool) error) *ScanStatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Return(run)
	return _c
}

// NewScanStatisticsService creates a new instance of ScanStatisticsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScanStatisticsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScanStatisticsService {
	mock := &ScanStatisticsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
