// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/l3montree-dev/devguard/internal/database/models"
)

// IntegrationsAggregatedVulnRepository is an autogenerated mock type for the aggregatedVulnRepository type
type IntegrationsAggregatedVulnRepository struct {
	mock.Mock
}

type IntegrationsAggregatedVulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IntegrationsAggregatedVulnRepository) EXPECT() *IntegrationsAggregatedVulnRepository_Expecter {
	return &IntegrationsAggregatedVulnRepository_Expecter{mock: &_m.Mock}
}

// FindByTicketID provides a mock function with given fields: tx, ticketID
func (_m *IntegrationsAggregatedVulnRepository) FindByTicketID(tx *gorm.DB, ticketID string) (models.Vuln, error) {
	ret := _m.Called(tx, ticketID)

	if len(ret) == 0 {
		panic("no return value specified for FindByTicketID")
	}

	var r0 models.Vuln
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (models.Vuln, error)); ok {
		return rf(tx, ticketID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) models.Vuln); ok {
		r0 = rf(tx, ticketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Vuln)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, ticketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntegrationsAggregatedVulnRepository_FindByTicketID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTicketID'
type IntegrationsAggregatedVulnRepository_FindByTicketID_Call struct {
	*mock.Call
}

// FindByTicketID is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ticketID string
func (_e *IntegrationsAggregatedVulnRepository_Expecter) FindByTicketID(tx interface{}, ticketID interface{}) *IntegrationsAggregatedVulnRepository_FindByTicketID_Call {
	return &IntegrationsAggregatedVulnRepository_FindByTicketID_Call{Call: _e.mock.On("FindByTicketID", tx, ticketID)}
}

func (_c *IntegrationsAggregatedVulnRepository_FindByTicketID_Call) Run(run func(tx *gorm.DB, ticketID string)) *IntegrationsAggregatedVulnRepository_FindByTicketID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *IntegrationsAggregatedVulnRepository_FindByTicketID_Call) Return(_a0 models.Vuln, _a1 error) *IntegrationsAggregatedVulnRepository_FindByTicketID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntegrationsAggregatedVulnRepository_FindByTicketID_Call) RunAndReturn(run func(*gorm.DB, string) (models.Vuln, error)) *IntegrationsAggregatedVulnRepository_FindByTicketID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgFromVulnID provides a mock function with given fields: tx, vulnID
func (_m *IntegrationsAggregatedVulnRepository) GetOrgFromVulnID(tx *gorm.DB, vulnID string) (models.Org, error) {
	ret := _m.Called(tx, vulnID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgFromVulnID")
	}

	var r0 models.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (models.Org, error)); ok {
		return rf(tx, vulnID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) models.Org); ok {
		r0 = rf(tx, vulnID)
	} else {
		r0 = ret.Get(0).(models.Org)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, vulnID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntegrationsAggregatedVulnRepository_GetOrgFromVulnID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgFromVulnID'
type IntegrationsAggregatedVulnRepository_GetOrgFromVulnID_Call struct {
	*mock.Call
}

// GetOrgFromVulnID is a helper method to define mock.On call
//   - tx *gorm.DB
//   - vulnID string
func (_e *IntegrationsAggregatedVulnRepository_Expecter) GetOrgFromVulnID(tx interface{}, vulnID interface{}) *IntegrationsAggregatedVulnRepository_GetOrgFromVulnID_Call {
	return &IntegrationsAggregatedVulnRepository_GetOrgFromVulnID_Call{Call: _e.mock.On("GetOrgFromVulnID", tx, vulnID)}
}

func (_c *IntegrationsAggregatedVulnRepository_GetOrgFromVulnID_Call) Run(run func(tx *gorm.DB, vulnID string)) *IntegrationsAggregatedVulnRepository_GetOrgFromVulnID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *IntegrationsAggregatedVulnRepository_GetOrgFromVulnID_Call) Return(_a0 models.Org, _a1 error) *IntegrationsAggregatedVulnRepository_GetOrgFromVulnID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntegrationsAggregatedVulnRepository_GetOrgFromVulnID_Call) RunAndReturn(run func(*gorm.DB, string) (models.Org, error)) *IntegrationsAggregatedVulnRepository_GetOrgFromVulnID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: db, vuln
func (_m *IntegrationsAggregatedVulnRepository) Save(db *gorm.DB, vuln *models.Vuln) error {
	ret := _m.Called(db, vuln)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Vuln) error); ok {
		r0 = rf(db, vuln)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IntegrationsAggregatedVulnRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type IntegrationsAggregatedVulnRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - db *gorm.DB
//   - vuln *models.Vuln
func (_e *IntegrationsAggregatedVulnRepository_Expecter) Save(db interface{}, vuln interface{}) *IntegrationsAggregatedVulnRepository_Save_Call {
	return &IntegrationsAggregatedVulnRepository_Save_Call{Call: _e.mock.On("Save", db, vuln)}
}

func (_c *IntegrationsAggregatedVulnRepository_Save_Call) Run(run func(db *gorm.DB, vuln *models.Vuln)) *IntegrationsAggregatedVulnRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Vuln))
	})
	return _c
}

func (_c *IntegrationsAggregatedVulnRepository_Save_Call) Return(_a0 error) *IntegrationsAggregatedVulnRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IntegrationsAggregatedVulnRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.Vuln) error) *IntegrationsAggregatedVulnRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: fn
func (_m *IntegrationsAggregatedVulnRepository) Transaction(fn func(*gorm.DB) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IntegrationsAggregatedVulnRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type IntegrationsAggregatedVulnRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fn func(*gorm.DB) error
func (_e *IntegrationsAggregatedVulnRepository_Expecter) Transaction(fn interface{}) *IntegrationsAggregatedVulnRepository_Transaction_Call {
	return &IntegrationsAggregatedVulnRepository_Transaction_Call{Call: _e.mock.On("Transaction", fn)}
}

func (_c *IntegrationsAggregatedVulnRepository_Transaction_Call) Run(run func(fn func(*gorm.DB) error)) *IntegrationsAggregatedVulnRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *IntegrationsAggregatedVulnRepository_Transaction_Call) Return(_a0 error) *IntegrationsAggregatedVulnRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IntegrationsAggregatedVulnRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *IntegrationsAggregatedVulnRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewIntegrationsAggregatedVulnRepository creates a new instance of IntegrationsAggregatedVulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntegrationsAggregatedVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntegrationsAggregatedVulnRepository {
	mock := &IntegrationsAggregatedVulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
