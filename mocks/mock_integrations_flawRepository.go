// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/l3montree-dev/devguard/internal/database/models"
)

// IntegrationsDependencyVulnRepository is an autogenerated mock type for the dependencyVulnRepository type
type IntegrationsDependencyVulnRepository struct {
	mock.Mock
}

type IntegrationsDependencyVulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IntegrationsDependencyVulnRepository) EXPECT() *IntegrationsDependencyVulnRepository_Expecter {
	return &IntegrationsDependencyVulnRepository_Expecter{mock: &_m.Mock}
}

// FindByTicketID provides a mock function with given fields: tx, ticketID
func (_m *IntegrationsDependencyVulnRepository) FindByTicketID(tx *gorm.DB, ticketID string) (models.DependencyVulnerability, error) {
	ret := _m.Called(tx, ticketID)

	if len(ret) == 0 {
		panic("no return value specified for FindByTicketID")
	}

	var r0 models.DependencyVulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (models.DependencyVulnerability, error)); ok {
		return rf(tx, ticketID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) models.DependencyVulnerability); ok {
		r0 = rf(tx, ticketID)
	} else {
		r0 = ret.Get(0).(models.DependencyVulnerability)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, ticketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntegrationsDependencyVulnRepository_FindByTicketID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTicketID'
type IntegrationsDependencyVulnRepository_FindByTicketID_Call struct {
	*mock.Call
}

// FindByTicketID is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ticketID string
func (_e *IntegrationsDependencyVulnRepository_Expecter) FindByTicketID(tx interface{}, ticketID interface{}) *IntegrationsDependencyVulnRepository_FindByTicketID_Call {
	return &IntegrationsDependencyVulnRepository_FindByTicketID_Call{Call: _e.mock.On("FindByTicketID", tx, ticketID)}
}

func (_c *IntegrationsDependencyVulnRepository_FindByTicketID_Call) Run(run func(tx *gorm.DB, ticketID string)) *IntegrationsDependencyVulnRepository_FindByTicketID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_FindByTicketID_Call) Return(_a0 models.DependencyVulnerability, _a1 error) *IntegrationsDependencyVulnRepository_FindByTicketID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_FindByTicketID_Call) RunAndReturn(run func(*gorm.DB, string) (models.DependencyVulnerability, error)) *IntegrationsDependencyVulnRepository_FindByTicketID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgFromDependencyVulnID provides a mock function with given fields: tx, dependencyVulnID
func (_m *IntegrationsDependencyVulnRepository) GetOrgFromDependencyVulnID(tx *gorm.DB, dependencyVulnID string) (models.Org, error) {
	ret := _m.Called(tx, dependencyVulnID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgFromDependencyVulnID")
	}

	var r0 models.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (models.Org, error)); ok {
		return rf(tx, dependencyVulnID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) models.Org); ok {
		r0 = rf(tx, dependencyVulnID)
	} else {
		r0 = ret.Get(0).(models.Org)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, dependencyVulnID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntegrationsDependencyVulnRepository_GetOrgFromDependencyVulnID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgFromDependencyVulnID'
type IntegrationsDependencyVulnRepository_GetOrgFromDependencyVulnID_Call struct {
	*mock.Call
}

// GetOrgFromDependencyVulnID is a helper method to define mock.On call
//   - tx *gorm.DB
//   - dependencyVulnID string
func (_e *IntegrationsDependencyVulnRepository_Expecter) GetOrgFromDependencyVulnID(tx interface{}, dependencyVulnID interface{}) *IntegrationsDependencyVulnRepository_GetOrgFromDependencyVulnID_Call {
	return &IntegrationsDependencyVulnRepository_GetOrgFromDependencyVulnID_Call{Call: _e.mock.On("GetOrgFromDependencyVulnID", tx, dependencyVulnID)}
}

func (_c *IntegrationsDependencyVulnRepository_GetOrgFromDependencyVulnID_Call) Run(run func(tx *gorm.DB, dependencyVulnID string)) *IntegrationsDependencyVulnRepository_GetOrgFromDependencyVulnID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_GetOrgFromDependencyVulnID_Call) Return(_a0 models.Org, _a1 error) *IntegrationsDependencyVulnRepository_GetOrgFromDependencyVulnID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_GetOrgFromDependencyVulnID_Call) RunAndReturn(run func(*gorm.DB, string) (models.Org, error)) *IntegrationsDependencyVulnRepository_GetOrgFromDependencyVulnID_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *IntegrationsDependencyVulnRepository) Read(id string) (models.DependencyVulnerability, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.DependencyVulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.DependencyVulnerability, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.DependencyVulnerability); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.DependencyVulnerability)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntegrationsDependencyVulnRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type IntegrationsDependencyVulnRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *IntegrationsDependencyVulnRepository_Expecter) Read(id interface{}) *IntegrationsDependencyVulnRepository_Read_Call {
	return &IntegrationsDependencyVulnRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *IntegrationsDependencyVulnRepository_Read_Call) Run(run func(id string)) *IntegrationsDependencyVulnRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_Read_Call) Return(_a0 models.DependencyVulnerability, _a1 error) *IntegrationsDependencyVulnRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_Read_Call) RunAndReturn(run func(string) (models.DependencyVulnerability, error)) *IntegrationsDependencyVulnRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: db, dependencyVuln
func (_m *IntegrationsDependencyVulnRepository) Save(db *gorm.DB, dependencyVuln *models.DependencyVulnerability) error {
	ret := _m.Called(db, dependencyVuln)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.DependencyVulnerability) error); ok {
		r0 = rf(db, dependencyVuln)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IntegrationsDependencyVulnRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type IntegrationsDependencyVulnRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - db *gorm.DB
//   - dependencyVuln *models.DependencyVuln
func (_e *IntegrationsDependencyVulnRepository_Expecter) Save(db interface{}, dependencyVuln interface{}) *IntegrationsDependencyVulnRepository_Save_Call {
	return &IntegrationsDependencyVulnRepository_Save_Call{Call: _e.mock.On("Save", db, dependencyVuln)}
}

func (_c *IntegrationsDependencyVulnRepository_Save_Call) Run(run func(db *gorm.DB, dependencyVuln *models.DependencyVulnerability)) *IntegrationsDependencyVulnRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.DependencyVulnerability))
	})
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_Save_Call) Return(_a0 error) *IntegrationsDependencyVulnRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.DependencyVulnerability) error) *IntegrationsDependencyVulnRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: fn
func (_m *IntegrationsDependencyVulnRepository) Transaction(fn func(*gorm.DB) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IntegrationsDependencyVulnRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type IntegrationsDependencyVulnRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fn func(*gorm.DB) error
func (_e *IntegrationsDependencyVulnRepository_Expecter) Transaction(fn interface{}) *IntegrationsDependencyVulnRepository_Transaction_Call {
	return &IntegrationsDependencyVulnRepository_Transaction_Call{Call: _e.mock.On("Transaction", fn)}
}

func (_c *IntegrationsDependencyVulnRepository_Transaction_Call) Run(run func(fn func(*gorm.DB) error)) *IntegrationsDependencyVulnRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_Transaction_Call) Return(_a0 error) *IntegrationsDependencyVulnRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *IntegrationsDependencyVulnRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewIntegrationsDependencyVulnRepository creates a new instance of IntegrationsDependencyVulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntegrationsDependencyVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntegrationsDependencyVulnRepository {
	mock := &IntegrationsDependencyVulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
