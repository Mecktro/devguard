// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// AssetversionFirstPartyVulnRepository is an autogenerated mock type for the firstPartyVulnRepository type
type AssetversionFirstPartyVulnRepository struct {
	mock.Mock
}

type AssetversionFirstPartyVulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetversionFirstPartyVulnRepository) EXPECT() *AssetversionFirstPartyVulnRepository_Expecter {
	return &AssetversionFirstPartyVulnRepository_Expecter{mock: &_m.Mock}
}

// ListByScanner provides a mock function with given fields: assetVersionName, assetID, scannerID
func (_m *AssetversionFirstPartyVulnRepository) ListByScanner(assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.FirstPartyVulnerability, error) {
	ret := _m.Called(assetVersionName, assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for ListByScanner")
	}

	var r0 []models.FirstPartyVulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, string) ([]models.FirstPartyVulnerability, error)); ok {
		return rf(assetVersionName, assetID, scannerID)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, string) []models.FirstPartyVulnerability); ok {
		r0 = rf(assetVersionName, assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FirstPartyVulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = rf(assetVersionName, assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetversionFirstPartyVulnRepository_ListByScanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByScanner'
type AssetversionFirstPartyVulnRepository_ListByScanner_Call struct {
	*mock.Call
}

// ListByScanner is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scannerID string
func (_e *AssetversionFirstPartyVulnRepository_Expecter) ListByScanner(assetVersionName interface{}, assetID interface{}, scannerID interface{}) *AssetversionFirstPartyVulnRepository_ListByScanner_Call {
	return &AssetversionFirstPartyVulnRepository_ListByScanner_Call{Call: _e.mock.On("ListByScanner", assetVersionName, assetID, scannerID)}
}

func (_c *AssetversionFirstPartyVulnRepository_ListByScanner_Call) Run(run func(assetVersionName string, assetID uuid.UUID, scannerID string)) *AssetversionFirstPartyVulnRepository_ListByScanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *AssetversionFirstPartyVulnRepository_ListByScanner_Call) Return(_a0 []models.FirstPartyVulnerability, _a1 error) *AssetversionFirstPartyVulnRepository_ListByScanner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetversionFirstPartyVulnRepository_ListByScanner_Call) RunAndReturn(run func(string, uuid.UUID, string) ([]models.FirstPartyVulnerability, error)) *AssetversionFirstPartyVulnRepository_ListByScanner_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: db, firstPartyVulns
func (_m *AssetversionFirstPartyVulnRepository) SaveBatch(db *gorm.DB, firstPartyVulns []models.FirstPartyVulnerability) error {
	ret := _m.Called(db, firstPartyVulns)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.FirstPartyVulnerability) error); ok {
		r0 = rf(db, firstPartyVulns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetversionFirstPartyVulnRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type AssetversionFirstPartyVulnRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - db *gorm.DB
//   - firstPartyVulns []models.FirstPartyVulnerability
func (_e *AssetversionFirstPartyVulnRepository_Expecter) SaveBatch(db interface{}, firstPartyVulns interface{}) *AssetversionFirstPartyVulnRepository_SaveBatch_Call {
	return &AssetversionFirstPartyVulnRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", db, firstPartyVulns)}
}

func (_c *AssetversionFirstPartyVulnRepository_SaveBatch_Call) Run(run func(db *gorm.DB, firstPartyVulns []models.FirstPartyVulnerability)) *AssetversionFirstPartyVulnRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.FirstPartyVulnerability))
	})
	return _c
}

func (_c *AssetversionFirstPartyVulnRepository_SaveBatch_Call) Return(_a0 error) *AssetversionFirstPartyVulnRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetversionFirstPartyVulnRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.FirstPartyVulnerability) error) *AssetversionFirstPartyVulnRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: txFunc
func (_m *AssetversionFirstPartyVulnRepository) Transaction(txFunc func(*gorm.DB) error) error {
	ret := _m.Called(txFunc)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetversionFirstPartyVulnRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type AssetversionFirstPartyVulnRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - txFunc func(*gorm.DB) error
func (_e *AssetversionFirstPartyVulnRepository_Expecter) Transaction(txFunc interface{}) *AssetversionFirstPartyVulnRepository_Transaction_Call {
	return &AssetversionFirstPartyVulnRepository_Transaction_Call{Call: _e.mock.On("Transaction", txFunc)}
}

func (_c *AssetversionFirstPartyVulnRepository_Transaction_Call) Run(run func(txFunc func(*gorm.DB) error)) *AssetversionFirstPartyVulnRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *AssetversionFirstPartyVulnRepository_Transaction_Call) Return(_a0 error) *AssetversionFirstPartyVulnRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetversionFirstPartyVulnRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *AssetversionFirstPartyVulnRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetversionFirstPartyVulnRepository creates a new instance of AssetversionFirstPartyVulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetversionFirstPartyVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetversionFirstPartyVulnRepository {
	mock := &AssetversionFirstPartyVulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
