// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// AssetversionAssetVersionRepository is an autogenerated mock type for the assetVersionRepository type
type AssetversionAssetVersionRepository struct {
	mock.Mock
}

type AssetversionAssetVersionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetversionAssetVersionRepository) EXPECT() *AssetversionAssetVersionRepository_Expecter {
	return &AssetversionAssetVersionRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: tx, assetVersion
func (_m *AssetversionAssetVersionRepository) Delete(tx *gorm.DB, assetVersion *models.AssetVersion) error {
	ret := _m.Called(tx, assetVersion)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.AssetVersion) error); ok {
		r0 = rf(tx, assetVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetversionAssetVersionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AssetversionAssetVersionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersion *models.AssetVersion
func (_e *AssetversionAssetVersionRepository_Expecter) Delete(tx interface{}, assetVersion interface{}) *AssetversionAssetVersionRepository_Delete_Call {
	return &AssetversionAssetVersionRepository_Delete_Call{Call: _e.mock.On("Delete", tx, assetVersion)}
}

func (_c *AssetversionAssetVersionRepository_Delete_Call) Run(run func(tx *gorm.DB, assetVersion *models.AssetVersion)) *AssetversionAssetVersionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.AssetVersion))
	})
	return _c
}

func (_c *AssetversionAssetVersionRepository_Delete_Call) Return(_a0 error) *AssetversionAssetVersionRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetversionAssetVersionRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, *models.AssetVersion) error) *AssetversionAssetVersionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAssetsVersionFromDBByAssetID provides a mock function with given fields: tx, assetID
func (_m *AssetversionAssetVersionRepository) GetAllAssetsVersionFromDBByAssetID(tx *gorm.DB, assetID uuid.UUID) ([]models.AssetVersion, error) {
	ret := _m.Called(tx, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAssetsVersionFromDBByAssetID")
	}

	var r0 []models.AssetVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) ([]models.AssetVersion, error)); ok {
		return rf(tx, assetID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) []models.AssetVersion); ok {
		r0 = rf(tx, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssetVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, uuid.UUID) error); ok {
		r1 = rf(tx, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetversionAssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAssetsVersionFromDBByAssetID'
type AssetversionAssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call struct {
	*mock.Call
}

// GetAllAssetsVersionFromDBByAssetID is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetID uuid.UUID
func (_e *AssetversionAssetVersionRepository_Expecter) GetAllAssetsVersionFromDBByAssetID(tx interface{}, assetID interface{}) *AssetversionAssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call {
	return &AssetversionAssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call{Call: _e.mock.On("GetAllAssetsVersionFromDBByAssetID", tx, assetID)}
}

func (_c *AssetversionAssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call) Run(run func(tx *gorm.DB, assetID uuid.UUID)) *AssetversionAssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AssetversionAssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call) Return(_a0 []models.AssetVersion, _a1 error) *AssetversionAssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetversionAssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) ([]models.AssetVersion, error)) *AssetversionAssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: _a0
func (_m *AssetversionAssetVersionRepository) GetDB(_a0 *gorm.DB) *gorm.DB {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// AssetversionAssetVersionRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type AssetversionAssetVersionRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - _a0 *gorm.DB
func (_e *AssetversionAssetVersionRepository_Expecter) GetDB(_a0 interface{}) *AssetversionAssetVersionRepository_GetDB_Call {
	return &AssetversionAssetVersionRepository_GetDB_Call{Call: _e.mock.On("GetDB", _a0)}
}

func (_c *AssetversionAssetVersionRepository_GetDB_Call) Run(run func(_a0 *gorm.DB)) *AssetversionAssetVersionRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *AssetversionAssetVersionRepository_GetDB_Call) Return(_a0 *gorm.DB) *AssetversionAssetVersionRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetversionAssetVersionRepository_GetDB_Call) RunAndReturn(run func(*gorm.DB) *gorm.DB) *AssetversionAssetVersionRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, assetVersion
func (_m *AssetversionAssetVersionRepository) Save(tx *gorm.DB, assetVersion *models.AssetVersion) error {
	ret := _m.Called(tx, assetVersion)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.AssetVersion) error); ok {
		r0 = rf(tx, assetVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetversionAssetVersionRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type AssetversionAssetVersionRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersion *models.AssetVersion
func (_e *AssetversionAssetVersionRepository_Expecter) Save(tx interface{}, assetVersion interface{}) *AssetversionAssetVersionRepository_Save_Call {
	return &AssetversionAssetVersionRepository_Save_Call{Call: _e.mock.On("Save", tx, assetVersion)}
}

func (_c *AssetversionAssetVersionRepository_Save_Call) Run(run func(tx *gorm.DB, assetVersion *models.AssetVersion)) *AssetversionAssetVersionRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.AssetVersion))
	})
	return _c
}

func (_c *AssetversionAssetVersionRepository_Save_Call) Return(_a0 error) *AssetversionAssetVersionRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetversionAssetVersionRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.AssetVersion) error) *AssetversionAssetVersionRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetversionAssetVersionRepository creates a new instance of AssetversionAssetVersionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetversionAssetVersionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetversionAssetVersionRepository {
	mock := &AssetversionAssetVersionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
