// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/l3montree-dev/devguard/internal/common"

	mock "github.com/stretchr/testify/mock"
)

// CoreDepsDevService is an autogenerated mock type for the DepsDevService type
type CoreDepsDevService struct {
	mock.Mock
}

type CoreDepsDevService_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreDepsDevService) EXPECT() *CoreDepsDevService_Expecter {
	return &CoreDepsDevService_Expecter{mock: &_m.Mock}
}

// GetProject provides a mock function with given fields: ctx, projectID
func (_m *CoreDepsDevService) GetProject(ctx context.Context, projectID string) (common.DepsDevProjectResponse, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 common.DepsDevProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (common.DepsDevProjectResponse, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) common.DepsDevProjectResponse); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(common.DepsDevProjectResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDepsDevService_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type CoreDepsDevService_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *CoreDepsDevService_Expecter) GetProject(ctx interface{}, projectID interface{}) *CoreDepsDevService_GetProject_Call {
	return &CoreDepsDevService_GetProject_Call{Call: _e.mock.On("GetProject", ctx, projectID)}
}

func (_c *CoreDepsDevService_GetProject_Call) Run(run func(ctx context.Context, projectID string)) *CoreDepsDevService_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CoreDepsDevService_GetProject_Call) Return(_a0 common.DepsDevProjectResponse, _a1 error) *CoreDepsDevService_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDepsDevService_GetProject_Call) RunAndReturn(run func(context.Context, string) (common.DepsDevProjectResponse, error)) *CoreDepsDevService_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function with given fields: ctx, ecosystem, packageName, version
func (_m *CoreDepsDevService) GetVersion(ctx context.Context, ecosystem string, packageName string, version string) (common.DepsDevVersionResponse, error) {
	ret := _m.Called(ctx, ecosystem, packageName, version)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 common.DepsDevVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (common.DepsDevVersionResponse, error)); ok {
		return rf(ctx, ecosystem, packageName, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) common.DepsDevVersionResponse); ok {
		r0 = rf(ctx, ecosystem, packageName, version)
	} else {
		r0 = ret.Get(0).(common.DepsDevVersionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, ecosystem, packageName, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreDepsDevService_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type CoreDepsDevService_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - ecosystem string
//   - packageName string
//   - version string
func (_e *CoreDepsDevService_Expecter) GetVersion(ctx interface{}, ecosystem interface{}, packageName interface{}, version interface{}) *CoreDepsDevService_GetVersion_Call {
	return &CoreDepsDevService_GetVersion_Call{Call: _e.mock.On("GetVersion", ctx, ecosystem, packageName, version)}
}

func (_c *CoreDepsDevService_GetVersion_Call) Run(run func(ctx context.Context, ecosystem string, packageName string, version string)) *CoreDepsDevService_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CoreDepsDevService_GetVersion_Call) Return(_a0 common.DepsDevVersionResponse, _a1 error) *CoreDepsDevService_GetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreDepsDevService_GetVersion_Call) RunAndReturn(run func(context.Context, string, string, string) (common.DepsDevVersionResponse, error)) *CoreDepsDevService_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreDepsDevService creates a new instance of CoreDepsDevService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreDepsDevService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreDepsDevService {
	mock := &CoreDepsDevService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
