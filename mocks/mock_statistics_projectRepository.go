// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// StatisticsProjectRepository is an autogenerated mock type for the projectRepository type
type StatisticsProjectRepository struct {
	mock.Mock
}

type StatisticsProjectRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StatisticsProjectRepository) EXPECT() *StatisticsProjectRepository_Expecter {
	return &StatisticsProjectRepository_Expecter{mock: &_m.Mock}
}

// GetByOrgID provides a mock function with given fields: organizationID
func (_m *StatisticsProjectRepository) GetByOrgID(organizationID uuid.UUID) ([]models.Project, error) {
	ret := _m.Called(organizationID)

	if len(ret) == 0 {
		panic("no return value specified for GetByOrgID")
	}

	var r0 []models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Project, error)); ok {
		return rf(organizationID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Project); ok {
		r0 = rf(organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsProjectRepository_GetByOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByOrgID'
type StatisticsProjectRepository_GetByOrgID_Call struct {
	*mock.Call
}

// GetByOrgID is a helper method to define mock.On call
//   - organizationID uuid.UUID
func (_e *StatisticsProjectRepository_Expecter) GetByOrgID(organizationID interface{}) *StatisticsProjectRepository_GetByOrgID_Call {
	return &StatisticsProjectRepository_GetByOrgID_Call{Call: _e.mock.On("GetByOrgID", organizationID)}
}

func (_c *StatisticsProjectRepository_GetByOrgID_Call) Run(run func(organizationID uuid.UUID)) *StatisticsProjectRepository_GetByOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *StatisticsProjectRepository_GetByOrgID_Call) Return(_a0 []models.Project, _a1 error) *StatisticsProjectRepository_GetByOrgID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsProjectRepository_GetByOrgID_Call) RunAndReturn(run func(uuid.UUID) ([]models.Project, error)) *StatisticsProjectRepository_GetByOrgID_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatisticsProjectRepository creates a new instance of StatisticsProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatisticsProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatisticsProjectRepository {
	mock := &StatisticsProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
