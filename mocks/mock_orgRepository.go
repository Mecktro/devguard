// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// OrgRepository is an autogenerated mock type for the orgRepository type
type OrgRepository struct {
	mock.Mock
}

type OrgRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrgRepository) EXPECT() *OrgRepository_Expecter {
	return &OrgRepository_Expecter{mock: &_m.Mock}
}

// ReadBySlug provides a mock function with given fields: slugOrId
func (_m *OrgRepository) ReadBySlug(slugOrId string) (models.Org, error) {
	ret := _m.Called(slugOrId)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlug")
	}

	var r0 models.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Org, error)); ok {
		return rf(slugOrId)
	}
	if rf, ok := ret.Get(0).(func(string) models.Org); ok {
		r0 = rf(slugOrId)
	} else {
		r0 = ret.Get(0).(models.Org)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slugOrId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgRepository_ReadBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlug'
type OrgRepository_ReadBySlug_Call struct {
	*mock.Call
}

// ReadBySlug is a helper method to define mock.On call
//   - slugOrId string
func (_e *OrgRepository_Expecter) ReadBySlug(slugOrId interface{}) *OrgRepository_ReadBySlug_Call {
	return &OrgRepository_ReadBySlug_Call{Call: _e.mock.On("ReadBySlug", slugOrId)}
}

func (_c *OrgRepository_ReadBySlug_Call) Run(run func(slugOrId string)) *OrgRepository_ReadBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OrgRepository_ReadBySlug_Call) Return(_a0 models.Org, _a1 error) *OrgRepository_ReadBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrgRepository_ReadBySlug_Call) RunAndReturn(run func(string) (models.Org, error)) *OrgRepository_ReadBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrgRepository creates a new instance of OrgRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrgRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrgRepository {
	mock := &OrgRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
