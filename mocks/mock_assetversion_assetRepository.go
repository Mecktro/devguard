// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// AssetversionAssetRepository is an autogenerated mock type for the assetRepository type
type AssetversionAssetRepository struct {
	mock.Mock
}

type AssetversionAssetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetversionAssetRepository) EXPECT() *AssetversionAssetRepository_Expecter {
	return &AssetversionAssetRepository_Expecter{mock: &_m.Mock}
}

// GetByAssetID provides a mock function with given fields: assetID
func (_m *AssetversionAssetRepository) GetByAssetID(assetID uuid.UUID) (models.Asset, error) {
	ret := _m.Called(assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetID")
	}

	var r0 models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Asset, error)); ok {
		return rf(assetID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Asset); ok {
		r0 = rf(assetID)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetversionAssetRepository_GetByAssetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetID'
type AssetversionAssetRepository_GetByAssetID_Call struct {
	*mock.Call
}

// GetByAssetID is a helper method to define mock.On call
//   - assetID uuid.UUID
func (_e *AssetversionAssetRepository_Expecter) GetByAssetID(assetID interface{}) *AssetversionAssetRepository_GetByAssetID_Call {
	return &AssetversionAssetRepository_GetByAssetID_Call{Call: _e.mock.On("GetByAssetID", assetID)}
}

func (_c *AssetversionAssetRepository_GetByAssetID_Call) Run(run func(assetID uuid.UUID)) *AssetversionAssetRepository_GetByAssetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AssetversionAssetRepository_GetByAssetID_Call) Return(_a0 models.Asset, _a1 error) *AssetversionAssetRepository_GetByAssetID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetversionAssetRepository_GetByAssetID_Call) RunAndReturn(run func(uuid.UUID) (models.Asset, error)) *AssetversionAssetRepository_GetByAssetID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, asset
func (_m *AssetversionAssetRepository) Save(tx *gorm.DB, asset *models.Asset) error {
	ret := _m.Called(tx, asset)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Asset) error); ok {
		r0 = rf(tx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetversionAssetRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type AssetversionAssetRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - asset *models.Asset
func (_e *AssetversionAssetRepository_Expecter) Save(tx interface{}, asset interface{}) *AssetversionAssetRepository_Save_Call {
	return &AssetversionAssetRepository_Save_Call{Call: _e.mock.On("Save", tx, asset)}
}

func (_c *AssetversionAssetRepository_Save_Call) Run(run func(tx *gorm.DB, asset *models.Asset)) *AssetversionAssetRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Asset))
	})
	return _c
}

func (_c *AssetversionAssetRepository_Save_Call) Return(_a0 error) *AssetversionAssetRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetversionAssetRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.Asset) error) *AssetversionAssetRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetversionAssetRepository creates a new instance of AssetversionAssetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetversionAssetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetversionAssetRepository {
	mock := &AssetversionAssetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
