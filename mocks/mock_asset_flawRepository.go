// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// AssetFlawRepository is an autogenerated mock type for the flawRepository type
type AssetFlawRepository struct {
	mock.Mock
}

type AssetFlawRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetFlawRepository) EXPECT() *AssetFlawRepository_Expecter {
	return &AssetFlawRepository_Expecter{mock: &_m.Mock}
}

// GetAllFlawsByAssetID provides a mock function with given fields: tx, assetID
func (_m *AssetFlawRepository) GetAllFlawsByAssetID(tx *gorm.DB, assetID uuid.UUID) ([]models.Flaw, error) {
	ret := _m.Called(tx, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFlawsByAssetID")
	}

	var r0 []models.Flaw
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) ([]models.Flaw, error)); ok {
		return rf(tx, assetID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) []models.Flaw); ok {
		r0 = rf(tx, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Flaw)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, uuid.UUID) error); ok {
		r1 = rf(tx, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetFlawRepository_GetAllFlawsByAssetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFlawsByAssetID'
type AssetFlawRepository_GetAllFlawsByAssetID_Call struct {
	*mock.Call
}

// GetAllFlawsByAssetID is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetID uuid.UUID
func (_e *AssetFlawRepository_Expecter) GetAllFlawsByAssetID(tx interface{}, assetID interface{}) *AssetFlawRepository_GetAllFlawsByAssetID_Call {
	return &AssetFlawRepository_GetAllFlawsByAssetID_Call{Call: _e.mock.On("GetAllFlawsByAssetID", tx, assetID)}
}

func (_c *AssetFlawRepository_GetAllFlawsByAssetID_Call) Run(run func(tx *gorm.DB, assetID uuid.UUID)) *AssetFlawRepository_GetAllFlawsByAssetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AssetFlawRepository_GetAllFlawsByAssetID_Call) Return(_a0 []models.Flaw, _a1 error) *AssetFlawRepository_GetAllFlawsByAssetID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetFlawRepository_GetAllFlawsByAssetID_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) ([]models.Flaw, error)) *AssetFlawRepository_GetAllFlawsByAssetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlawsByPurlOrCpe provides a mock function with given fields: tx, purlOrCpe
func (_m *AssetFlawRepository) GetFlawsByPurlOrCpe(tx *gorm.DB, purlOrCpe []string) ([]models.Flaw, error) {
	ret := _m.Called(tx, purlOrCpe)

	if len(ret) == 0 {
		panic("no return value specified for GetFlawsByPurlOrCpe")
	}

	var r0 []models.Flaw
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) ([]models.Flaw, error)); ok {
		return rf(tx, purlOrCpe)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) []models.Flaw); ok {
		r0 = rf(tx, purlOrCpe)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Flaw)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []string) error); ok {
		r1 = rf(tx, purlOrCpe)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetFlawRepository_GetFlawsByPurlOrCpe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlawsByPurlOrCpe'
type AssetFlawRepository_GetFlawsByPurlOrCpe_Call struct {
	*mock.Call
}

// GetFlawsByPurlOrCpe is a helper method to define mock.On call
//   - tx *gorm.DB
//   - purlOrCpe []string
func (_e *AssetFlawRepository_Expecter) GetFlawsByPurlOrCpe(tx interface{}, purlOrCpe interface{}) *AssetFlawRepository_GetFlawsByPurlOrCpe_Call {
	return &AssetFlawRepository_GetFlawsByPurlOrCpe_Call{Call: _e.mock.On("GetFlawsByPurlOrCpe", tx, purlOrCpe)}
}

func (_c *AssetFlawRepository_GetFlawsByPurlOrCpe_Call) Run(run func(tx *gorm.DB, purlOrCpe []string)) *AssetFlawRepository_GetFlawsByPurlOrCpe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]string))
	})
	return _c
}

func (_c *AssetFlawRepository_GetFlawsByPurlOrCpe_Call) Return(_a0 []models.Flaw, _a1 error) *AssetFlawRepository_GetFlawsByPurlOrCpe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetFlawRepository_GetFlawsByPurlOrCpe_Call) RunAndReturn(run func(*gorm.DB, []string) ([]models.Flaw, error)) *AssetFlawRepository_GetFlawsByPurlOrCpe_Call {
	_c.Call.Return(run)
	return _c
}

// ListByScanner provides a mock function with given fields: assetID, scannerID
func (_m *AssetFlawRepository) ListByScanner(assetID uuid.UUID, scannerID string) ([]models.Flaw, error) {
	ret := _m.Called(assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for ListByScanner")
	}

	var r0 []models.Flaw
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) ([]models.Flaw, error)); ok {
		return rf(assetID, scannerID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) []models.Flaw); ok {
		r0 = rf(assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Flaw)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetFlawRepository_ListByScanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByScanner'
type AssetFlawRepository_ListByScanner_Call struct {
	*mock.Call
}

// ListByScanner is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - scannerID string
func (_e *AssetFlawRepository_Expecter) ListByScanner(assetID interface{}, scannerID interface{}) *AssetFlawRepository_ListByScanner_Call {
	return &AssetFlawRepository_ListByScanner_Call{Call: _e.mock.On("ListByScanner", assetID, scannerID)}
}

func (_c *AssetFlawRepository_ListByScanner_Call) Run(run func(assetID uuid.UUID, scannerID string)) *AssetFlawRepository_ListByScanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *AssetFlawRepository_ListByScanner_Call) Return(_a0 []models.Flaw, _a1 error) *AssetFlawRepository_ListByScanner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetFlawRepository_ListByScanner_Call) RunAndReturn(run func(uuid.UUID, string) ([]models.Flaw, error)) *AssetFlawRepository_ListByScanner_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: db, flaws
func (_m *AssetFlawRepository) SaveBatch(db *gorm.DB, flaws []models.Flaw) error {
	ret := _m.Called(db, flaws)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Flaw) error); ok {
		r0 = rf(db, flaws)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetFlawRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type AssetFlawRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - db *gorm.DB
//   - flaws []models.Flaw
func (_e *AssetFlawRepository_Expecter) SaveBatch(db interface{}, flaws interface{}) *AssetFlawRepository_SaveBatch_Call {
	return &AssetFlawRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", db, flaws)}
}

func (_c *AssetFlawRepository_SaveBatch_Call) Run(run func(db *gorm.DB, flaws []models.Flaw)) *AssetFlawRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Flaw))
	})
	return _c
}

func (_c *AssetFlawRepository_SaveBatch_Call) Return(_a0 error) *AssetFlawRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetFlawRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Flaw) error) *AssetFlawRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: txFunc
func (_m *AssetFlawRepository) Transaction(txFunc func(*gorm.DB) error) error {
	ret := _m.Called(txFunc)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetFlawRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type AssetFlawRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - txFunc func(*gorm.DB) error
func (_e *AssetFlawRepository_Expecter) Transaction(txFunc interface{}) *AssetFlawRepository_Transaction_Call {
	return &AssetFlawRepository_Transaction_Call{Call: _e.mock.On("Transaction", txFunc)}
}

func (_c *AssetFlawRepository_Transaction_Call) Run(run func(txFunc func(*gorm.DB) error)) *AssetFlawRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *AssetFlawRepository_Transaction_Call) Return(_a0 error) *AssetFlawRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetFlawRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *AssetFlawRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetFlawRepository creates a new instance of AssetFlawRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetFlawRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetFlawRepository {
	mock := &AssetFlawRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
