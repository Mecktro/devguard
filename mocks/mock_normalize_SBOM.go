// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	cyclonedx "github.com/CycloneDX/cyclonedx-go"
	mock "github.com/stretchr/testify/mock"
)

// NormalizeSBOM is an autogenerated mock type for the SBOM type
type NormalizeSBOM struct {
	mock.Mock
}

type NormalizeSBOM_Expecter struct {
	mock *mock.Mock
}

func (_m *NormalizeSBOM) EXPECT() *NormalizeSBOM_Expecter {
	return &NormalizeSBOM_Expecter{mock: &_m.Mock}
}

// GetComponents provides a mock function with given fields:
func (_m *NormalizeSBOM) GetComponents() *[]cyclonedx.Component {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetComponents")
	}

	var r0 *[]cyclonedx.Component
	if rf, ok := ret.Get(0).(func() *[]cyclonedx.Component); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]cyclonedx.Component)
		}
	}

	return r0
}

// NormalizeSBOM_GetComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponents'
type NormalizeSBOM_GetComponents_Call struct {
	*mock.Call
}

// GetComponents is a helper method to define mock.On call
func (_e *NormalizeSBOM_Expecter) GetComponents() *NormalizeSBOM_GetComponents_Call {
	return &NormalizeSBOM_GetComponents_Call{Call: _e.mock.On("GetComponents")}
}

func (_c *NormalizeSBOM_GetComponents_Call) Run(run func()) *NormalizeSBOM_GetComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NormalizeSBOM_GetComponents_Call) Return(_a0 *[]cyclonedx.Component) *NormalizeSBOM_GetComponents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NormalizeSBOM_GetComponents_Call) RunAndReturn(run func() *[]cyclonedx.Component) *NormalizeSBOM_GetComponents_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencies provides a mock function with given fields:
func (_m *NormalizeSBOM) GetDependencies() *[]cyclonedx.Dependency {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDependencies")
	}

	var r0 *[]cyclonedx.Dependency
	if rf, ok := ret.Get(0).(func() *[]cyclonedx.Dependency); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]cyclonedx.Dependency)
		}
	}

	return r0
}

// NormalizeSBOM_GetDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencies'
type NormalizeSBOM_GetDependencies_Call struct {
	*mock.Call
}

// GetDependencies is a helper method to define mock.On call
func (_e *NormalizeSBOM_Expecter) GetDependencies() *NormalizeSBOM_GetDependencies_Call {
	return &NormalizeSBOM_GetDependencies_Call{Call: _e.mock.On("GetDependencies")}
}

func (_c *NormalizeSBOM_GetDependencies_Call) Run(run func()) *NormalizeSBOM_GetDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NormalizeSBOM_GetDependencies_Call) Return(_a0 *[]cyclonedx.Dependency) *NormalizeSBOM_GetDependencies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NormalizeSBOM_GetDependencies_Call) RunAndReturn(run func() *[]cyclonedx.Dependency) *NormalizeSBOM_GetDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function with given fields:
func (_m *NormalizeSBOM) GetMetadata() *cyclonedx.Metadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 *cyclonedx.Metadata
	if rf, ok := ret.Get(0).(func() *cyclonedx.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cyclonedx.Metadata)
		}
	}

	return r0
}

// NormalizeSBOM_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type NormalizeSBOM_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
func (_e *NormalizeSBOM_Expecter) GetMetadata() *NormalizeSBOM_GetMetadata_Call {
	return &NormalizeSBOM_GetMetadata_Call{Call: _e.mock.On("GetMetadata")}
}

func (_c *NormalizeSBOM_GetMetadata_Call) Run(run func()) *NormalizeSBOM_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NormalizeSBOM_GetMetadata_Call) Return(_a0 *cyclonedx.Metadata) *NormalizeSBOM_GetMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NormalizeSBOM_GetMetadata_Call) RunAndReturn(run func() *cyclonedx.Metadata) *NormalizeSBOM_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewNormalizeSBOM creates a new instance of NormalizeSBOM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNormalizeSBOM(t interface {
	mock.TestingT
	Cleanup(func())
}) *NormalizeSBOM {
	mock := &NormalizeSBOM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
