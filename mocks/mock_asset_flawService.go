// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// AssetVulnService is an autogenerated mock type for the vulnService type
type AssetVulnService struct {
	mock.Mock
}

type AssetVulnService_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetVulnService) EXPECT() *AssetVulnService_Expecter {
	return &AssetVulnService_Expecter{mock: &_m.Mock}
}

// RecalculateRawRiskAssessment provides a mock function with given fields: tx, userID, vulns, justification, _a4
func (_m *AssetVulnService) RecalculateRawRiskAssessment(tx *gorm.DB, userID string, vulns []models.DependencyVulnerability, justification string, _a4 models.Asset) error {
	ret := _m.Called(tx, userID, vulns, justification, _a4)

	if len(ret) == 0 {
		panic("no return value specified for RecalculateRawRiskAssessment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, []models.DependencyVulnerability, string, models.Asset) error); ok {
		r0 = rf(tx, userID, vulns, justification, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetVulnService_RecalculateRawRiskAssessment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecalculateRawRiskAssessment'
type AssetVulnService_RecalculateRawRiskAssessment_Call struct {
	*mock.Call
}

// RecalculateRawRiskAssessment is a helper method to define mock.On call
//   - tx *gorm.DB
//   - userID string
//   - vulns []models.Vuln
//   - justification string
//   - _a4 models.Asset
func (_e *AssetVulnService_Expecter) RecalculateRawRiskAssessment(tx interface{}, userID interface{}, vulns interface{}, justification interface{}, _a4 interface{}) *AssetVulnService_RecalculateRawRiskAssessment_Call {
	return &AssetVulnService_RecalculateRawRiskAssessment_Call{Call: _e.mock.On("RecalculateRawRiskAssessment", tx, userID, vulns, justification, _a4)}
}

func (_c *AssetVulnService_RecalculateRawRiskAssessment_Call) Run(run func(tx *gorm.DB, userID string, vulns []models.DependencyVulnerability, justification string, _a4 models.Asset)) *AssetVulnService_RecalculateRawRiskAssessment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].([]models.DependencyVulnerability), args[3].(string), args[4].(models.Asset))
	})
	return _c
}

func (_c *AssetVulnService_RecalculateRawRiskAssessment_Call) Return(_a0 error) *AssetVulnService_RecalculateRawRiskAssessment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetVulnService_RecalculateRawRiskAssessment_Call) RunAndReturn(run func(*gorm.DB, string, []models.DependencyVulnerability, string, models.Asset) error) *AssetVulnService_RecalculateRawRiskAssessment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVulnState provides a mock function with given fields: tx, userID, vuln, statusType, justification
func (_m *AssetVulnService) UpdateVulnState(tx *gorm.DB, userID string, vuln *models.DependencyVulnerability, statusType string, justification string) (models.VulnEvent, error) {
	ret := _m.Called(tx, userID, vuln, statusType, justification)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVulnState")
	}

	var r0 models.VulnEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, *models.DependencyVulnerability, string, string) (models.VulnEvent, error)); ok {
		return rf(tx, userID, vuln, statusType, justification)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, *models.DependencyVulnerability, string, string) models.VulnEvent); ok {
		r0 = rf(tx, userID, vuln, statusType, justification)
	} else {
		r0 = ret.Get(0).(models.VulnEvent)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, *models.DependencyVulnerability, string, string) error); ok {
		r1 = rf(tx, userID, vuln, statusType, justification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetVulnService_UpdateVulnState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVulnState'
type AssetVulnService_UpdateVulnState_Call struct {
	*mock.Call
}

// UpdateVulnState is a helper method to define mock.On call
//   - tx *gorm.DB
//   - userID string
//   - vuln *models.Vuln
//   - statusType string
//   - justification string
func (_e *AssetVulnService_Expecter) UpdateVulnState(tx interface{}, userID interface{}, vuln interface{}, statusType interface{}, justification interface{}) *AssetVulnService_UpdateVulnState_Call {
	return &AssetVulnService_UpdateVulnState_Call{Call: _e.mock.On("UpdateVulnState", tx, userID, vuln, statusType, justification)}
}

func (_c *AssetVulnService_UpdateVulnState_Call) Run(run func(tx *gorm.DB, userID string, vuln *models.DependencyVulnerability, statusType string, justification string)) *AssetVulnService_UpdateVulnState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(*models.DependencyVulnerability), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AssetVulnService_UpdateVulnState_Call) Return(_a0 models.VulnEvent, _a1 error) *AssetVulnService_UpdateVulnState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetVulnService_UpdateVulnState_Call) RunAndReturn(run func(*gorm.DB, string, *models.DependencyVulnerability, string, string) (models.VulnEvent, error)) *AssetVulnService_UpdateVulnState_Call {
	_c.Call.Return(run)
	return _c
}

// UserDetectedVulns provides a mock function with given fields: tx, userID, vulns, _a3, doRiskManagement
func (_m *AssetVulnService) UserDetectedVulns(tx *gorm.DB, userID string, vulns []models.DependencyVulnerability, _a3 models.Asset, doRiskManagement bool) error {
	ret := _m.Called(tx, userID, vulns, _a3, doRiskManagement)

	if len(ret) == 0 {
		panic("no return value specified for UserDetectedVulns")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, []models.DependencyVulnerability, models.Asset, bool) error); ok {
		r0 = rf(tx, userID, vulns, _a3, doRiskManagement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetVulnService_UserDetectedVulns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserDetectedVulns'
type AssetVulnService_UserDetectedVulns_Call struct {
	*mock.Call
}

// UserDetectedVulns is a helper method to define mock.On call
//   - tx *gorm.DB
//   - userID string
//   - vulns []models.Vuln
//   - _a3 models.Asset
//   - doRiskManagement bool
func (_e *AssetVulnService_Expecter) UserDetectedVulns(tx interface{}, userID interface{}, vulns interface{}, _a3 interface{}, doRiskManagement interface{}) *AssetVulnService_UserDetectedVulns_Call {
	return &AssetVulnService_UserDetectedVulns_Call{Call: _e.mock.On("UserDetectedVulns", tx, userID, vulns, _a3, doRiskManagement)}
}

func (_c *AssetVulnService_UserDetectedVulns_Call) Run(run func(tx *gorm.DB, userID string, vulns []models.DependencyVulnerability, _a3 models.Asset, doRiskManagement bool)) *AssetVulnService_UserDetectedVulns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].([]models.DependencyVulnerability), args[3].(models.Asset), args[4].(bool))
	})
	return _c
}

func (_c *AssetVulnService_UserDetectedVulns_Call) Return(_a0 error) *AssetVulnService_UserDetectedVulns_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetVulnService_UserDetectedVulns_Call) RunAndReturn(run func(*gorm.DB, string, []models.DependencyVulnerability, models.Asset, bool) error) *AssetVulnService_UserDetectedVulns_Call {
	_c.Call.Return(run)
	return _c
}

// UserFixedVulns provides a mock function with given fields: tx, userID, vulns, doRiskManagement
func (_m *AssetVulnService) UserFixedVulns(tx *gorm.DB, userID string, vulns []models.DependencyVulnerability, doRiskManagement bool) error {
	ret := _m.Called(tx, userID, vulns, doRiskManagement)

	if len(ret) == 0 {
		panic("no return value specified for UserFixedVulns")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, []models.DependencyVulnerability, bool) error); ok {
		r0 = rf(tx, userID, vulns, doRiskManagement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetVulnService_UserFixedVulns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserFixedVulns'
type AssetVulnService_UserFixedVulns_Call struct {
	*mock.Call
}

// UserFixedVulns is a helper method to define mock.On call
//   - tx *gorm.DB
//   - userID string
//   - vulns []models.Vuln
//   - doRiskManagement bool
func (_e *AssetVulnService_Expecter) UserFixedVulns(tx interface{}, userID interface{}, vulns interface{}, doRiskManagement interface{}) *AssetVulnService_UserFixedVulns_Call {
	return &AssetVulnService_UserFixedVulns_Call{Call: _e.mock.On("UserFixedVulns", tx, userID, vulns, doRiskManagement)}
}

func (_c *AssetVulnService_UserFixedVulns_Call) Run(run func(tx *gorm.DB, userID string, vulns []models.DependencyVulnerability, doRiskManagement bool)) *AssetVulnService_UserFixedVulns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].([]models.DependencyVulnerability), args[3].(bool))
	})
	return _c
}

func (_c *AssetVulnService_UserFixedVulns_Call) Return(_a0 error) *AssetVulnService_UserFixedVulns_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetVulnService_UserFixedVulns_Call) RunAndReturn(run func(*gorm.DB, string, []models.DependencyVulnerability, bool) error) *AssetVulnService_UserFixedVulns_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetVulnService creates a new instance of AssetVulnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetVulnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetVulnService {
	mock := &AssetVulnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
