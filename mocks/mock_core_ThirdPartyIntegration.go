// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	core "github.com/l3montree-dev/devguard/internal/core"
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// CoreThirdPartyIntegration is an autogenerated mock type for the ThirdPartyIntegration type
type CoreThirdPartyIntegration struct {
	mock.Mock
}

type CoreThirdPartyIntegration_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreThirdPartyIntegration) EXPECT() *CoreThirdPartyIntegration_Expecter {
	return &CoreThirdPartyIntegration_Expecter{mock: &_m.Mock}
}

// FinishInstallation provides a mock function with given fields: ctx
func (_m *CoreThirdPartyIntegration) FinishInstallation(ctx echo.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FinishInstallation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreThirdPartyIntegration_FinishInstallation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishInstallation'
type CoreThirdPartyIntegration_FinishInstallation_Call struct {
	*mock.Call
}

// FinishInstallation is a helper method to define mock.On call
//   - ctx echo.Context
func (_e *CoreThirdPartyIntegration_Expecter) FinishInstallation(ctx interface{}) *CoreThirdPartyIntegration_FinishInstallation_Call {
	return &CoreThirdPartyIntegration_FinishInstallation_Call{Call: _e.mock.On("FinishInstallation", ctx)}
}

func (_c *CoreThirdPartyIntegration_FinishInstallation_Call) Run(run func(ctx echo.Context)) *CoreThirdPartyIntegration_FinishInstallation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *CoreThirdPartyIntegration_FinishInstallation_Call) Return(_a0 error) *CoreThirdPartyIntegration_FinishInstallation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreThirdPartyIntegration_FinishInstallation_Call) RunAndReturn(run func(echo.Context) error) *CoreThirdPartyIntegration_FinishInstallation_Call {
	_c.Call.Return(run)
	return _c
}

// HandleEvent provides a mock function with given fields: event
func (_m *CoreThirdPartyIntegration) HandleEvent(event interface{}) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for HandleEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreThirdPartyIntegration_HandleEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleEvent'
type CoreThirdPartyIntegration_HandleEvent_Call struct {
	*mock.Call
}

// HandleEvent is a helper method to define mock.On call
//   - event interface{}
func (_e *CoreThirdPartyIntegration_Expecter) HandleEvent(event interface{}) *CoreThirdPartyIntegration_HandleEvent_Call {
	return &CoreThirdPartyIntegration_HandleEvent_Call{Call: _e.mock.On("HandleEvent", event)}
}

func (_c *CoreThirdPartyIntegration_HandleEvent_Call) Run(run func(event interface{})) *CoreThirdPartyIntegration_HandleEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *CoreThirdPartyIntegration_HandleEvent_Call) Return(_a0 error) *CoreThirdPartyIntegration_HandleEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreThirdPartyIntegration_HandleEvent_Call) RunAndReturn(run func(interface{}) error) *CoreThirdPartyIntegration_HandleEvent_Call {
	_c.Call.Return(run)
	return _c
}

// HandleWebhook provides a mock function with given fields: ctx
func (_m *CoreThirdPartyIntegration) HandleWebhook(ctx echo.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HandleWebhook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreThirdPartyIntegration_HandleWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleWebhook'
type CoreThirdPartyIntegration_HandleWebhook_Call struct {
	*mock.Call
}

// HandleWebhook is a helper method to define mock.On call
//   - ctx echo.Context
func (_e *CoreThirdPartyIntegration_Expecter) HandleWebhook(ctx interface{}) *CoreThirdPartyIntegration_HandleWebhook_Call {
	return &CoreThirdPartyIntegration_HandleWebhook_Call{Call: _e.mock.On("HandleWebhook", ctx)}
}

func (_c *CoreThirdPartyIntegration_HandleWebhook_Call) Run(run func(ctx echo.Context)) *CoreThirdPartyIntegration_HandleWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *CoreThirdPartyIntegration_HandleWebhook_Call) Return(_a0 error) *CoreThirdPartyIntegration_HandleWebhook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreThirdPartyIntegration_HandleWebhook_Call) RunAndReturn(run func(echo.Context) error) *CoreThirdPartyIntegration_HandleWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// IntegrationEnabled provides a mock function with given fields: ctx
func (_m *CoreThirdPartyIntegration) IntegrationEnabled(ctx echo.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IntegrationEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(echo.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CoreThirdPartyIntegration_IntegrationEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IntegrationEnabled'
type CoreThirdPartyIntegration_IntegrationEnabled_Call struct {
	*mock.Call
}

// IntegrationEnabled is a helper method to define mock.On call
//   - ctx echo.Context
func (_e *CoreThirdPartyIntegration_Expecter) IntegrationEnabled(ctx interface{}) *CoreThirdPartyIntegration_IntegrationEnabled_Call {
	return &CoreThirdPartyIntegration_IntegrationEnabled_Call{Call: _e.mock.On("IntegrationEnabled", ctx)}
}

func (_c *CoreThirdPartyIntegration_IntegrationEnabled_Call) Run(run func(ctx echo.Context)) *CoreThirdPartyIntegration_IntegrationEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *CoreThirdPartyIntegration_IntegrationEnabled_Call) Return(_a0 bool) *CoreThirdPartyIntegration_IntegrationEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreThirdPartyIntegration_IntegrationEnabled_Call) RunAndReturn(run func(echo.Context) bool) *CoreThirdPartyIntegration_IntegrationEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepositories provides a mock function with given fields: ctx
func (_m *CoreThirdPartyIntegration) ListRepositories(ctx echo.Context) ([]core.Repository, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositories")
	}

	var r0 []core.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]core.Repository, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []core.Repository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreThirdPartyIntegration_ListRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepositories'
type CoreThirdPartyIntegration_ListRepositories_Call struct {
	*mock.Call
}

// ListRepositories is a helper method to define mock.On call
//   - ctx echo.Context
func (_e *CoreThirdPartyIntegration_Expecter) ListRepositories(ctx interface{}) *CoreThirdPartyIntegration_ListRepositories_Call {
	return &CoreThirdPartyIntegration_ListRepositories_Call{Call: _e.mock.On("ListRepositories", ctx)}
}

func (_c *CoreThirdPartyIntegration_ListRepositories_Call) Run(run func(ctx echo.Context)) *CoreThirdPartyIntegration_ListRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *CoreThirdPartyIntegration_ListRepositories_Call) Return(_a0 []core.Repository, _a1 error) *CoreThirdPartyIntegration_ListRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreThirdPartyIntegration_ListRepositories_Call) RunAndReturn(run func(echo.Context) ([]core.Repository, error)) *CoreThirdPartyIntegration_ListRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// WantsToFinishInstallation provides a mock function with given fields: ctx
func (_m *CoreThirdPartyIntegration) WantsToFinishInstallation(ctx echo.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WantsToFinishInstallation")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(echo.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CoreThirdPartyIntegration_WantsToFinishInstallation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WantsToFinishInstallation'
type CoreThirdPartyIntegration_WantsToFinishInstallation_Call struct {
	*mock.Call
}

// WantsToFinishInstallation is a helper method to define mock.On call
//   - ctx echo.Context
func (_e *CoreThirdPartyIntegration_Expecter) WantsToFinishInstallation(ctx interface{}) *CoreThirdPartyIntegration_WantsToFinishInstallation_Call {
	return &CoreThirdPartyIntegration_WantsToFinishInstallation_Call{Call: _e.mock.On("WantsToFinishInstallation", ctx)}
}

func (_c *CoreThirdPartyIntegration_WantsToFinishInstallation_Call) Run(run func(ctx echo.Context)) *CoreThirdPartyIntegration_WantsToFinishInstallation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *CoreThirdPartyIntegration_WantsToFinishInstallation_Call) Return(_a0 bool) *CoreThirdPartyIntegration_WantsToFinishInstallation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreThirdPartyIntegration_WantsToFinishInstallation_Call) RunAndReturn(run func(echo.Context) bool) *CoreThirdPartyIntegration_WantsToFinishInstallation_Call {
	_c.Call.Return(run)
	return _c
}

// WantsToHandleWebhook provides a mock function with given fields: ctx
func (_m *CoreThirdPartyIntegration) WantsToHandleWebhook(ctx echo.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WantsToHandleWebhook")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(echo.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CoreThirdPartyIntegration_WantsToHandleWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WantsToHandleWebhook'
type CoreThirdPartyIntegration_WantsToHandleWebhook_Call struct {
	*mock.Call
}

// WantsToHandleWebhook is a helper method to define mock.On call
//   - ctx echo.Context
func (_e *CoreThirdPartyIntegration_Expecter) WantsToHandleWebhook(ctx interface{}) *CoreThirdPartyIntegration_WantsToHandleWebhook_Call {
	return &CoreThirdPartyIntegration_WantsToHandleWebhook_Call{Call: _e.mock.On("WantsToHandleWebhook", ctx)}
}

func (_c *CoreThirdPartyIntegration_WantsToHandleWebhook_Call) Run(run func(ctx echo.Context)) *CoreThirdPartyIntegration_WantsToHandleWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *CoreThirdPartyIntegration_WantsToHandleWebhook_Call) Return(_a0 bool) *CoreThirdPartyIntegration_WantsToHandleWebhook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreThirdPartyIntegration_WantsToHandleWebhook_Call) RunAndReturn(run func(echo.Context) bool) *CoreThirdPartyIntegration_WantsToHandleWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreThirdPartyIntegration creates a new instance of CoreThirdPartyIntegration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreThirdPartyIntegration(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreThirdPartyIntegration {
	mock := &CoreThirdPartyIntegration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
