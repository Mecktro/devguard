// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// CoreAssetRepository is an autogenerated mock type for the AssetRepository type
type CoreAssetRepository struct {
	mock.Mock
}

type CoreAssetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreAssetRepository) EXPECT() *CoreAssetRepository_Expecter {
	return &CoreAssetRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: tx, id
func (_m *CoreAssetRepository) Activate(tx *gorm.DB, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreAssetRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type CoreAssetRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id uuid.UUID
func (_e *CoreAssetRepository_Expecter) Activate(tx interface{}, id interface{}) *CoreAssetRepository_Activate_Call {
	return &CoreAssetRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *CoreAssetRepository_Activate_Call) Run(run func(tx *gorm.DB, id uuid.UUID)) *CoreAssetRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CoreAssetRepository_Activate_Call) Return(_a0 error) *CoreAssetRepository_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreAssetRepository_Activate_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) error) *CoreAssetRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *CoreAssetRepository) All() ([]models.Asset, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Asset, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Asset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAssetRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type CoreAssetRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *CoreAssetRepository_Expecter) All() *CoreAssetRepository_All_Call {
	return &CoreAssetRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *CoreAssetRepository_All_Call) Run(run func()) *CoreAssetRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreAssetRepository_All_Call) Return(_a0 []models.Asset, _a1 error) *CoreAssetRepository_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAssetRepository_All_Call) RunAndReturn(run func() ([]models.Asset, error)) *CoreAssetRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function with no fields
func (_m *CoreAssetRepository) Begin() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// CoreAssetRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type CoreAssetRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *CoreAssetRepository_Expecter) Begin() *CoreAssetRepository_Begin_Call {
	return &CoreAssetRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *CoreAssetRepository_Begin_Call) Run(run func()) *CoreAssetRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreAssetRepository_Begin_Call) Return(_a0 *gorm.DB) *CoreAssetRepository_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreAssetRepository_Begin_Call) RunAndReturn(run func() *gorm.DB) *CoreAssetRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, t
func (_m *CoreAssetRepository) Create(tx *gorm.DB, t *models.Asset) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Asset) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreAssetRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CoreAssetRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.Asset
func (_e *CoreAssetRepository_Expecter) Create(tx interface{}, t interface{}) *CoreAssetRepository_Create_Call {
	return &CoreAssetRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *CoreAssetRepository_Create_Call) Run(run func(tx *gorm.DB, t *models.Asset)) *CoreAssetRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Asset))
	})
	return _c
}

func (_c *CoreAssetRepository_Create_Call) Return(_a0 error) *CoreAssetRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreAssetRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *models.Asset) error) *CoreAssetRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function with given fields: tx, ts
func (_m *CoreAssetRepository) CreateBatch(tx *gorm.DB, ts []models.Asset) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Asset) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreAssetRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type CoreAssetRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.Asset
func (_e *CoreAssetRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *CoreAssetRepository_CreateBatch_Call {
	return &CoreAssetRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *CoreAssetRepository_CreateBatch_Call) Run(run func(tx *gorm.DB, ts []models.Asset)) *CoreAssetRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Asset))
	})
	return _c
}

func (_c *CoreAssetRepository_CreateBatch_Call) Return(_a0 error) *CoreAssetRepository_CreateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreAssetRepository_CreateBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Asset) error) *CoreAssetRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tx, id
func (_m *CoreAssetRepository) Delete(tx *gorm.DB, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreAssetRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CoreAssetRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id uuid.UUID
func (_e *CoreAssetRepository_Expecter) Delete(tx interface{}, id interface{}) *CoreAssetRepository_Delete_Call {
	return &CoreAssetRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *CoreAssetRepository_Delete_Call) Run(run func(tx *gorm.DB, id uuid.UUID)) *CoreAssetRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CoreAssetRepository_Delete_Call) Return(_a0 error) *CoreAssetRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreAssetRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) error) *CoreAssetRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByName provides a mock function with given fields: name
func (_m *CoreAssetRepository) FindByName(name string) (models.Asset, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Asset, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) models.Asset); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAssetRepository_FindByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByName'
type CoreAssetRepository_FindByName_Call struct {
	*mock.Call
}

// FindByName is a helper method to define mock.On call
//   - name string
func (_e *CoreAssetRepository_Expecter) FindByName(name interface{}) *CoreAssetRepository_FindByName_Call {
	return &CoreAssetRepository_FindByName_Call{Call: _e.mock.On("FindByName", name)}
}

func (_c *CoreAssetRepository_FindByName_Call) Run(run func(name string)) *CoreAssetRepository_FindByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CoreAssetRepository_FindByName_Call) Return(_a0 models.Asset, _a1 error) *CoreAssetRepository_FindByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAssetRepository_FindByName_Call) RunAndReturn(run func(string) (models.Asset, error)) *CoreAssetRepository_FindByName_Call {
	_c.Call.Return(run)
	return _c
}

// FindOrCreate provides a mock function with given fields: tx, name
func (_m *CoreAssetRepository) FindOrCreate(tx *gorm.DB, name string) (models.Asset, error) {
	ret := _m.Called(tx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindOrCreate")
	}

	var r0 models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (models.Asset, error)); ok {
		return rf(tx, name)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) models.Asset); ok {
		r0 = rf(tx, name)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAssetRepository_FindOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOrCreate'
type CoreAssetRepository_FindOrCreate_Call struct {
	*mock.Call
}

// FindOrCreate is a helper method to define mock.On call
//   - tx *gorm.DB
//   - name string
func (_e *CoreAssetRepository_Expecter) FindOrCreate(tx interface{}, name interface{}) *CoreAssetRepository_FindOrCreate_Call {
	return &CoreAssetRepository_FindOrCreate_Call{Call: _e.mock.On("FindOrCreate", tx, name)}
}

func (_c *CoreAssetRepository_FindOrCreate_Call) Run(run func(tx *gorm.DB, name string)) *CoreAssetRepository_FindOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *CoreAssetRepository_FindOrCreate_Call) Return(_a0 models.Asset, _a1 error) *CoreAssetRepository_FindOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAssetRepository_FindOrCreate_Call) RunAndReturn(run func(*gorm.DB, string) (models.Asset, error)) *CoreAssetRepository_FindOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAssetsFromDB provides a mock function with no fields
func (_m *CoreAssetRepository) GetAllAssetsFromDB() ([]models.Asset, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAssetsFromDB")
	}

	var r0 []models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Asset, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Asset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAssetRepository_GetAllAssetsFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAssetsFromDB'
type CoreAssetRepository_GetAllAssetsFromDB_Call struct {
	*mock.Call
}

// GetAllAssetsFromDB is a helper method to define mock.On call
func (_e *CoreAssetRepository_Expecter) GetAllAssetsFromDB() *CoreAssetRepository_GetAllAssetsFromDB_Call {
	return &CoreAssetRepository_GetAllAssetsFromDB_Call{Call: _e.mock.On("GetAllAssetsFromDB")}
}

func (_c *CoreAssetRepository_GetAllAssetsFromDB_Call) Run(run func()) *CoreAssetRepository_GetAllAssetsFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreAssetRepository_GetAllAssetsFromDB_Call) Return(_a0 []models.Asset, _a1 error) *CoreAssetRepository_GetAllAssetsFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAssetRepository_GetAllAssetsFromDB_Call) RunAndReturn(run func() ([]models.Asset, error)) *CoreAssetRepository_GetAllAssetsFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetIDBySlug provides a mock function with given fields: projectID, slug
func (_m *CoreAssetRepository) GetAssetIDBySlug(projectID uuid.UUID, slug string) (uuid.UUID, error) {
	ret := _m.Called(projectID, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetIDBySlug")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (uuid.UUID, error)); ok {
		return rf(projectID, slug)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) uuid.UUID); ok {
		r0 = rf(projectID, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(projectID, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAssetRepository_GetAssetIDBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetIDBySlug'
type CoreAssetRepository_GetAssetIDBySlug_Call struct {
	*mock.Call
}

// GetAssetIDBySlug is a helper method to define mock.On call
//   - projectID uuid.UUID
//   - slug string
func (_e *CoreAssetRepository_Expecter) GetAssetIDBySlug(projectID interface{}, slug interface{}) *CoreAssetRepository_GetAssetIDBySlug_Call {
	return &CoreAssetRepository_GetAssetIDBySlug_Call{Call: _e.mock.On("GetAssetIDBySlug", projectID, slug)}
}

func (_c *CoreAssetRepository_GetAssetIDBySlug_Call) Run(run func(projectID uuid.UUID, slug string)) *CoreAssetRepository_GetAssetIDBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *CoreAssetRepository_GetAssetIDBySlug_Call) Return(_a0 uuid.UUID, _a1 error) *CoreAssetRepository_GetAssetIDBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAssetRepository_GetAssetIDBySlug_Call) RunAndReturn(run func(uuid.UUID, string) (uuid.UUID, error)) *CoreAssetRepository_GetAssetIDBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectID provides a mock function with given fields: projectID
func (_m *CoreAssetRepository) GetByProjectID(projectID uuid.UUID) ([]models.Asset, error) {
	ret := _m.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectID")
	}

	var r0 []models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Asset, error)); ok {
		return rf(projectID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Asset); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAssetRepository_GetByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectID'
type CoreAssetRepository_GetByProjectID_Call struct {
	*mock.Call
}

// GetByProjectID is a helper method to define mock.On call
//   - projectID uuid.UUID
func (_e *CoreAssetRepository_Expecter) GetByProjectID(projectID interface{}) *CoreAssetRepository_GetByProjectID_Call {
	return &CoreAssetRepository_GetByProjectID_Call{Call: _e.mock.On("GetByProjectID", projectID)}
}

func (_c *CoreAssetRepository_GetByProjectID_Call) Run(run func(projectID uuid.UUID)) *CoreAssetRepository_GetByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *CoreAssetRepository_GetByProjectID_Call) Return(_a0 []models.Asset, _a1 error) *CoreAssetRepository_GetByProjectID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAssetRepository_GetByProjectID_Call) RunAndReturn(run func(uuid.UUID) ([]models.Asset, error)) *CoreAssetRepository_GetByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: tx
func (_m *CoreAssetRepository) GetDB(tx *gorm.DB) *gorm.DB {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// CoreAssetRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type CoreAssetRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *CoreAssetRepository_Expecter) GetDB(tx interface{}) *CoreAssetRepository_GetDB_Call {
	return &CoreAssetRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *CoreAssetRepository_GetDB_Call) Run(run func(tx *gorm.DB)) *CoreAssetRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *CoreAssetRepository_GetDB_Call) Return(_a0 *gorm.DB) *CoreAssetRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreAssetRepository_GetDB_Call) RunAndReturn(run func(*gorm.DB) *gorm.DB) *CoreAssetRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ids
func (_m *CoreAssetRepository) List(ids []uuid.UUID) ([]models.Asset, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID) ([]models.Asset, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]uuid.UUID) []models.Asset); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAssetRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CoreAssetRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []uuid.UUID
func (_e *CoreAssetRepository_Expecter) List(ids interface{}) *CoreAssetRepository_List_Call {
	return &CoreAssetRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *CoreAssetRepository_List_Call) Run(run func(ids []uuid.UUID)) *CoreAssetRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uuid.UUID))
	})
	return _c
}

func (_c *CoreAssetRepository_List_Call) Return(_a0 []models.Asset, _a1 error) *CoreAssetRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAssetRepository_List_Call) RunAndReturn(run func([]uuid.UUID) ([]models.Asset, error)) *CoreAssetRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *CoreAssetRepository) Read(id uuid.UUID) (models.Asset, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Asset, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Asset); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAssetRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type CoreAssetRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *CoreAssetRepository_Expecter) Read(id interface{}) *CoreAssetRepository_Read_Call {
	return &CoreAssetRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *CoreAssetRepository_Read_Call) Run(run func(id uuid.UUID)) *CoreAssetRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *CoreAssetRepository_Read_Call) Return(_a0 models.Asset, _a1 error) *CoreAssetRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAssetRepository_Read_Call) RunAndReturn(run func(uuid.UUID) (models.Asset, error)) *CoreAssetRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBySlug provides a mock function with given fields: projectID, slug
func (_m *CoreAssetRepository) ReadBySlug(projectID uuid.UUID, slug string) (models.Asset, error) {
	ret := _m.Called(projectID, slug)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlug")
	}

	var r0 models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (models.Asset, error)); ok {
		return rf(projectID, slug)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) models.Asset); ok {
		r0 = rf(projectID, slug)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(projectID, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAssetRepository_ReadBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlug'
type CoreAssetRepository_ReadBySlug_Call struct {
	*mock.Call
}

// ReadBySlug is a helper method to define mock.On call
//   - projectID uuid.UUID
//   - slug string
func (_e *CoreAssetRepository_Expecter) ReadBySlug(projectID interface{}, slug interface{}) *CoreAssetRepository_ReadBySlug_Call {
	return &CoreAssetRepository_ReadBySlug_Call{Call: _e.mock.On("ReadBySlug", projectID, slug)}
}

func (_c *CoreAssetRepository_ReadBySlug_Call) Run(run func(projectID uuid.UUID, slug string)) *CoreAssetRepository_ReadBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *CoreAssetRepository_ReadBySlug_Call) Return(_a0 models.Asset, _a1 error) *CoreAssetRepository_ReadBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAssetRepository_ReadBySlug_Call) RunAndReturn(run func(uuid.UUID, string) (models.Asset, error)) *CoreAssetRepository_ReadBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBySlugUnscoped provides a mock function with given fields: projectID, slug
func (_m *CoreAssetRepository) ReadBySlugUnscoped(projectID uuid.UUID, slug string) (models.Asset, error) {
	ret := _m.Called(projectID, slug)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlugUnscoped")
	}

	var r0 models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (models.Asset, error)); ok {
		return rf(projectID, slug)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) models.Asset); ok {
		r0 = rf(projectID, slug)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(projectID, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreAssetRepository_ReadBySlugUnscoped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlugUnscoped'
type CoreAssetRepository_ReadBySlugUnscoped_Call struct {
	*mock.Call
}

// ReadBySlugUnscoped is a helper method to define mock.On call
//   - projectID uuid.UUID
//   - slug string
func (_e *CoreAssetRepository_Expecter) ReadBySlugUnscoped(projectID interface{}, slug interface{}) *CoreAssetRepository_ReadBySlugUnscoped_Call {
	return &CoreAssetRepository_ReadBySlugUnscoped_Call{Call: _e.mock.On("ReadBySlugUnscoped", projectID, slug)}
}

func (_c *CoreAssetRepository_ReadBySlugUnscoped_Call) Run(run func(projectID uuid.UUID, slug string)) *CoreAssetRepository_ReadBySlugUnscoped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *CoreAssetRepository_ReadBySlugUnscoped_Call) Return(_a0 models.Asset, _a1 error) *CoreAssetRepository_ReadBySlugUnscoped_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreAssetRepository_ReadBySlugUnscoped_Call) RunAndReturn(run func(uuid.UUID, string) (models.Asset, error)) *CoreAssetRepository_ReadBySlugUnscoped_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, t
func (_m *CoreAssetRepository) Save(tx *gorm.DB, t *models.Asset) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Asset) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreAssetRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type CoreAssetRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.Asset
func (_e *CoreAssetRepository_Expecter) Save(tx interface{}, t interface{}) *CoreAssetRepository_Save_Call {
	return &CoreAssetRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *CoreAssetRepository_Save_Call) Run(run func(tx *gorm.DB, t *models.Asset)) *CoreAssetRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Asset))
	})
	return _c
}

func (_c *CoreAssetRepository_Save_Call) Return(_a0 error) *CoreAssetRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreAssetRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.Asset) error) *CoreAssetRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, ts
func (_m *CoreAssetRepository) SaveBatch(tx *gorm.DB, ts []models.Asset) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Asset) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreAssetRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type CoreAssetRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.Asset
func (_e *CoreAssetRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *CoreAssetRepository_SaveBatch_Call {
	return &CoreAssetRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *CoreAssetRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, ts []models.Asset)) *CoreAssetRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Asset))
	})
	return _c
}

func (_c *CoreAssetRepository_SaveBatch_Call) Return(_a0 error) *CoreAssetRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreAssetRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Asset) error) *CoreAssetRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: _a0
func (_m *CoreAssetRepository) Transaction(_a0 func(*gorm.DB) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreAssetRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type CoreAssetRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - _a0 func(*gorm.DB) error
func (_e *CoreAssetRepository_Expecter) Transaction(_a0 interface{}) *CoreAssetRepository_Transaction_Call {
	return &CoreAssetRepository_Transaction_Call{Call: _e.mock.On("Transaction", _a0)}
}

func (_c *CoreAssetRepository_Transaction_Call) Run(run func(_a0 func(*gorm.DB) error)) *CoreAssetRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *CoreAssetRepository_Transaction_Call) Return(_a0 error) *CoreAssetRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreAssetRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *CoreAssetRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: tx, asset
func (_m *CoreAssetRepository) Update(tx *gorm.DB, asset *models.Asset) error {
	ret := _m.Called(tx, asset)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Asset) error); ok {
		r0 = rf(tx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreAssetRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CoreAssetRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - tx *gorm.DB
//   - asset *models.Asset
func (_e *CoreAssetRepository_Expecter) Update(tx interface{}, asset interface{}) *CoreAssetRepository_Update_Call {
	return &CoreAssetRepository_Update_Call{Call: _e.mock.On("Update", tx, asset)}
}

func (_c *CoreAssetRepository_Update_Call) Run(run func(tx *gorm.DB, asset *models.Asset)) *CoreAssetRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Asset))
	})
	return _c
}

func (_c *CoreAssetRepository_Update_Call) Return(_a0 error) *CoreAssetRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreAssetRepository_Update_Call) RunAndReturn(run func(*gorm.DB, *models.Asset) error) *CoreAssetRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreAssetRepository creates a new instance of CoreAssetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreAssetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreAssetRepository {
	mock := &CoreAssetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
