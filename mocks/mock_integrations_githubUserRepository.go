// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/l3montree-dev/devguard/internal/database/models"

	uuid "github.com/google/uuid"
)

// IntegrationsGithubUserRepository is an autogenerated mock type for the externalUserRepository type
type IntegrationsGithubUserRepository struct {
	mock.Mock
}

type IntegrationsGithubUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IntegrationsGithubUserRepository) EXPECT() *IntegrationsGithubUserRepository_Expecter {
	return &IntegrationsGithubUserRepository_Expecter{mock: &_m.Mock}
}

// FindByOrgID provides a mock function with given fields: tx, orgID
func (_m *IntegrationsGithubUserRepository) FindByOrgID(tx *gorm.DB, orgID uuid.UUID) ([]models.ExternalUser, error) {
	ret := _m.Called(tx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for FindByOrgID")
	}

	var r0 []models.ExternalUser
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) ([]models.ExternalUser, error)); ok {
		return rf(tx, orgID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) []models.ExternalUser); ok {
		r0 = rf(tx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ExternalUser)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, uuid.UUID) error); ok {
		r1 = rf(tx, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntegrationsGithubUserRepository_FindByOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOrgID'
type IntegrationsGithubUserRepository_FindByOrgID_Call struct {
	*mock.Call
}

// FindByOrgID is a helper method to define mock.On call
//   - tx *gorm.DB
//   - orgID uuid.UUID
func (_e *IntegrationsGithubUserRepository_Expecter) FindByOrgID(tx interface{}, orgID interface{}) *IntegrationsGithubUserRepository_FindByOrgID_Call {
	return &IntegrationsGithubUserRepository_FindByOrgID_Call{Call: _e.mock.On("FindByOrgID", tx, orgID)}
}

func (_c *IntegrationsGithubUserRepository_FindByOrgID_Call) Run(run func(tx *gorm.DB, orgID uuid.UUID)) *IntegrationsGithubUserRepository_FindByOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *IntegrationsGithubUserRepository_FindByOrgID_Call) Return(_a0 []models.ExternalUser, _a1 error) *IntegrationsGithubUserRepository_FindByOrgID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntegrationsGithubUserRepository_FindByOrgID_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) ([]models.ExternalUser, error)) *IntegrationsGithubUserRepository_FindByOrgID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: tx
func (_m *IntegrationsGithubUserRepository) GetDB(tx *gorm.DB) *gorm.DB {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// IntegrationsGithubUserRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type IntegrationsGithubUserRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *IntegrationsGithubUserRepository_Expecter) GetDB(tx interface{}) *IntegrationsGithubUserRepository_GetDB_Call {
	return &IntegrationsGithubUserRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *IntegrationsGithubUserRepository_GetDB_Call) Run(run func(tx *gorm.DB)) *IntegrationsGithubUserRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *IntegrationsGithubUserRepository_GetDB_Call) Return(_a0 *gorm.DB) *IntegrationsGithubUserRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IntegrationsGithubUserRepository_GetDB_Call) RunAndReturn(run func(*gorm.DB) *gorm.DB) *IntegrationsGithubUserRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: db, user
func (_m *IntegrationsGithubUserRepository) Save(db *gorm.DB, user *models.ExternalUser) error {
	ret := _m.Called(db, user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.ExternalUser) error); ok {
		r0 = rf(db, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IntegrationsGithubUserRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type IntegrationsGithubUserRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - db *gorm.DB
//   - user *models.GithubUser
func (_e *IntegrationsGithubUserRepository_Expecter) Save(db interface{}, user interface{}) *IntegrationsGithubUserRepository_Save_Call {
	return &IntegrationsGithubUserRepository_Save_Call{Call: _e.mock.On("Save", db, user)}
}

func (_c *IntegrationsGithubUserRepository_Save_Call) Run(run func(db *gorm.DB, user *models.ExternalUser)) *IntegrationsGithubUserRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.ExternalUser))
	})
	return _c
}

func (_c *IntegrationsGithubUserRepository_Save_Call) Return(_a0 error) *IntegrationsGithubUserRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IntegrationsGithubUserRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.ExternalUser) error) *IntegrationsGithubUserRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewIntegrationsGithubUserRepository creates a new instance of IntegrationsGithubUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntegrationsGithubUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntegrationsGithubUserRepository {
	mock := &IntegrationsGithubUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
