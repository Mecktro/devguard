// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// CoreComponentService is an autogenerated mock type for the ComponentService type
type CoreComponentService struct {
	mock.Mock
}

type CoreComponentService_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreComponentService) EXPECT() *CoreComponentService_Expecter {
	return &CoreComponentService_Expecter{mock: &_m.Mock}
}

// GetAndSaveLicenseInformation provides a mock function with given fields: assetVersionName, assetID, scanner, version
func (_m *CoreComponentService) GetAndSaveLicenseInformation(assetVersionName string, assetID uuid.UUID, scanner string, version string) ([]models.Component, error) {
	ret := _m.Called(assetVersionName, assetID, scanner, version)

	if len(ret) == 0 {
		panic("no return value specified for GetAndSaveLicenseInformation")
	}

	var r0 []models.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, string, string) ([]models.Component, error)); ok {
		return rf(assetVersionName, assetID, scanner, version)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, string, string) []models.Component); ok {
		r0 = rf(assetVersionName, assetID, scanner, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Component)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID, string, string) error); ok {
		r1 = rf(assetVersionName, assetID, scanner, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreComponentService_GetAndSaveLicenseInformation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAndSaveLicenseInformation'
type CoreComponentService_GetAndSaveLicenseInformation_Call struct {
	*mock.Call
}

// GetAndSaveLicenseInformation is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scanner string
//   - version string
func (_e *CoreComponentService_Expecter) GetAndSaveLicenseInformation(assetVersionName interface{}, assetID interface{}, scanner interface{}, version interface{}) *CoreComponentService_GetAndSaveLicenseInformation_Call {
	return &CoreComponentService_GetAndSaveLicenseInformation_Call{Call: _e.mock.On("GetAndSaveLicenseInformation", assetVersionName, assetID, scanner, version)}
}

func (_c *CoreComponentService_GetAndSaveLicenseInformation_Call) Run(run func(assetVersionName string, assetID uuid.UUID, scanner string, version string)) *CoreComponentService_GetAndSaveLicenseInformation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CoreComponentService_GetAndSaveLicenseInformation_Call) Return(_a0 []models.Component, _a1 error) *CoreComponentService_GetAndSaveLicenseInformation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreComponentService_GetAndSaveLicenseInformation_Call) RunAndReturn(run func(string, uuid.UUID, string, string) ([]models.Component, error)) *CoreComponentService_GetAndSaveLicenseInformation_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicense provides a mock function with given fields: component
func (_m *CoreComponentService) GetLicense(component models.Component) (models.Component, error) {
	ret := _m.Called(component)

	if len(ret) == 0 {
		panic("no return value specified for GetLicense")
	}

	var r0 models.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Component) (models.Component, error)); ok {
		return rf(component)
	}
	if rf, ok := ret.Get(0).(func(models.Component) models.Component); ok {
		r0 = rf(component)
	} else {
		r0 = ret.Get(0).(models.Component)
	}

	if rf, ok := ret.Get(1).(func(models.Component) error); ok {
		r1 = rf(component)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreComponentService_GetLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicense'
type CoreComponentService_GetLicense_Call struct {
	*mock.Call
}

// GetLicense is a helper method to define mock.On call
//   - component models.Component
func (_e *CoreComponentService_Expecter) GetLicense(component interface{}) *CoreComponentService_GetLicense_Call {
	return &CoreComponentService_GetLicense_Call{Call: _e.mock.On("GetLicense", component)}
}

func (_c *CoreComponentService_GetLicense_Call) Run(run func(component models.Component)) *CoreComponentService_GetLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Component))
	})
	return _c
}

func (_c *CoreComponentService_GetLicense_Call) Return(_a0 models.Component, _a1 error) *CoreComponentService_GetLicense_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreComponentService_GetLicense_Call) RunAndReturn(run func(models.Component) (models.Component, error)) *CoreComponentService_GetLicense_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshComponentProjectInformation provides a mock function with given fields: project
func (_m *CoreComponentService) RefreshComponentProjectInformation(project models.ComponentProject) {
	_m.Called(project)
}

// CoreComponentService_RefreshComponentProjectInformation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshComponentProjectInformation'
type CoreComponentService_RefreshComponentProjectInformation_Call struct {
	*mock.Call
}

// RefreshComponentProjectInformation is a helper method to define mock.On call
//   - project models.ComponentProject
func (_e *CoreComponentService_Expecter) RefreshComponentProjectInformation(project interface{}) *CoreComponentService_RefreshComponentProjectInformation_Call {
	return &CoreComponentService_RefreshComponentProjectInformation_Call{Call: _e.mock.On("RefreshComponentProjectInformation", project)}
}

func (_c *CoreComponentService_RefreshComponentProjectInformation_Call) Run(run func(project models.ComponentProject)) *CoreComponentService_RefreshComponentProjectInformation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ComponentProject))
	})
	return _c
}

func (_c *CoreComponentService_RefreshComponentProjectInformation_Call) Return() *CoreComponentService_RefreshComponentProjectInformation_Call {
	_c.Call.Return()
	return _c
}

func (_c *CoreComponentService_RefreshComponentProjectInformation_Call) RunAndReturn(run func(models.ComponentProject)) *CoreComponentService_RefreshComponentProjectInformation_Call {
	_c.Run(run)
	return _c
}

// NewCoreComponentService creates a new instance of CoreComponentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreComponentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreComponentService {
	mock := &CoreComponentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
