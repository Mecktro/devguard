// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// IntegrationsDependencyVulnRepository is an autogenerated mock type for the dependencyVulnRepository type
type IntegrationsDependencyVulnRepository struct {
	mock.Mock
}

type IntegrationsDependencyVulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IntegrationsDependencyVulnRepository) EXPECT() *IntegrationsDependencyVulnRepository_Expecter {
	return &IntegrationsDependencyVulnRepository_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: id
func (_m *IntegrationsDependencyVulnRepository) Read(id string) (models.DependencyVuln, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.DependencyVuln, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.DependencyVuln); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.DependencyVuln)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntegrationsDependencyVulnRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type IntegrationsDependencyVulnRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *IntegrationsDependencyVulnRepository_Expecter) Read(id interface{}) *IntegrationsDependencyVulnRepository_Read_Call {
	return &IntegrationsDependencyVulnRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *IntegrationsDependencyVulnRepository_Read_Call) Run(run func(id string)) *IntegrationsDependencyVulnRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_Read_Call) Return(_a0 models.DependencyVuln, _a1 error) *IntegrationsDependencyVulnRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntegrationsDependencyVulnRepository_Read_Call) RunAndReturn(run func(string) (models.DependencyVuln, error)) *IntegrationsDependencyVulnRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewIntegrationsDependencyVulnRepository creates a new instance of IntegrationsDependencyVulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntegrationsDependencyVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntegrationsDependencyVulnRepository {
	mock := &IntegrationsDependencyVulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
