// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/l3montree-dev/devguard/internal/database/models"

	uuid "github.com/google/uuid"
)

// IntotoRepository is an autogenerated mock type for the repository type
type IntotoRepository struct {
	mock.Mock
}

type IntotoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IntotoRepository) EXPECT() *IntotoRepository_Expecter {
	return &IntotoRepository_Expecter{mock: &_m.Mock}
}

// FindByAssetAndSupplyChainId provides a mock function with given fields: assetID, supplyChainId
func (_m *IntotoRepository) FindByAssetAndSupplyChainId(assetID uuid.UUID, supplyChainId string) ([]models.InTotoLink, error) {
	ret := _m.Called(assetID, supplyChainId)

	if len(ret) == 0 {
		panic("no return value specified for FindByAssetAndSupplyChainId")
	}

	var r0 []models.InTotoLink
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) ([]models.InTotoLink, error)); ok {
		return rf(assetID, supplyChainId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) []models.InTotoLink); ok {
		r0 = rf(assetID, supplyChainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.InTotoLink)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(assetID, supplyChainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntotoRepository_FindByAssetAndSupplyChainId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByAssetAndSupplyChainId'
type IntotoRepository_FindByAssetAndSupplyChainId_Call struct {
	*mock.Call
}

// FindByAssetAndSupplyChainId is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - supplyChainId string
func (_e *IntotoRepository_Expecter) FindByAssetAndSupplyChainId(assetID interface{}, supplyChainId interface{}) *IntotoRepository_FindByAssetAndSupplyChainId_Call {
	return &IntotoRepository_FindByAssetAndSupplyChainId_Call{Call: _e.mock.On("FindByAssetAndSupplyChainId", assetID, supplyChainId)}
}

func (_c *IntotoRepository_FindByAssetAndSupplyChainId_Call) Run(run func(assetID uuid.UUID, supplyChainId string)) *IntotoRepository_FindByAssetAndSupplyChainId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *IntotoRepository_FindByAssetAndSupplyChainId_Call) Return(_a0 []models.InTotoLink, _a1 error) *IntotoRepository_FindByAssetAndSupplyChainId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntotoRepository_FindByAssetAndSupplyChainId_Call) RunAndReturn(run func(uuid.UUID, string) ([]models.InTotoLink, error)) *IntotoRepository_FindByAssetAndSupplyChainId_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, model
func (_m *IntotoRepository) Save(tx *gorm.DB, model *models.InTotoLink) error {
	ret := _m.Called(tx, model)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.InTotoLink) error); ok {
		r0 = rf(tx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IntotoRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type IntotoRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - model *models.InTotoLink
func (_e *IntotoRepository_Expecter) Save(tx interface{}, model interface{}) *IntotoRepository_Save_Call {
	return &IntotoRepository_Save_Call{Call: _e.mock.On("Save", tx, model)}
}

func (_c *IntotoRepository_Save_Call) Run(run func(tx *gorm.DB, model *models.InTotoLink)) *IntotoRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.InTotoLink))
	})
	return _c
}

func (_c *IntotoRepository_Save_Call) Return(_a0 error) *IntotoRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IntotoRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.InTotoLink) error) *IntotoRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewIntotoRepository creates a new instance of IntotoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntotoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntotoRepository {
	mock := &IntotoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
