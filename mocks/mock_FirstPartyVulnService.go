// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// FirstPartyVulnService is an autogenerated mock type for the FirstPartyVulnService type
type FirstPartyVulnService struct {
	mock.Mock
}

type FirstPartyVulnService_Expecter struct {
	mock *mock.Mock
}

func (_m *FirstPartyVulnService) EXPECT() *FirstPartyVulnService_Expecter {
	return &FirstPartyVulnService_Expecter{mock: &_m.Mock}
}

// UpdateFirstPartyVulnState provides a mock function with given fields: tx, userID, firstPartyVuln, statusType, justification
func (_m *FirstPartyVulnService) UpdateFirstPartyVulnState(tx *gorm.DB, userID string, firstPartyVuln *models.FirstPartyVuln, statusType string, justification string) (models.VulnEvent, error) {
	ret := _m.Called(tx, userID, firstPartyVuln, statusType, justification)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFirstPartyVulnState")
	}

	var r0 models.VulnEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, *models.FirstPartyVuln, string, string) (models.VulnEvent, error)); ok {
		return rf(tx, userID, firstPartyVuln, statusType, justification)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, *models.FirstPartyVuln, string, string) models.VulnEvent); ok {
		r0 = rf(tx, userID, firstPartyVuln, statusType, justification)
	} else {
		r0 = ret.Get(0).(models.VulnEvent)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, *models.FirstPartyVuln, string, string) error); ok {
		r1 = rf(tx, userID, firstPartyVuln, statusType, justification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FirstPartyVulnService_UpdateFirstPartyVulnState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFirstPartyVulnState'
type FirstPartyVulnService_UpdateFirstPartyVulnState_Call struct {
	*mock.Call
}

// UpdateFirstPartyVulnState is a helper method to define mock.On call
//   - tx *gorm.DB
//   - userID string
//   - firstPartyVuln *models.FirstPartyVuln
//   - statusType string
//   - justification string
func (_e *FirstPartyVulnService_Expecter) UpdateFirstPartyVulnState(tx interface{}, userID interface{}, firstPartyVuln interface{}, statusType interface{}, justification interface{}) *FirstPartyVulnService_UpdateFirstPartyVulnState_Call {
	return &FirstPartyVulnService_UpdateFirstPartyVulnState_Call{Call: _e.mock.On("UpdateFirstPartyVulnState", tx, userID, firstPartyVuln, statusType, justification)}
}

func (_c *FirstPartyVulnService_UpdateFirstPartyVulnState_Call) Run(run func(tx *gorm.DB, userID string, firstPartyVuln *models.FirstPartyVuln, statusType string, justification string)) *FirstPartyVulnService_UpdateFirstPartyVulnState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(*models.FirstPartyVuln), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *FirstPartyVulnService_UpdateFirstPartyVulnState_Call) Return(_a0 models.VulnEvent, _a1 error) *FirstPartyVulnService_UpdateFirstPartyVulnState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FirstPartyVulnService_UpdateFirstPartyVulnState_Call) RunAndReturn(run func(*gorm.DB, string, *models.FirstPartyVuln, string, string) (models.VulnEvent, error)) *FirstPartyVulnService_UpdateFirstPartyVulnState_Call {
	_c.Call.Return(run)
	return _c
}

// UserDetectedFirstPartyVulns provides a mock function with given fields: tx, userID, scannerId, firstPartyVulns
func (_m *FirstPartyVulnService) UserDetectedFirstPartyVulns(tx *gorm.DB, userID string, scannerId string, firstPartyVulns []models.FirstPartyVuln) error {
	ret := _m.Called(tx, userID, scannerId, firstPartyVulns)

	if len(ret) == 0 {
		panic("no return value specified for UserDetectedFirstPartyVulns")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, string, []models.FirstPartyVuln) error); ok {
		r0 = rf(tx, userID, scannerId, firstPartyVulns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FirstPartyVulnService_UserDetectedFirstPartyVulns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserDetectedFirstPartyVulns'
type FirstPartyVulnService_UserDetectedFirstPartyVulns_Call struct {
	*mock.Call
}

// UserDetectedFirstPartyVulns is a helper method to define mock.On call
//   - tx *gorm.DB
//   - userID string
//   - scannerId string
//   - firstPartyVulns []models.FirstPartyVuln
func (_e *FirstPartyVulnService_Expecter) UserDetectedFirstPartyVulns(tx interface{}, userID interface{}, scannerId interface{}, firstPartyVulns interface{}) *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call {
	return &FirstPartyVulnService_UserDetectedFirstPartyVulns_Call{Call: _e.mock.On("UserDetectedFirstPartyVulns", tx, userID, scannerId, firstPartyVulns)}
}

func (_c *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call) Run(run func(tx *gorm.DB, userID string, scannerId string, firstPartyVulns []models.FirstPartyVuln)) *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(string), args[3].([]models.FirstPartyVuln))
	})
	return _c
}

func (_c *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call) Return(_a0 error) *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call) RunAndReturn(run func(*gorm.DB, string, string, []models.FirstPartyVuln) error) *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call {
	_c.Call.Return(run)
	return _c
}

// UserFixedFirstPartyVulns provides a mock function with given fields: tx, userID, firstPartyVulns
func (_m *FirstPartyVulnService) UserFixedFirstPartyVulns(tx *gorm.DB, userID string, firstPartyVulns []models.FirstPartyVuln) error {
	ret := _m.Called(tx, userID, firstPartyVulns)

	if len(ret) == 0 {
		panic("no return value specified for UserFixedFirstPartyVulns")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, []models.FirstPartyVuln) error); ok {
		r0 = rf(tx, userID, firstPartyVulns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FirstPartyVulnService_UserFixedFirstPartyVulns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserFixedFirstPartyVulns'
type FirstPartyVulnService_UserFixedFirstPartyVulns_Call struct {
	*mock.Call
}

// UserFixedFirstPartyVulns is a helper method to define mock.On call
//   - tx *gorm.DB
//   - userID string
//   - firstPartyVulns []models.FirstPartyVuln
func (_e *FirstPartyVulnService_Expecter) UserFixedFirstPartyVulns(tx interface{}, userID interface{}, firstPartyVulns interface{}) *FirstPartyVulnService_UserFixedFirstPartyVulns_Call {
	return &FirstPartyVulnService_UserFixedFirstPartyVulns_Call{Call: _e.mock.On("UserFixedFirstPartyVulns", tx, userID, firstPartyVulns)}
}

func (_c *FirstPartyVulnService_UserFixedFirstPartyVulns_Call) Run(run func(tx *gorm.DB, userID string, firstPartyVulns []models.FirstPartyVuln)) *FirstPartyVulnService_UserFixedFirstPartyVulns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].([]models.FirstPartyVuln))
	})
	return _c
}

func (_c *FirstPartyVulnService_UserFixedFirstPartyVulns_Call) Return(_a0 error) *FirstPartyVulnService_UserFixedFirstPartyVulns_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FirstPartyVulnService_UserFixedFirstPartyVulns_Call) RunAndReturn(run func(*gorm.DB, string, []models.FirstPartyVuln) error) *FirstPartyVulnService_UserFixedFirstPartyVulns_Call {
	_c.Call.Return(run)
	return _c
}

// NewFirstPartyVulnService creates a new instance of FirstPartyVulnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFirstPartyVulnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FirstPartyVulnService {
	mock := &FirstPartyVulnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
