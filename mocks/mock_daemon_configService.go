// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DaemonConfigService is an autogenerated mock type for the configService type
type DaemonConfigService struct {
	mock.Mock
}

type DaemonConfigService_Expecter struct {
	mock *mock.Mock
}

func (_m *DaemonConfigService) EXPECT() *DaemonConfigService_Expecter {
	return &DaemonConfigService_Expecter{mock: &_m.Mock}
}

// GetJSONConfig provides a mock function with given fields: key, v
func (_m *DaemonConfigService) GetJSONConfig(key string, v interface{}) error {
	ret := _m.Called(key, v)

	if len(ret) == 0 {
		panic("no return value specified for GetJSONConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DaemonConfigService_GetJSONConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJSONConfig'
type DaemonConfigService_GetJSONConfig_Call struct {
	*mock.Call
}

// GetJSONConfig is a helper method to define mock.On call
//   - key string
//   - v interface{}
func (_e *DaemonConfigService_Expecter) GetJSONConfig(key interface{}, v interface{}) *DaemonConfigService_GetJSONConfig_Call {
	return &DaemonConfigService_GetJSONConfig_Call{Call: _e.mock.On("GetJSONConfig", key, v)}
}

func (_c *DaemonConfigService_GetJSONConfig_Call) Run(run func(key string, v interface{})) *DaemonConfigService_GetJSONConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *DaemonConfigService_GetJSONConfig_Call) Return(_a0 error) *DaemonConfigService_GetJSONConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DaemonConfigService_GetJSONConfig_Call) RunAndReturn(run func(string, interface{}) error) *DaemonConfigService_GetJSONConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SetJSONConfig provides a mock function with given fields: key, v
func (_m *DaemonConfigService) SetJSONConfig(key string, v interface{}) error {
	ret := _m.Called(key, v)

	if len(ret) == 0 {
		panic("no return value specified for SetJSONConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DaemonConfigService_SetJSONConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJSONConfig'
type DaemonConfigService_SetJSONConfig_Call struct {
	*mock.Call
}

// SetJSONConfig is a helper method to define mock.On call
//   - key string
//   - v interface{}
func (_e *DaemonConfigService_Expecter) SetJSONConfig(key interface{}, v interface{}) *DaemonConfigService_SetJSONConfig_Call {
	return &DaemonConfigService_SetJSONConfig_Call{Call: _e.mock.On("SetJSONConfig", key, v)}
}

func (_c *DaemonConfigService_SetJSONConfig_Call) Run(run func(key string, v interface{})) *DaemonConfigService_SetJSONConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *DaemonConfigService_SetJSONConfig_Call) Return(_a0 error) *DaemonConfigService_SetJSONConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DaemonConfigService_SetJSONConfig_Call) RunAndReturn(run func(string, interface{}) error) *DaemonConfigService_SetJSONConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewDaemonConfigService creates a new instance of DaemonConfigService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDaemonConfigService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DaemonConfigService {
	mock := &DaemonConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
