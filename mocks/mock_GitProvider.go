// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewGitProvider creates a new instance of GitProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitProvider {
	mock := &GitProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GitProvider is an autogenerated mock type for the GitProvider type
type GitProvider struct {
	mock.Mock
}

type GitProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *GitProvider) EXPECT() *GitProvider_Expecter {
	return &GitProvider_Expecter{mock: &_m.Mock}
}

// GetBaseURL provides a mock function for the type GitProvider
func (_mock *GitProvider) GetBaseURL() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBaseURL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// GitProvider_GetBaseURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBaseURL'
type GitProvider_GetBaseURL_Call struct {
	*mock.Call
}

// GetBaseURL is a helper method to define mock.On call
func (_e *GitProvider_Expecter) GetBaseURL() *GitProvider_GetBaseURL_Call {
	return &GitProvider_GetBaseURL_Call{Call: _e.mock.On("GetBaseURL")}
}

func (_c *GitProvider_GetBaseURL_Call) Run(run func()) *GitProvider_GetBaseURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GitProvider_GetBaseURL_Call) Return(s string) *GitProvider_GetBaseURL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *GitProvider_GetBaseURL_Call) RunAndReturn(run func() string) *GitProvider_GetBaseURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderID provides a mock function for the type GitProvider
func (_mock *GitProvider) GetProviderID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProviderID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// GitProvider_GetProviderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderID'
type GitProvider_GetProviderID_Call struct {
	*mock.Call
}

// GetProviderID is a helper method to define mock.On call
func (_e *GitProvider_Expecter) GetProviderID() *GitProvider_GetProviderID_Call {
	return &GitProvider_GetProviderID_Call{Call: _e.mock.On("GetProviderID")}
}

func (_c *GitProvider_GetProviderID_Call) Run(run func()) *GitProvider_GetProviderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GitProvider_GetProviderID_Call) Return(s string) *GitProvider_GetProviderID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *GitProvider_GetProviderID_Call) RunAndReturn(run func() string) *GitProvider_GetProviderID_Call {
	_c.Call.Return(run)
	return _c
}
