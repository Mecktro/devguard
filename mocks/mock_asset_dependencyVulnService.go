// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// AssetDependencyVulnService is an autogenerated mock type for the dependencyVulnService type
type AssetDependencyVulnService struct {
	mock.Mock
}

type AssetDependencyVulnService_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetDependencyVulnService) EXPECT() *AssetDependencyVulnService_Expecter {
	return &AssetDependencyVulnService_Expecter{mock: &_m.Mock}
}

// RecalculateRawRiskAssessment provides a mock function with given fields: tx, responsible, dependencyVulns, justification, _a4
func (_m *AssetDependencyVulnService) RecalculateRawRiskAssessment(tx *gorm.DB, responsible string, dependencyVulns []models.DependencyVuln, justification string, _a4 models.Asset) error {
	ret := _m.Called(tx, responsible, dependencyVulns, justification, _a4)

	if len(ret) == 0 {
		panic("no return value specified for RecalculateRawRiskAssessment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, []models.DependencyVuln, string, models.Asset) error); ok {
		r0 = rf(tx, responsible, dependencyVulns, justification, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetDependencyVulnService_RecalculateRawRiskAssessment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecalculateRawRiskAssessment'
type AssetDependencyVulnService_RecalculateRawRiskAssessment_Call struct {
	*mock.Call
}

// RecalculateRawRiskAssessment is a helper method to define mock.On call
//   - tx *gorm.DB
//   - responsible string
//   - dependencyVulns []models.DependencyVuln
//   - justification string
//   - _a4 models.Asset
func (_e *AssetDependencyVulnService_Expecter) RecalculateRawRiskAssessment(tx interface{}, responsible interface{}, dependencyVulns interface{}, justification interface{}, _a4 interface{}) *AssetDependencyVulnService_RecalculateRawRiskAssessment_Call {
	return &AssetDependencyVulnService_RecalculateRawRiskAssessment_Call{Call: _e.mock.On("RecalculateRawRiskAssessment", tx, responsible, dependencyVulns, justification, _a4)}
}

func (_c *AssetDependencyVulnService_RecalculateRawRiskAssessment_Call) Run(run func(tx *gorm.DB, responsible string, dependencyVulns []models.DependencyVuln, justification string, _a4 models.Asset)) *AssetDependencyVulnService_RecalculateRawRiskAssessment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].([]models.DependencyVuln), args[3].(string), args[4].(models.Asset))
	})
	return _c
}

func (_c *AssetDependencyVulnService_RecalculateRawRiskAssessment_Call) Return(_a0 error) *AssetDependencyVulnService_RecalculateRawRiskAssessment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetDependencyVulnService_RecalculateRawRiskAssessment_Call) RunAndReturn(run func(*gorm.DB, string, []models.DependencyVuln, string, models.Asset) error) *AssetDependencyVulnService_RecalculateRawRiskAssessment_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetDependencyVulnService creates a new instance of AssetDependencyVulnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetDependencyVulnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetDependencyVulnService {
	mock := &AssetDependencyVulnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
