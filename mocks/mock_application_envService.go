// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	env "github.com/l3montree-dev/flawfix/internal/core/env"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AssetenvService is an autogenerated mock type for the envService type
type AssetenvService struct {
	mock.Mock
}

type AssetenvService_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetenvService) EXPECT() *AssetenvService_Expecter {
	return &AssetenvService_Expecter{mock: &_m.Mock}
}

// CreateDefaultEnvForApp provides a mock function with given fields: tx, assetID
func (_m *AssetenvService) CreateDefaultEnvForApp(tx *gorm.DB, assetID uuid.UUID) ([]env.Model, error) {
	ret := _m.Called(tx, assetID)

	if len(ret) == 0 {
		panic("no return value specified for CreateDefaultEnvForApp")
	}

	var r0 []env.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) ([]env.Model, error)); ok {
		return rf(tx, assetID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) []env.Model); ok {
		r0 = rf(tx, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]env.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, uuid.UUID) error); ok {
		r1 = rf(tx, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetenvService_CreateDefaultEnvForApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDefaultEnvForApp'
type AssetenvService_CreateDefaultEnvForApp_Call struct {
	*mock.Call
}

// CreateDefaultEnvForApp is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetID uuid.UUID
func (_e *AssetenvService_Expecter) CreateDefaultEnvForApp(tx interface{}, assetID interface{}) *AssetenvService_CreateDefaultEnvForApp_Call {
	return &AssetenvService_CreateDefaultEnvForApp_Call{Call: _e.mock.On("CreateDefaultEnvForApp", tx, assetID)}
}

func (_c *AssetenvService_CreateDefaultEnvForApp_Call) Run(run func(tx *gorm.DB, assetID uuid.UUID)) *AssetenvService_CreateDefaultEnvForApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AssetenvService_CreateDefaultEnvForApp_Call) Return(_a0 []env.Model, _a1 error) *AssetenvService_CreateDefaultEnvForApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetenvService_CreateDefaultEnvForApp_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) ([]env.Model, error)) *AssetenvService_CreateDefaultEnvForApp_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetenvService creates a new instance of AssetenvService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetenvService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetenvService {
	mock := &AssetenvService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
