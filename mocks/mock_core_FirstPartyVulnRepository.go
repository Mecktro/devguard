// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	core "github.com/l3montree-dev/devguard/internal/core"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/l3montree-dev/devguard/internal/database/models"

	uuid "github.com/google/uuid"
)

// CoreFirstPartyVulnRepository is an autogenerated mock type for the FirstPartyVulnRepository type
type CoreFirstPartyVulnRepository struct {
	mock.Mock
}

type CoreFirstPartyVulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreFirstPartyVulnRepository) EXPECT() *CoreFirstPartyVulnRepository_Expecter {
	return &CoreFirstPartyVulnRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: tx, id
func (_m *CoreFirstPartyVulnRepository) Activate(tx *gorm.DB, id string) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreFirstPartyVulnRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type CoreFirstPartyVulnRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id string
func (_e *CoreFirstPartyVulnRepository_Expecter) Activate(tx interface{}, id interface{}) *CoreFirstPartyVulnRepository_Activate_Call {
	return &CoreFirstPartyVulnRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *CoreFirstPartyVulnRepository_Activate_Call) Run(run func(tx *gorm.DB, id string)) *CoreFirstPartyVulnRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Activate_Call) Return(_a0 error) *CoreFirstPartyVulnRepository_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Activate_Call) RunAndReturn(run func(*gorm.DB, string) error) *CoreFirstPartyVulnRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function with no fields
func (_m *CoreFirstPartyVulnRepository) Begin() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// CoreFirstPartyVulnRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type CoreFirstPartyVulnRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *CoreFirstPartyVulnRepository_Expecter) Begin() *CoreFirstPartyVulnRepository_Begin_Call {
	return &CoreFirstPartyVulnRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *CoreFirstPartyVulnRepository_Begin_Call) Run(run func()) *CoreFirstPartyVulnRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Begin_Call) Return(_a0 *gorm.DB) *CoreFirstPartyVulnRepository_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Begin_Call) RunAndReturn(run func() *gorm.DB) *CoreFirstPartyVulnRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, t
func (_m *CoreFirstPartyVulnRepository) Create(tx *gorm.DB, t *models.FirstPartyVulnerability) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.FirstPartyVulnerability) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreFirstPartyVulnRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CoreFirstPartyVulnRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.FirstPartyVulnerability
func (_e *CoreFirstPartyVulnRepository_Expecter) Create(tx interface{}, t interface{}) *CoreFirstPartyVulnRepository_Create_Call {
	return &CoreFirstPartyVulnRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *CoreFirstPartyVulnRepository_Create_Call) Run(run func(tx *gorm.DB, t *models.FirstPartyVulnerability)) *CoreFirstPartyVulnRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.FirstPartyVulnerability))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Create_Call) Return(_a0 error) *CoreFirstPartyVulnRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *models.FirstPartyVulnerability) error) *CoreFirstPartyVulnRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function with given fields: tx, ts
func (_m *CoreFirstPartyVulnRepository) CreateBatch(tx *gorm.DB, ts []models.FirstPartyVulnerability) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.FirstPartyVulnerability) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreFirstPartyVulnRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type CoreFirstPartyVulnRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.FirstPartyVulnerability
func (_e *CoreFirstPartyVulnRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *CoreFirstPartyVulnRepository_CreateBatch_Call {
	return &CoreFirstPartyVulnRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *CoreFirstPartyVulnRepository_CreateBatch_Call) Run(run func(tx *gorm.DB, ts []models.FirstPartyVulnerability)) *CoreFirstPartyVulnRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.FirstPartyVulnerability))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_CreateBatch_Call) Return(_a0 error) *CoreFirstPartyVulnRepository_CreateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_CreateBatch_Call) RunAndReturn(run func(*gorm.DB, []models.FirstPartyVulnerability) error) *CoreFirstPartyVulnRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tx, id
func (_m *CoreFirstPartyVulnRepository) Delete(tx *gorm.DB, id string) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreFirstPartyVulnRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CoreFirstPartyVulnRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id string
func (_e *CoreFirstPartyVulnRepository_Expecter) Delete(tx interface{}, id interface{}) *CoreFirstPartyVulnRepository_Delete_Call {
	return &CoreFirstPartyVulnRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *CoreFirstPartyVulnRepository_Delete_Call) Run(run func(tx *gorm.DB, id string)) *CoreFirstPartyVulnRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Delete_Call) Return(_a0 error) *CoreFirstPartyVulnRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, string) error) *CoreFirstPartyVulnRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetId provides a mock function with given fields: tx, assetId
func (_m *CoreFirstPartyVulnRepository) GetByAssetId(tx *gorm.DB, assetId uuid.UUID) ([]models.FirstPartyVulnerability, error) {
	ret := _m.Called(tx, assetId)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetId")
	}

	var r0 []models.FirstPartyVulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) ([]models.FirstPartyVulnerability, error)); ok {
		return rf(tx, assetId)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) []models.FirstPartyVulnerability); ok {
		r0 = rf(tx, assetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FirstPartyVulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, uuid.UUID) error); ok {
		r1 = rf(tx, assetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreFirstPartyVulnRepository_GetByAssetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetId'
type CoreFirstPartyVulnRepository_GetByAssetId_Call struct {
	*mock.Call
}

// GetByAssetId is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetId uuid.UUID
func (_e *CoreFirstPartyVulnRepository_Expecter) GetByAssetId(tx interface{}, assetId interface{}) *CoreFirstPartyVulnRepository_GetByAssetId_Call {
	return &CoreFirstPartyVulnRepository_GetByAssetId_Call{Call: _e.mock.On("GetByAssetId", tx, assetId)}
}

func (_c *CoreFirstPartyVulnRepository_GetByAssetId_Call) Run(run func(tx *gorm.DB, assetId uuid.UUID)) *CoreFirstPartyVulnRepository_GetByAssetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetByAssetId_Call) Return(_a0 []models.FirstPartyVulnerability, _a1 error) *CoreFirstPartyVulnRepository_GetByAssetId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetByAssetId_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) ([]models.FirstPartyVulnerability, error)) *CoreFirstPartyVulnRepository_GetByAssetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetVersionPaged provides a mock function with given fields: tx, assetVersionName, assetID, pageInfo, search, filter, sort
func (_m *CoreFirstPartyVulnRepository) GetByAssetVersionPaged(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], map[string]int, error) {
	ret := _m.Called(tx, assetVersionName, assetID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetVersionPaged")
	}

	var r0 core.Paged[models.FirstPartyVulnerability]
	var r1 map[string]int
	var r2 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], map[string]int, error)); ok {
		return rf(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.FirstPartyVulnerability]); ok {
		r0 = rf(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.FirstPartyVulnerability])
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) map[string]int); ok {
		r1 = rf(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]int)
		}
	}

	if rf, ok := ret.Get(2).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r2 = rf(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CoreFirstPartyVulnRepository_GetByAssetVersionPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetVersionPaged'
type CoreFirstPartyVulnRepository_GetByAssetVersionPaged_Call struct {
	*mock.Call
}

// GetByAssetVersionPaged is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *CoreFirstPartyVulnRepository_Expecter) GetByAssetVersionPaged(tx interface{}, assetVersionName interface{}, assetID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *CoreFirstPartyVulnRepository_GetByAssetVersionPaged_Call {
	return &CoreFirstPartyVulnRepository_GetByAssetVersionPaged_Call{Call: _e.mock.On("GetByAssetVersionPaged", tx, assetVersionName, assetID, pageInfo, search, filter, sort)}
}

func (_c *CoreFirstPartyVulnRepository_GetByAssetVersionPaged_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *CoreFirstPartyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].(core.PageInfo), args[4].(string), args[5].([]core.FilterQuery), args[6].([]core.SortQuery))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetByAssetVersionPaged_Call) Return(_a0 core.Paged[models.FirstPartyVulnerability], _a1 map[string]int, _a2 error) *CoreFirstPartyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetByAssetVersionPaged_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], map[string]int, error)) *CoreFirstPartyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: tx
func (_m *CoreFirstPartyVulnRepository) GetDB(tx *gorm.DB) *gorm.DB {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// CoreFirstPartyVulnRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type CoreFirstPartyVulnRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *CoreFirstPartyVulnRepository_Expecter) GetDB(tx interface{}) *CoreFirstPartyVulnRepository_GetDB_Call {
	return &CoreFirstPartyVulnRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *CoreFirstPartyVulnRepository_GetDB_Call) Run(run func(tx *gorm.DB)) *CoreFirstPartyVulnRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetDB_Call) Return(_a0 *gorm.DB) *CoreFirstPartyVulnRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetDB_Call) RunAndReturn(run func(*gorm.DB) *gorm.DB) *CoreFirstPartyVulnRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultFirstPartyVulnsByOrgIdPaged provides a mock function with given fields: tx, userAllowedProjectIds, pageInfo, search, filter, sort
func (_m *CoreFirstPartyVulnRepository) GetDefaultFirstPartyVulnsByOrgIdPaged(tx *gorm.DB, userAllowedProjectIds []string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], error) {
	ret := _m.Called(tx, userAllowedProjectIds, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultFirstPartyVulnsByOrgIdPaged")
	}

	var r0 core.Paged[models.FirstPartyVulnerability]
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], error)); ok {
		return rf(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.FirstPartyVulnerability]); ok {
		r0 = rf(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.FirstPartyVulnerability])
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = rf(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultFirstPartyVulnsByOrgIdPaged'
type CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call struct {
	*mock.Call
}

// GetDefaultFirstPartyVulnsByOrgIdPaged is a helper method to define mock.On call
//   - tx *gorm.DB
//   - userAllowedProjectIds []string
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *CoreFirstPartyVulnRepository_Expecter) GetDefaultFirstPartyVulnsByOrgIdPaged(tx interface{}, userAllowedProjectIds interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call {
	return &CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call{Call: _e.mock.On("GetDefaultFirstPartyVulnsByOrgIdPaged", tx, userAllowedProjectIds, pageInfo, search, filter, sort)}
}

func (_c *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call) Run(run func(tx *gorm.DB, userAllowedProjectIds []string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]string), args[2].(core.PageInfo), args[3].(string), args[4].([]core.FilterQuery), args[5].([]core.SortQuery))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call) Return(_a0 core.Paged[models.FirstPartyVulnerability], _a1 error) *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call) RunAndReturn(run func(*gorm.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], error)) *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultFirstPartyVulnsByProjectIdPaged provides a mock function with given fields: tx, projectID, pageInfo, search, filter, sort
func (_m *CoreFirstPartyVulnRepository) GetDefaultFirstPartyVulnsByProjectIdPaged(tx *gorm.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], error) {
	ret := _m.Called(tx, projectID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultFirstPartyVulnsByProjectIdPaged")
	}

	var r0 core.Paged[models.FirstPartyVulnerability]
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], error)); ok {
		return rf(tx, projectID, pageInfo, search, filter, sort)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.FirstPartyVulnerability]); ok {
		r0 = rf(tx, projectID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.FirstPartyVulnerability])
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = rf(tx, projectID, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultFirstPartyVulnsByProjectIdPaged'
type CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call struct {
	*mock.Call
}

// GetDefaultFirstPartyVulnsByProjectIdPaged is a helper method to define mock.On call
//   - tx *gorm.DB
//   - projectID uuid.UUID
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *CoreFirstPartyVulnRepository_Expecter) GetDefaultFirstPartyVulnsByProjectIdPaged(tx interface{}, projectID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call {
	return &CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call{Call: _e.mock.On("GetDefaultFirstPartyVulnsByProjectIdPaged", tx, projectID, pageInfo, search, filter, sort)}
}

func (_c *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call) Run(run func(tx *gorm.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID), args[2].(core.PageInfo), args[3].(string), args[4].([]core.FilterQuery), args[5].([]core.SortQuery))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call) Return(_a0 core.Paged[models.FirstPartyVulnerability], _a1 error) *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], error)) *CoreFirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstPartyVulnsByAssetIdPagedAndFlat provides a mock function with given fields: tx, assetVersionName, assetID, pageInfo, search, filter, sort
func (_m *CoreFirstPartyVulnRepository) GetFirstPartyVulnsByAssetIdPagedAndFlat(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], error) {
	ret := _m.Called(tx, assetVersionName, assetID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstPartyVulnsByAssetIdPagedAndFlat")
	}

	var r0 core.Paged[models.FirstPartyVulnerability]
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], error)); ok {
		return rf(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.FirstPartyVulnerability]); ok {
		r0 = rf(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.FirstPartyVulnerability])
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = rf(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreFirstPartyVulnRepository_GetFirstPartyVulnsByAssetIdPagedAndFlat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstPartyVulnsByAssetIdPagedAndFlat'
type CoreFirstPartyVulnRepository_GetFirstPartyVulnsByAssetIdPagedAndFlat_Call struct {
	*mock.Call
}

// GetFirstPartyVulnsByAssetIdPagedAndFlat is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *CoreFirstPartyVulnRepository_Expecter) GetFirstPartyVulnsByAssetIdPagedAndFlat(tx interface{}, assetVersionName interface{}, assetID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *CoreFirstPartyVulnRepository_GetFirstPartyVulnsByAssetIdPagedAndFlat_Call {
	return &CoreFirstPartyVulnRepository_GetFirstPartyVulnsByAssetIdPagedAndFlat_Call{Call: _e.mock.On("GetFirstPartyVulnsByAssetIdPagedAndFlat", tx, assetVersionName, assetID, pageInfo, search, filter, sort)}
}

func (_c *CoreFirstPartyVulnRepository_GetFirstPartyVulnsByAssetIdPagedAndFlat_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *CoreFirstPartyVulnRepository_GetFirstPartyVulnsByAssetIdPagedAndFlat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].(core.PageInfo), args[4].(string), args[5].([]core.FilterQuery), args[6].([]core.SortQuery))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetFirstPartyVulnsByAssetIdPagedAndFlat_Call) Return(_a0 core.Paged[models.FirstPartyVulnerability], _a1 error) *CoreFirstPartyVulnRepository_GetFirstPartyVulnsByAssetIdPagedAndFlat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_GetFirstPartyVulnsByAssetIdPagedAndFlat_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.FirstPartyVulnerability], error)) *CoreFirstPartyVulnRepository_GetFirstPartyVulnsByAssetIdPagedAndFlat_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ids
func (_m *CoreFirstPartyVulnRepository) List(ids []string) ([]models.FirstPartyVulnerability, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.FirstPartyVulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.FirstPartyVulnerability, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.FirstPartyVulnerability); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FirstPartyVulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreFirstPartyVulnRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CoreFirstPartyVulnRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []string
func (_e *CoreFirstPartyVulnRepository_Expecter) List(ids interface{}) *CoreFirstPartyVulnRepository_List_Call {
	return &CoreFirstPartyVulnRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *CoreFirstPartyVulnRepository_List_Call) Run(run func(ids []string)) *CoreFirstPartyVulnRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_List_Call) Return(_a0 []models.FirstPartyVulnerability, _a1 error) *CoreFirstPartyVulnRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_List_Call) RunAndReturn(run func([]string) ([]models.FirstPartyVulnerability, error)) *CoreFirstPartyVulnRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByScanner provides a mock function with given fields: assetVersionName, assetID, scannerID
func (_m *CoreFirstPartyVulnRepository) ListByScanner(assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.FirstPartyVulnerability, error) {
	ret := _m.Called(assetVersionName, assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for ListByScanner")
	}

	var r0 []models.FirstPartyVulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, string) ([]models.FirstPartyVulnerability, error)); ok {
		return rf(assetVersionName, assetID, scannerID)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, string) []models.FirstPartyVulnerability); ok {
		r0 = rf(assetVersionName, assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FirstPartyVulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = rf(assetVersionName, assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreFirstPartyVulnRepository_ListByScanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByScanner'
type CoreFirstPartyVulnRepository_ListByScanner_Call struct {
	*mock.Call
}

// ListByScanner is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scannerID string
func (_e *CoreFirstPartyVulnRepository_Expecter) ListByScanner(assetVersionName interface{}, assetID interface{}, scannerID interface{}) *CoreFirstPartyVulnRepository_ListByScanner_Call {
	return &CoreFirstPartyVulnRepository_ListByScanner_Call{Call: _e.mock.On("ListByScanner", assetVersionName, assetID, scannerID)}
}

func (_c *CoreFirstPartyVulnRepository_ListByScanner_Call) Run(run func(assetVersionName string, assetID uuid.UUID, scannerID string)) *CoreFirstPartyVulnRepository_ListByScanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_ListByScanner_Call) Return(_a0 []models.FirstPartyVulnerability, _a1 error) *CoreFirstPartyVulnRepository_ListByScanner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_ListByScanner_Call) RunAndReturn(run func(string, uuid.UUID, string) ([]models.FirstPartyVulnerability, error)) *CoreFirstPartyVulnRepository_ListByScanner_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *CoreFirstPartyVulnRepository) Read(id string) (models.FirstPartyVulnerability, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.FirstPartyVulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.FirstPartyVulnerability, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.FirstPartyVulnerability); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.FirstPartyVulnerability)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreFirstPartyVulnRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type CoreFirstPartyVulnRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *CoreFirstPartyVulnRepository_Expecter) Read(id interface{}) *CoreFirstPartyVulnRepository_Read_Call {
	return &CoreFirstPartyVulnRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *CoreFirstPartyVulnRepository_Read_Call) Run(run func(id string)) *CoreFirstPartyVulnRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Read_Call) Return(_a0 models.FirstPartyVulnerability, _a1 error) *CoreFirstPartyVulnRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Read_Call) RunAndReturn(run func(string) (models.FirstPartyVulnerability, error)) *CoreFirstPartyVulnRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, vuln
func (_m *CoreFirstPartyVulnRepository) Save(tx *gorm.DB, vuln *models.FirstPartyVulnerability) error {
	ret := _m.Called(tx, vuln)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.FirstPartyVulnerability) error); ok {
		r0 = rf(tx, vuln)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreFirstPartyVulnRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type CoreFirstPartyVulnRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - vuln *models.FirstPartyVulnerability
func (_e *CoreFirstPartyVulnRepository_Expecter) Save(tx interface{}, vuln interface{}) *CoreFirstPartyVulnRepository_Save_Call {
	return &CoreFirstPartyVulnRepository_Save_Call{Call: _e.mock.On("Save", tx, vuln)}
}

func (_c *CoreFirstPartyVulnRepository_Save_Call) Run(run func(tx *gorm.DB, vuln *models.FirstPartyVulnerability)) *CoreFirstPartyVulnRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.FirstPartyVulnerability))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Save_Call) Return(_a0 error) *CoreFirstPartyVulnRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.FirstPartyVulnerability) error) *CoreFirstPartyVulnRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, vulns
func (_m *CoreFirstPartyVulnRepository) SaveBatch(tx *gorm.DB, vulns []models.FirstPartyVulnerability) error {
	ret := _m.Called(tx, vulns)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.FirstPartyVulnerability) error); ok {
		r0 = rf(tx, vulns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreFirstPartyVulnRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type CoreFirstPartyVulnRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - vulns []models.FirstPartyVulnerability
func (_e *CoreFirstPartyVulnRepository_Expecter) SaveBatch(tx interface{}, vulns interface{}) *CoreFirstPartyVulnRepository_SaveBatch_Call {
	return &CoreFirstPartyVulnRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, vulns)}
}

func (_c *CoreFirstPartyVulnRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, vulns []models.FirstPartyVulnerability)) *CoreFirstPartyVulnRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.FirstPartyVulnerability))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_SaveBatch_Call) Return(_a0 error) *CoreFirstPartyVulnRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.FirstPartyVulnerability) error) *CoreFirstPartyVulnRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: txFunc
func (_m *CoreFirstPartyVulnRepository) Transaction(txFunc func(*gorm.DB) error) error {
	ret := _m.Called(txFunc)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreFirstPartyVulnRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type CoreFirstPartyVulnRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - txFunc func(*gorm.DB) error
func (_e *CoreFirstPartyVulnRepository_Expecter) Transaction(txFunc interface{}) *CoreFirstPartyVulnRepository_Transaction_Call {
	return &CoreFirstPartyVulnRepository_Transaction_Call{Call: _e.mock.On("Transaction", txFunc)}
}

func (_c *CoreFirstPartyVulnRepository_Transaction_Call) Run(run func(txFunc func(*gorm.DB) error)) *CoreFirstPartyVulnRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Transaction_Call) Return(_a0 error) *CoreFirstPartyVulnRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreFirstPartyVulnRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *CoreFirstPartyVulnRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreFirstPartyVulnRepository creates a new instance of CoreFirstPartyVulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreFirstPartyVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreFirstPartyVulnRepository {
	mock := &CoreFirstPartyVulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
