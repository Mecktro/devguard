// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// CoreHasID is an autogenerated mock type for the HasID type
type CoreHasID struct {
	mock.Mock
}

type CoreHasID_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreHasID) EXPECT() *CoreHasID_Expecter {
	return &CoreHasID_Expecter{mock: &_m.Mock}
}

// GetID provides a mock function with given fields:
func (_m *CoreHasID) GetID() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// CoreHasID_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type CoreHasID_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *CoreHasID_Expecter) GetID() *CoreHasID_GetID_Call {
	return &CoreHasID_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *CoreHasID_GetID_Call) Run(run func()) *CoreHasID_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreHasID_GetID_Call) Return(_a0 uuid.UUID) *CoreHasID_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoreHasID_GetID_Call) RunAndReturn(run func() uuid.UUID) *CoreHasID_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreHasID creates a new instance of CoreHasID. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreHasID(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreHasID {
	mock := &CoreHasID{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
