// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// AssetversionDependencyVulnRepository is an autogenerated mock type for the dependencyVulnRepository type
type AssetversionDependencyVulnRepository struct {
	mock.Mock
}

type AssetversionDependencyVulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetversionDependencyVulnRepository) EXPECT() *AssetversionDependencyVulnRepository_Expecter {
	return &AssetversionDependencyVulnRepository_Expecter{mock: &_m.Mock}
}

// GetDependencyVulnsByPurl provides a mock function with given fields: tx, purl
func (_m *AssetversionDependencyVulnRepository) GetDependencyVulnsByPurl(tx *gorm.DB, purl []string) ([]models.DependencyVuln, error) {
	ret := _m.Called(tx, purl)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyVulnsByPurl")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) ([]models.DependencyVuln, error)); ok {
		return rf(tx, purl)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) []models.DependencyVuln); ok {
		r0 = rf(tx, purl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []string) error); ok {
		r1 = rf(tx, purl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetversionDependencyVulnRepository_GetDependencyVulnsByPurl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyVulnsByPurl'
type AssetversionDependencyVulnRepository_GetDependencyVulnsByPurl_Call struct {
	*mock.Call
}

// GetDependencyVulnsByPurl is a helper method to define mock.On call
//   - tx *gorm.DB
//   - purl []string
func (_e *AssetversionDependencyVulnRepository_Expecter) GetDependencyVulnsByPurl(tx interface{}, purl interface{}) *AssetversionDependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	return &AssetversionDependencyVulnRepository_GetDependencyVulnsByPurl_Call{Call: _e.mock.On("GetDependencyVulnsByPurl", tx, purl)}
}

func (_c *AssetversionDependencyVulnRepository_GetDependencyVulnsByPurl_Call) Run(run func(tx *gorm.DB, purl []string)) *AssetversionDependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]string))
	})
	return _c
}

func (_c *AssetversionDependencyVulnRepository_GetDependencyVulnsByPurl_Call) Return(_a0 []models.DependencyVuln, _a1 error) *AssetversionDependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetversionDependencyVulnRepository_GetDependencyVulnsByPurl_Call) RunAndReturn(run func(*gorm.DB, []string) ([]models.DependencyVuln, error)) *AssetversionDependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	_c.Call.Return(run)
	return _c
}

// ListByScanner provides a mock function with given fields: assetVersionName, assetID, scannerID
func (_m *AssetversionDependencyVulnRepository) ListByScanner(assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.DependencyVuln, error) {
	ret := _m.Called(assetVersionName, assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for ListByScanner")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, string) ([]models.DependencyVuln, error)); ok {
		return rf(assetVersionName, assetID, scannerID)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, string) []models.DependencyVuln); ok {
		r0 = rf(assetVersionName, assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = rf(assetVersionName, assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssetversionDependencyVulnRepository_ListByScanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByScanner'
type AssetversionDependencyVulnRepository_ListByScanner_Call struct {
	*mock.Call
}

// ListByScanner is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scannerID string
func (_e *AssetversionDependencyVulnRepository_Expecter) ListByScanner(assetVersionName interface{}, assetID interface{}, scannerID interface{}) *AssetversionDependencyVulnRepository_ListByScanner_Call {
	return &AssetversionDependencyVulnRepository_ListByScanner_Call{Call: _e.mock.On("ListByScanner", assetVersionName, assetID, scannerID)}
}

func (_c *AssetversionDependencyVulnRepository_ListByScanner_Call) Run(run func(assetVersionName string, assetID uuid.UUID, scannerID string)) *AssetversionDependencyVulnRepository_ListByScanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *AssetversionDependencyVulnRepository_ListByScanner_Call) Return(_a0 []models.DependencyVuln, _a1 error) *AssetversionDependencyVulnRepository_ListByScanner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AssetversionDependencyVulnRepository_ListByScanner_Call) RunAndReturn(run func(string, uuid.UUID, string) ([]models.DependencyVuln, error)) *AssetversionDependencyVulnRepository_ListByScanner_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: db, dependencyVulns
func (_m *AssetversionDependencyVulnRepository) SaveBatch(db *gorm.DB, dependencyVulns []models.DependencyVuln) error {
	ret := _m.Called(db, dependencyVulns)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.DependencyVuln) error); ok {
		r0 = rf(db, dependencyVulns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetversionDependencyVulnRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type AssetversionDependencyVulnRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - db *gorm.DB
//   - dependencyVulns []models.DependencyVuln
func (_e *AssetversionDependencyVulnRepository_Expecter) SaveBatch(db interface{}, dependencyVulns interface{}) *AssetversionDependencyVulnRepository_SaveBatch_Call {
	return &AssetversionDependencyVulnRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", db, dependencyVulns)}
}

func (_c *AssetversionDependencyVulnRepository_SaveBatch_Call) Run(run func(db *gorm.DB, dependencyVulns []models.DependencyVuln)) *AssetversionDependencyVulnRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.DependencyVuln))
	})
	return _c
}

func (_c *AssetversionDependencyVulnRepository_SaveBatch_Call) Return(_a0 error) *AssetversionDependencyVulnRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetversionDependencyVulnRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.DependencyVuln) error) *AssetversionDependencyVulnRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: txFunc
func (_m *AssetversionDependencyVulnRepository) Transaction(txFunc func(*gorm.DB) error) error {
	ret := _m.Called(txFunc)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssetversionDependencyVulnRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type AssetversionDependencyVulnRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - txFunc func(*gorm.DB) error
func (_e *AssetversionDependencyVulnRepository_Expecter) Transaction(txFunc interface{}) *AssetversionDependencyVulnRepository_Transaction_Call {
	return &AssetversionDependencyVulnRepository_Transaction_Call{Call: _e.mock.On("Transaction", txFunc)}
}

func (_c *AssetversionDependencyVulnRepository_Transaction_Call) Run(run func(txFunc func(*gorm.DB) error)) *AssetversionDependencyVulnRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *AssetversionDependencyVulnRepository_Transaction_Call) Return(_a0 error) *AssetversionDependencyVulnRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssetversionDependencyVulnRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *AssetversionDependencyVulnRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssetversionDependencyVulnRepository creates a new instance of AssetversionDependencyVulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetversionDependencyVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetversionDependencyVulnRepository {
	mock := &AssetversionDependencyVulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
