// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// StatisticsDependencyVulnRepository is an autogenerated mock type for the dependencyVulnRepository type
type StatisticsDependencyVulnRepository struct {
	mock.Mock
}

type StatisticsDependencyVulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StatisticsDependencyVulnRepository) EXPECT() *StatisticsDependencyVulnRepository_Expecter {
	return &StatisticsDependencyVulnRepository_Expecter{mock: &_m.Mock}
}

// GetAllOpenVulnsByAssetVersionNameAndAssetId provides a mock function with given fields: tx, assetVersionName, assetID
func (_m *StatisticsDependencyVulnRepository) GetAllOpenVulnsByAssetVersionNameAndAssetId(tx *gorm.DB, assetVersionName string, assetID uuid.UUID) ([]models.DependencyVuln, error) {
	ret := _m.Called(tx, assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOpenVulnsByAssetVersionNameAndAssetId")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID) ([]models.DependencyVuln, error)); ok {
		return rf(tx, assetVersionName, assetID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID) []models.DependencyVuln); ok {
		r0 = rf(tx, assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID) error); ok {
		r1 = rf(tx, assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOpenVulnsByAssetVersionNameAndAssetId'
type StatisticsDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call struct {
	*mock.Call
}

// GetAllOpenVulnsByAssetVersionNameAndAssetId is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
func (_e *StatisticsDependencyVulnRepository_Expecter) GetAllOpenVulnsByAssetVersionNameAndAssetId(tx interface{}, assetVersionName interface{}, assetID interface{}) *StatisticsDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	return &StatisticsDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call{Call: _e.mock.On("GetAllOpenVulnsByAssetVersionNameAndAssetId", tx, assetVersionName, assetID)}
}

func (_c *StatisticsDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID)) *StatisticsDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *StatisticsDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call) Return(_a0 []models.DependencyVuln, _a1 error) *StatisticsDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID) ([]models.DependencyVuln, error)) *StatisticsDependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyVulnsByAssetVersion provides a mock function with given fields: tx, assetVersionName, assetID
func (_m *StatisticsDependencyVulnRepository) GetDependencyVulnsByAssetVersion(tx *gorm.DB, assetVersionName string, assetID uuid.UUID) ([]models.DependencyVuln, error) {
	ret := _m.Called(tx, assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyVulnsByAssetVersion")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID) ([]models.DependencyVuln, error)); ok {
		return rf(tx, assetVersionName, assetID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID) []models.DependencyVuln); ok {
		r0 = rf(tx, assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID) error); ok {
		r1 = rf(tx, assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyVulnsByAssetVersion'
type StatisticsDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call struct {
	*mock.Call
}

// GetDependencyVulnsByAssetVersion is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
func (_e *StatisticsDependencyVulnRepository_Expecter) GetDependencyVulnsByAssetVersion(tx interface{}, assetVersionName interface{}, assetID interface{}) *StatisticsDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	return &StatisticsDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call{Call: _e.mock.On("GetDependencyVulnsByAssetVersion", tx, assetVersionName, assetID)}
}

func (_c *StatisticsDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID)) *StatisticsDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *StatisticsDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call) Return(_a0 []models.DependencyVuln, _a1 error) *StatisticsDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID) ([]models.DependencyVuln, error)) *StatisticsDependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatisticsDependencyVulnRepository creates a new instance of StatisticsDependencyVulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatisticsDependencyVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatisticsDependencyVulnRepository {
	mock := &StatisticsDependencyVulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
