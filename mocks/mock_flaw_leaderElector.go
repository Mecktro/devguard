// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// VulnLeaderElector is an autogenerated mock type for the leaderElector type
type VulnLeaderElector struct {
	mock.Mock
}

type VulnLeaderElector_Expecter struct {
	mock *mock.Mock
}

func (_m *VulnLeaderElector) EXPECT() *VulnLeaderElector_Expecter {
	return &VulnLeaderElector_Expecter{mock: &_m.Mock}
}

// IfLeader provides a mock function with given fields: ctx, fn
func (_m *VulnLeaderElector) IfLeader(ctx context.Context, fn func() error) {
	_m.Called(ctx, fn)
}

// VulnLeaderElector_IfLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IfLeader'
type VulnLeaderElector_IfLeader_Call struct {
	*mock.Call
}

// IfLeader is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func() error
func (_e *VulnLeaderElector_Expecter) IfLeader(ctx interface{}, fn interface{}) *VulnLeaderElector_IfLeader_Call {
	return &VulnLeaderElector_IfLeader_Call{Call: _e.mock.On("IfLeader", ctx, fn)}
}

func (_c *VulnLeaderElector_IfLeader_Call) Run(run func(ctx context.Context, fn func() error)) *VulnLeaderElector_IfLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func() error))
	})
	return _c
}

func (_c *VulnLeaderElector_IfLeader_Call) Return() *VulnLeaderElector_IfLeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *VulnLeaderElector_IfLeader_Call) RunAndReturn(run func(context.Context, func() error)) *VulnLeaderElector_IfLeader_Call {
	_c.Run(run)
	return _c
}

// NewVulnLeaderElector creates a new instance of VulnLeaderElector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVulnLeaderElector(t interface {
	mock.TestingT
	Cleanup(func())
}) *VulnLeaderElector {
	mock := &VulnLeaderElector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
