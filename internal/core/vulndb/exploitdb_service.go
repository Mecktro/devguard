package vulndb

import (
	"context"
	"io"
	"log/slog"
	"net/http"
	"strings"
	"time"

	"github.com/l3montree-dev/flawfix/internal/database/models"
	"github.com/pkg/errors"
)

type exploitDBService struct {
	nvdService    NVDService
	cveRepository cveRepository
	httpClient    *http.Client
}

func NewExploitDBService(nvdService NVDService, cveRepository cveRepository) exploitDBService {
	return exploitDBService{
		nvdService:    nvdService,
		cveRepository: cveRepository,
		httpClient:    &http.Client{},
	}
}

var exploitDBURL = "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv"

func (s *exploitDBService) fetchCSV(ctx context.Context) ([]models.CVE, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, epssURL, nil)

	if err != nil {
		return nil, err
	}

	res, err := s.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	defer res.Body.Close()

	bytes, err := io.ReadAll(res.Body)
	if err != nil {
		return nil, errors.Wrap(err, "could not read body")
	}

	results := make([]models.CVE, 0)

	// parse the csv - we do not care about the first line - its the header
	// id,file,description,date_published,author,type,platform,port,date_added,date_updated,verified,codes,tags,aliases,screenshot_url,application_url,source_url
	for _, line := range strings.Split(string(bytes), "\n")[1:] {
		columns := strings.Split(line, ",")
		if len(columns) != 17 {
			slog.Warn("could not parse line", "line", line)
			continue
		}
		// exploitPublished := time.Par columns[3]

		results = append(results, models.CVE{
			CVE: columns[0],
		})
	}

	return results, nil
}

func (s exploitDBService) Mirror() error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	cves, err := s.fetchCSV(ctx)
	cancel()
	if err != nil {
		slog.Error("Could not fetch EPSS data", "error", err)
		return err
	} else {
		for _, cve := range cves {
			tmpCVE := cve
			if err := s.cveRepository.GetDB(nil).Model(&models.CVE{}).Where("cve = ?", tmpCVE.CVE).Updates(map[string]interface{}{
				"epss":       tmpCVE.EPSS,
				"percentile": tmpCVE.Percentile,
			}).Error; err != nil {
				slog.Error("could not save EPSS data", "err", err, "cve", tmpCVE.CVE)
				// just swallow the error
			}
		}
	}
	return nil
}
