package pat_test

import (
	"testing"

	"github.com/l3montree-dev/flawfix/internal/core/pat"
)

func TestDoCryptoChallenge(t *testing.T) {
	t.Run("", func(t *testing.T) {
		pubKey := "4d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a30444151634451674145566979504b72633467324e4a346c3953364f48546b55476278704d780a48633433726a49307674775771324943666c56647538495578465762666d594a306f6c2b534433676c6a386831625447753549513564325454773d3d"
		_, signedFingerprint, err := pat.DoCryptoChallenge("4d494748416745414d424d4742797147534d34394167454743437147534d3439417745484247307761774942415151677133466f777058704e6c72594f387a370a634a58753839312f44664370646b466a456d5576354a48314952576852414e43414152574c493871747a694459306e6958314c6f34644f52515a76476b7a45640a7a6a65754d6a532b3342617259674a2b5656323777685445565a742b5a676e53695835495065435750794856744d61376b68446c335a4e50")
		if err != nil {
			t.Fatal(err)
		}
		res, err := pat.VerifyCryptoChallenge(pubKey, signedFingerprint)
		if err != nil {
			t.Fatal(err)
		}

		if !res {
			t.Fatal("signature verification failed")
		}
	})
}
