package repositories

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"

	"github.com/l3montree-dev/devguard/internal/database/models"
	"gorm.io/gorm"
)

type VulnStats struct {
	TotalRisk           float64 `json:"total_risk"`
	AvgRisk             float64 `json:"avg_risk"`
	MaxRisk             float64 `json:"max_risk"`
	DependencyVulnCount int64   `json:"dependencyVuln_count"`
	PackageName         string  `json:"package_name"`
}

type VulnerabilityRepository[T Tabler] struct {
	db core.DB
	Repository[string, T, core.DB]
}

func NewVulnerabilityRepository[T Tabler](db core.DB) *VulnerabilityRepository[T] {
	return &VulnerabilityRepository[T]{
		db:         db,
		Repository: newGormRepository[string, T](db),
	}
}

func (r *VulnerabilityRepository[T]) GetByAssetId(
	tx *gorm.DB,
	assetId uuid.UUID,
) ([]T, error) {

	var vulns []T = []T{}
	// get all vulnerabilities of the asset
	if err := r.Repository.GetDB(tx).Where("asset_id = ?", assetId).Find(&vulns).Error; err != nil {
		return nil, err
	}
	return vulns, nil
}

func (r *VulnerabilityRepository[T]) ListByScanner(assetID uuid.UUID, scannerID string) ([]T, error) {
	var vulns []T = []T{}
	if err := r.Repository.GetDB(r.db).Preload("CVE").Where("asset_id = ? AND scanner_id = ?", assetID, scannerID).Find(&vulns).Error; err != nil {
		return nil, err
	}
	return vulns, nil
}

func (r *VulnerabilityRepository[T]) GetAllDependencyVulnsByAssetID(tx core.DB, assetID uuid.UUID) ([]T, error) {
	var dependencyVulns []T = []T{}
	if err := r.Repository.GetDB(tx).Where("asset_id = ?", assetID).Find(&dependencyVulns).Error; err != nil {
		return nil, err
	}
	return dependencyVulns, nil
}

func (r *VulnerabilityRepository[T]) GetAllOpenDependencyVulnsByAssetID(tx core.DB, assetID uuid.UUID) ([]T, error) {
	var dependencyVulns []T = []T{}
	if err := r.Repository.GetDB(tx).Where("asset_id = ? AND state = ?", assetID, models.DependencyVulnStateOpen).Find(&dependencyVulns).Error; err != nil {
		return nil, err
	}
	return dependencyVulns, nil
}

func (r *VulnerabilityRepository[T]) FindByTicketID(tx core.DB, ticketID string) (models.DependencyVulnerability, error) {
	var dependencyVuln models.DependencyVulnerability
	if err := r.Repository.GetDB(tx).Where("ticket_id = ?", ticketID).First(&dependencyVuln).Error; err != nil {
		return models.DependencyVulnerability{}, err
	}
	return dependencyVuln, nil
}

func (r *VulnerabilityRepository[T]) GetOrgFromDependencyVulnID(tx core.DB, dependencyVulnID string) (models.Org, error) {
	var org models.Org
	if err := r.GetDB(tx).Raw("SELECT organizations.* from organizations left join projects p on organizations.id = p.organization_id left join assets a on p.id = a.project_id left join dependencyVulns f on a.id = f.asset_id where f.id = ?", dependencyVulnID).First(&org).Error; err != nil {
		return models.Org{}, err
	}
	return org, nil
}
